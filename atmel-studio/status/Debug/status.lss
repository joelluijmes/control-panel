
status.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000574  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010e  0080010e  00000616  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d7  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a65  00000000  00000000  00002471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e23  00000000  00000000  000035e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	c7 c0       	rjmp	.+398    	; 0x1ae <__vector_15>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e4 e7       	ldi	r30, 0x74	; 116
  3c:	f5 e0       	ldi	r31, 0x05	; 5
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	ae 30       	cpi	r26, 0x0E	; 14
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	ae e0       	ldi	r26, 0x0E	; 14
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a7 31       	cpi	r26, 0x17	; 23
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	14 d0       	rcall	.+40     	; 0x84 <main>
  5c:	89 c2       	rjmp	.+1298   	; 0x570 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <completed_spi>:
        return MIDDLE;
}

static completed_t completed;
static void completed_spi(spi_state_t* state)
{
  60:	dc 01       	movw	r26, r24
    completed((uint8_t*)state->tran_buf, state->tran_len, (uint8_t*)state->recv_buf, state->recv_len);
  62:	15 96       	adiw	r26, 0x05	; 5
  64:	2c 91       	ld	r18, X
  66:	15 97       	sbiw	r26, 0x05	; 5
  68:	14 96       	adiw	r26, 0x04	; 4
  6a:	6c 91       	ld	r22, X
  6c:	14 97       	sbiw	r26, 0x04	; 4
  6e:	12 96       	adiw	r26, 0x02	; 2
  70:	4d 91       	ld	r20, X+
  72:	5c 91       	ld	r21, X
  74:	13 97       	sbiw	r26, 0x03	; 3
  76:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
  7a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x1>
  7e:	8d 91       	ld	r24, X+
  80:	9c 91       	ld	r25, X
  82:	09 94       	ijmp

00000084 <main>:
}

int main(void)
{   
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	cc 54       	subi	r28, 0x4C	; 76
  8e:	d1 09       	sbc	r29, r1
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
    DDRA |= 1 << 3;
  9a:	6b 9a       	sbi	0x0d, 3	; 13

    spi_init(SPI_SLAVE, SPI_64X);
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	57 d0       	rcall	.+174    	; 0x150 <spi_init>
    sei();
  a2:	78 94       	sei

    //Starts AD in Free Running mode with prescaler of 128
    ADMUX = 1 << REFS0;			// AVCC as reference | ADC0
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    ADCSRA = 1 << ADEN | 1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0;
  aa:	87 e8       	ldi	r24, 0x87	; 135
  ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
  b0:	69 9a       	sbi	0x0d, 1	; 13
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
  b2:	38 9a       	sbi	0x07, 0	; 7
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
  b4:	68 9a       	sbi	0x0d, 0	; 13

    ROT1_DDR &= ~ROT1_MASK;
  b6:	26 98       	cbi	0x04, 6	; 4
    ROT2_DDR &= ~ROT2_MASK;
  b8:	55 98       	cbi	0x0a, 5	; 10
    ROT4_DDR &= ~ROT4_MASK;
  ba:	27 98       	cbi	0x04, 7	; 4
    ROT8_DDR &= ~ROT8_MASK;
  bc:	56 98       	cbi	0x0a, 6	; 10

    max7221_init();
  be:	3a d1       	rcall	.+628    	; 0x334 <max7221_init>

    uint8_t tran_buf[32] = { 2, 3, 4, 5, 6, 7}, recv_buf[32];
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	f8 2e       	mov	r15, r24
  c4:	be 01       	movw	r22, r28
  c6:	6f 5d       	subi	r22, 0xDF	; 223
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	fb 01       	movw	r30, r22
  cc:	8f 2d       	mov	r24, r15
  ce:	11 92       	st	Z+, r1
  d0:	8a 95       	dec	r24
  d2:	e9 f7       	brne	.-6      	; 0xce <main+0x4a>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	89 a3       	std	Y+33, r24	; 0x21
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	8a a3       	std	Y+34, r24	; 0x22
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	8b a3       	std	Y+35, r24	; 0x23
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	8c a3       	std	Y+36, r24	; 0x24
  e4:	96 e0       	ldi	r25, 0x06	; 6
  e6:	e9 2e       	mov	r14, r25
  e8:	ed a2       	std	Y+37, r14	; 0x25
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	8e a3       	std	Y+38, r24	; 0x26
    proto_packet_t transmit = proto_create(2, tran_buf, 2);
  ee:	42 e0       	ldi	r20, 0x02	; 2
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	bb d1       	rcall	.+886    	; 0x46a <proto_create>
  f4:	28 96       	adiw	r28, 0x08	; 8
  f6:	2f af       	std	Y+63, r18	; 0x3f
  f8:	28 97       	sbiw	r28, 0x08	; 8
  fa:	29 96       	adiw	r28, 0x09	; 9
  fc:	3f af       	std	Y+63, r19	; 0x3f
  fe:	29 97       	sbiw	r28, 0x09	; 9
 100:	2a 96       	adiw	r28, 0x0a	; 10
 102:	4f af       	std	Y+63, r20	; 0x3f
 104:	2a 97       	sbiw	r28, 0x0a	; 10
 106:	2b 96       	adiw	r28, 0x0b	; 11
 108:	5f af       	std	Y+63, r21	; 0x3f
 10a:	2b 97       	sbiw	r28, 0x0b	; 11
 10c:	2c 96       	adiw	r28, 0x0c	; 12
 10e:	6f af       	std	Y+63, r22	; 0x3f
 110:	2c 97       	sbiw	r28, 0x0c	; 12
 112:	2d 96       	adiw	r28, 0x0d	; 13
 114:	7f af       	std	Y+63, r23	; 0x3f
 116:	2d 97       	sbiw	r28, 0x0d	; 13
    proto_packet_t receive = { .payload = recv_buf, .len = 32 };
 118:	8e 01       	movw	r16, r28
 11a:	0f 5b       	subi	r16, 0xBF	; 191
 11c:	1f 4f       	sbci	r17, 0xFF	; 255
 11e:	f8 01       	movw	r30, r16
 120:	11 92       	st	Z+, r1
 122:	ea 94       	dec	r14
 124:	e9 f7       	brne	.-6      	; 0x120 <main+0x9c>
 126:	f8 01       	movw	r30, r16
 128:	f1 82       	std	Z+1, r15	; 0x01
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	93 83       	std	Z+3, r25	; 0x03
 130:	82 83       	std	Z+2, r24	; 0x02

    spi_install_hook(completed_spi);
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	36 d0       	rcall	.+108    	; 0x1a4 <spi_install_hook>
    proto_init(&completed, spi_tranceive);
 138:	68 ec       	ldi	r22, 0xC8	; 200
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	85 d1       	rcall	.+778    	; 0x44c <proto_init>
    while (1)
    {
        //spi_tranceive(tran_buf, 6, recv_buf, 6);
        //while (!spi_completed());

        proto_tranceive(&transmit, &receive);
 142:	b8 01       	movw	r22, r16
 144:	ce 01       	movw	r24, r28
 146:	89 5b       	subi	r24, 0xB9	; 185
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	f2 d1       	rcall	.+996    	; 0x530 <proto_tranceive>
        proto_wait();        
 14c:	89 d1       	rcall	.+786    	; 0x460 <proto_wait>
    }
 14e:	f9 cf       	rjmp	.-14     	; 0x142 <main+0xbe>

00000150 <spi_init>:
}

int8_t spi_transmit(uint8_t* buffer, uint8_t len)
{
    return _spi_tranceive(&spi_state, buffer, len, NULL, len);
}
 150:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
 154:	80 fb       	bst	r24, 0
 156:	90 f9       	bld	r25, 0
 158:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_start+0x8>
 15c:	96 2f       	mov	r25, r22
 15e:	93 70       	andi	r25, 0x03	; 3
 160:	90 6c       	ori	r25, 0xC0	; 192
 162:	9c bd       	out	0x2c, r25	; 44
 164:	81 11       	cpse	r24, r1
 166:	0d c0       	rjmp	.+26     	; 0x182 <spi_init+0x32>
 168:	24 98       	cbi	0x04, 4	; 4
 16a:	23 9a       	sbi	0x04, 3	; 4
 16c:	25 9a       	sbi	0x04, 5	; 4
 16e:	22 9a       	sbi	0x04, 2	; 4
 170:	8c b5       	in	r24, 0x2c	; 44
 172:	80 61       	ori	r24, 0x10	; 16
 174:	8c bd       	out	0x2c, r24	; 44
 176:	62 ff       	sbrs	r22, 2
 178:	03 c0       	rjmp	.+6      	; 0x180 <spi_init+0x30>
 17a:	8d b5       	in	r24, 0x2d	; 45
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	8d bd       	out	0x2d, r24	; 45
 180:	08 95       	ret
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	c1 f7       	brne	.-16     	; 0x176 <spi_init+0x26>
 186:	24 9a       	sbi	0x04, 4	; 4
 188:	23 98       	cbi	0x04, 3	; 4
 18a:	25 98       	cbi	0x04, 5	; 4
 18c:	22 98       	cbi	0x04, 2	; 4
 18e:	f3 cf       	rjmp	.-26     	; 0x176 <spi_init+0x26>

00000190 <spi_tranceive>:
 190:	0f 93       	push	r16
 192:	02 2f       	mov	r16, r18
 194:	9a 01       	movw	r18, r20
 196:	46 2f       	mov	r20, r22
 198:	bc 01       	movw	r22, r24
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	2c d0       	rcall	.+88     	; 0x1f8 <_spi_tranceive>
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <spi_install_hook>:

void spi_install_hook(spi_isr_hook_t hook)
{
    spi_state.hook = hook;
 1a4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_start+0xc>
 1a8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__data_start+0xb>
 1ac:	08 95       	ret

000001ae <__vector_15>:
}

ISR(SPI_STC_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
    _spi_isr(&spi_state);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	43 d0       	rcall	.+134    	; 0x25c <_spi_isr>
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state, const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
 1f8:	0f 93       	push	r16
 1fa:	fc 01       	movw	r30, r24
    if (state->running)
 1fc:	80 85       	ldd	r24, Z+8	; 0x08
 1fe:	81 fd       	sbrc	r24, 1
 200:	22 c0       	rjmp	.+68     	; 0x246 <_spi_tranceive+0x4e>
        //if (state->hook)
            //state->hook(state);
    //}
    //else
    {
        state->tran_buf = tran_buf;
 202:	71 83       	std	Z+1, r23	; 0x01
 204:	60 83       	st	Z, r22
        state->tran_len = tran_len;
 206:	44 83       	std	Z+4, r20	; 0x04
        state->recv_buf = recv_buf;
 208:	33 83       	std	Z+3, r19	; 0x03
 20a:	22 83       	std	Z+2, r18	; 0x02
        state->recv_len = recv_len;
 20c:	05 83       	std	Z+5, r16	; 0x05
        state->len = MIN(tran_len, recv_len);
 20e:	84 2f       	mov	r24, r20
 210:	04 17       	cp	r16, r20
 212:	80 f0       	brcs	.+32     	; 0x234 <_spi_tranceive+0x3c>
 214:	86 83       	std	Z+6, r24	; 0x06

        state->index = 0;
 216:	17 82       	std	Z+7, r1	; 0x07
        state->running = 1;
 218:	80 85       	ldd	r24, Z+8	; 0x08
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 87       	std	Z+8, r24	; 0x08
    
        if (tran_buf && tran_len > 0)
 21e:	61 15       	cp	r22, r1
 220:	71 05       	cpc	r23, r1
 222:	11 f0       	breq	.+4      	; 0x228 <_spi_tranceive+0x30>
 224:	41 11       	cpse	r20, r1
 226:	12 c0       	rjmp	.+36     	; 0x24c <_spi_tranceive+0x54>
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
        else if (state->mode == SPI_MASTER)
 228:	80 85       	ldd	r24, Z+8	; 0x08
 22a:	80 ff       	sbrs	r24, 0
 22c:	05 c0       	rjmp	.+10     	; 0x238 <_spi_tranceive+0x40>
            *state->spdr = 0xFF;
    }

    return SPI_OK;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
}   
 230:	0f 91       	pop	r16
 232:	08 95       	ret
    {
        state->tran_buf = tran_buf;
        state->tran_len = tran_len;
        state->recv_buf = recv_buf;
        state->recv_len = recv_len;
        state->len = MIN(tran_len, recv_len);
 234:	80 2f       	mov	r24, r16
 236:	ee cf       	rjmp	.-36     	; 0x214 <_spi_tranceive+0x1c>
        state->running = 1;
    
        if (tran_buf && tran_len > 0)
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
        else if (state->mode == SPI_MASTER)
            *state->spdr = 0xFF;
 238:	01 84       	ldd	r0, Z+9	; 0x09
 23a:	f2 85       	ldd	r31, Z+10	; 0x0a
 23c:	e0 2d       	mov	r30, r0
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	80 83       	st	Z, r24
    }

    return SPI_OK;
}   
 242:	0f 91       	pop	r16
 244:	08 95       	ret
#endif

int8_t _spi_tranceive(spi_state_t* state, const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
    if (state->running)
        return SPI_ALREADY_STARTED;
 246:	80 e0       	ldi	r24, 0x00	; 0
        else if (state->mode == SPI_MASTER)
            *state->spdr = 0xFF;
    }

    return SPI_OK;
}   
 248:	0f 91       	pop	r16
 24a:	08 95       	ret

        state->index = 0;
        state->running = 1;
    
        if (tran_buf && tran_len > 0)
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
 24c:	01 84       	ldd	r0, Z+9	; 0x09
 24e:	f2 85       	ldd	r31, Z+10	; 0x0a
 250:	e0 2d       	mov	r30, r0
 252:	db 01       	movw	r26, r22
 254:	8c 91       	ld	r24, X
 256:	80 83       	st	Z, r24
        else if (state->mode == SPI_MASTER)
            *state->spdr = 0xFF;
    }

    return SPI_OK;
 258:	8f ef       	ldi	r24, 0xFF	; 255

        state->index = 0;
        state->running = 1;
    
        if (tran_buf && tran_len > 0)
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
 25a:	ea cf       	rjmp	.-44     	; 0x230 <_spi_tranceive+0x38>

0000025c <_spi_isr>:

    return SPI_OK;
}   

void _spi_isr(spi_state_t* state)
{
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
    PORTA |= 1 << 3;
 262:	73 9a       	sbi	0x0e, 3	; 14
    if (!state->running)
 264:	fc 01       	movw	r30, r24
 266:	20 85       	ldd	r18, Z+8	; 0x08
 268:	21 ff       	sbrs	r18, 1
 26a:	21 c0       	rjmp	.+66     	; 0x2ae <_spi_isr+0x52>
 26c:	ec 01       	movw	r28, r24
        return;

    uint8_t recv = *state->spdr;               // read the received byte
 26e:	01 84       	ldd	r0, Z+9	; 0x09
 270:	f2 85       	ldd	r31, Z+10	; 0x0a
 272:	e0 2d       	mov	r30, r0
 274:	10 81       	ld	r17, Z

    if (++state->index >= state->len)       // completed
 276:	8f 81       	ldd	r24, Y+7	; 0x07
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	8f 83       	std	Y+7, r24	; 0x07
 27c:	9e 81       	ldd	r25, Y+6	; 0x06
 27e:	89 17       	cp	r24, r25
 280:	d0 f0       	brcs	.+52     	; 0x2b6 <_spi_isr+0x5a>
    {
        state->running = 0;
 282:	88 85       	ldd	r24, Y+8	; 0x08
 284:	8d 7f       	andi	r24, 0xFD	; 253
 286:	88 87       	std	Y+8, r24	; 0x08
            
        if (state->hook)
 288:	eb 85       	ldd	r30, Y+11	; 0x0b
 28a:	fc 85       	ldd	r31, Y+12	; 0x0c
 28c:	30 97       	sbiw	r30, 0x00	; 0
 28e:	11 f0       	breq	.+4      	; 0x294 <_spi_isr+0x38>
            state->hook(state);
 290:	ce 01       	movw	r24, r28
 292:	09 95       	icall
    {
        //_delay_us(5);
        *state->spdr = state->index < state->tran_len ? state->tran_buf[state->index] : 0xFF;    // transmit next byte
    }
        
    if (state->index < state->recv_len)
 294:	9f 81       	ldd	r25, Y+7	; 0x07
 296:	8d 81       	ldd	r24, Y+5	; 0x05
 298:	98 17       	cp	r25, r24
 29a:	40 f4       	brcc	.+16     	; 0x2ac <_spi_isr+0x50>
        state->recv_buf[state->index - 1] = recv;       // store the received byte
 29c:	ef 81       	ldd	r30, Y+7	; 0x07
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	9b 81       	ldd	r25, Y+3	; 0x03
 2a6:	e8 0f       	add	r30, r24
 2a8:	f9 1f       	adc	r31, r25
 2aa:	10 83       	st	Z, r17

    PORTA &= ~(1 << 3);
 2ac:	73 98       	cbi	0x0e, 3	; 14
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	08 95       	ret
            state->hook(state);
    }
    else
    {
        //_delay_us(5);
        *state->spdr = state->index < state->tran_len ? state->tran_buf[state->index] : 0xFF;    // transmit next byte
 2b6:	9f 81       	ldd	r25, Y+7	; 0x07
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	98 17       	cp	r25, r24
 2bc:	40 f4       	brcc	.+16     	; 0x2ce <_spi_isr+0x72>
 2be:	8f 81       	ldd	r24, Y+7	; 0x07
 2c0:	a8 81       	ld	r26, Y
 2c2:	b9 81       	ldd	r27, Y+1	; 0x01
 2c4:	a8 0f       	add	r26, r24
 2c6:	b1 1d       	adc	r27, r1
 2c8:	8c 91       	ld	r24, X
 2ca:	80 83       	st	Z, r24
 2cc:	e3 cf       	rjmp	.-58     	; 0x294 <_spi_isr+0x38>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	80 83       	st	Z, r24
 2d2:	e0 cf       	rjmp	.-64     	; 0x294 <_spi_isr+0x38>

000002d4 <spi_write.constprop.0>:
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 2d4:	40 98       	cbi	0x08, 0	; 8
 2d6:	fc 01       	movw	r30, r24
 2d8:	02 96       	adiw	r24, 0x02	; 2
    };

    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
 2da:	47 e0       	ldi	r20, 0x07	; 7
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	18 c0       	rjmp	.+48     	; 0x310 <__stack+0x11>
    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
                DATA_ASSERT();
 2e0:	71 9a       	sbi	0x0e, 1	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	a7 ec       	ldi	r26, 0xC7	; 199
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	11 97       	sbiw	r26, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <spi_write.constprop.0+0x12>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <spi_write.constprop.0+0x18>
 2ec:	00 00       	nop
            else
                DATA_DISABLE();

            _delay_us(100);
            SCK_ASSERT();
 2ee:	70 9a       	sbi	0x0e, 0	; 14
 2f0:	a7 ec       	ldi	r26, 0xC7	; 199
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <spi_write.constprop.0+0x20>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <spi_write.constprop.0+0x26>
 2fa:	00 00       	nop
            _delay_us(100);
            SCK_DISABLE();
 2fc:	70 98       	cbi	0x0e, 0	; 14
 2fe:	a7 ec       	ldi	r26, 0xC7	; 199
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	11 97       	sbiw	r26, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <__stack+0x3>
 306:	00 c0       	rjmp	.+0      	; 0x308 <__stack+0x9>
 308:	00 00       	nop
 30a:	41 50       	subi	r20, 0x01	; 1
 30c:	51 09       	sbc	r21, r1
 30e:	60 f0       	brcs	.+24     	; 0x328 <__stack+0x29>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 310:	20 81       	ld	r18, Z
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	04 2e       	mov	r0, r20
 316:	02 c0       	rjmp	.+4      	; 0x31c <__stack+0x1d>
 318:	35 95       	asr	r19
 31a:	27 95       	ror	r18
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <__stack+0x19>
 320:	20 fd       	sbrc	r18, 0
 322:	de cf       	rjmp	.-68     	; 0x2e0 <spi_write.constprop.0+0xc>
                DATA_ASSERT();
            else
                DATA_DISABLE();
 324:	71 98       	cbi	0x0e, 1	; 14
 326:	dd cf       	rjmp	.-70     	; 0x2e2 <spi_write.constprop.0+0xe>
 328:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 32a:	e8 17       	cp	r30, r24
 32c:	f9 07       	cpc	r31, r25
 32e:	a9 f6       	brne	.-86     	; 0x2da <spi_write.constprop.0+0x6>
            SCK_DISABLE();
            _delay_us(100);
        }
    }

    CS_DISABLE();
 330:	40 9a       	sbi	0x08, 0	; 8
 332:	08 95       	ret

00000334 <max7221_init>:
#define SCK_DISABLE()   (MAX7221_SCK_PORT   &= ~MAX7221_SCK_MASK)

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <max7221_init+0x6>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 33e:	38 9a       	sbi	0x07, 0	; 7
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 340:	68 9a       	sbi	0x0d, 0	; 13
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 342:	69 9a       	sbi	0x0d, 1	; 13

    CS_ASSERT();
 344:	40 98       	cbi	0x08, 0	; 8
    SCK_ASSERT();
 346:	70 9a       	sbi	0x0e, 0	; 14
    DATA_ASSERT();
 348:	71 9a       	sbi	0x0e, 1	; 14
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 34a:	8b e0       	ldi	r24, 0x0B	; 11
 34c:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	be df       	rcall	.-132    	; 0x2d4 <spi_write.constprop.0>
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 358:	1a 82       	std	Y+2, r1	; 0x02
 35a:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 35c:	89 e0       	ldi	r24, 0x09	; 9
 35e:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
 360:	ce 01       	movw	r24, r28
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	b7 df       	rcall	.-146    	; 0x2d4 <spi_write.constprop.0>
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	b0 df       	rcall	.-160    	; 0x2d4 <spi_write.constprop.0>
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 374:	8a e0       	ldi	r24, 0x0A	; 10
 376:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	a9 df       	rcall	.-174    	; 0x2d4 <spi_write.constprop.0>
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <completed>:
{
    state.running = 0;
}

static void completed(const uint8_t* buf, uint8_t len)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <completed+0x6>
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
    switch (state.status)
 396:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <state>
 39a:	23 70       	andi	r18, 0x03	; 3
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	21 30       	cpi	r18, 0x01	; 1
 3a0:	31 05       	cpc	r19, r1
 3a2:	b9 f1       	breq	.+110    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 3a4:	22 30       	cpi	r18, 0x02	; 2
 3a6:	31 05       	cpc	r19, r1
 3a8:	51 f1       	breq	.+84     	; 0x3fe <completed+0x72>
 3aa:	23 2b       	or	r18, r19
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <completed+0x2c>
            return;

        default:
            return;
    }
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret
    return crc;
}

static void handle_header(const uint8_t* buf, uint8_t len)
{
    volatile uint8_t packet_id = buf[0];
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 81       	ld	r18, Z
 3bc:	2a 83       	std	Y+2, r18	; 0x02
    volatile uint8_t packet_len = buf[1];
 3be:	81 81       	ldd	r24, Z+1	; 0x01
 3c0:	89 83       	std	Y+1, r24	; 0x01
    
    state.tranceive(state.transmit->payload, state.transmit->len, state.receive->payload, state.receive->len);
 3c2:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <state+0x3>
 3c6:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <state+0x4>
 3ca:	21 81       	ldd	r18, Z+1	; 0x01
 3cc:	42 81       	ldd	r20, Z+2	; 0x02
 3ce:	53 81       	ldd	r21, Z+3	; 0x03
 3d0:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <state+0x1>
 3d4:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <state+0x2>
 3d8:	61 81       	ldd	r22, Z+1	; 0x01
 3da:	82 81       	ldd	r24, Z+2	; 0x02
 3dc:	93 81       	ldd	r25, Z+3	; 0x03
 3de:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <state+0x5>
 3e2:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <state+0x6>
 3e6:	09 95       	icall
    
    state.status = PAYLOAD;
 3e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 3ec:	8c 7f       	andi	r24, 0xFC	; 252
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
            return;

        default:
            return;
    }
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret
    state.status = FOOTER;
}

static void handle_footer(const uint8_t* buf, uint8_t len)
{
    state.running = 0;
 3fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
            return;

        default:
            return;
    }
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret
    state.status = PAYLOAD;
}

static void handle_payload(const uint8_t* buf, uint8_t len)
{
    state.tranceive((uint8_t*)&state.transmit->crc, sizeof(uint16_t), (uint8_t*)&state.receive->crc, sizeof(uint16_t));
 412:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <state+0x3>
 416:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <state+0x4>
 41a:	4c 5f       	subi	r20, 0xFC	; 252
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state+0x1>
 422:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <state+0x2>
 426:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <state+0x5>
 42a:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <state+0x6>
 42e:	22 e0       	ldi	r18, 0x02	; 2
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	04 96       	adiw	r24, 0x04	; 4
 434:	09 95       	icall
    state.status = FOOTER;
 436:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 43a:	8c 7f       	andi	r24, 0xFC	; 252
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
            return;

        default:
            return;
    }
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <proto_init>:

state_t state;

void proto_init(completed_t* pcompleted, tranceive_t tranceive)
{
    *pcompleted = completed;
 44c:	26 ec       	ldi	r18, 0xC6	; 198
 44e:	31 e0       	ldi	r19, 0x01	; 1
 450:	fc 01       	movw	r30, r24
 452:	31 83       	std	Z+1, r19	; 0x01
 454:	20 83       	st	Z, r18
    state.tranceive = tranceive;
 456:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <state+0x6>
 45a:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <state+0x5>
 45e:	08 95       	ret

00000460 <proto_wait>:
}

void proto_wait(void)
{
    while (state.running) ;
 460:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 464:	82 fd       	sbrc	r24, 2
 466:	fc cf       	rjmp	.-8      	; 0x460 <proto_wait>
}
 468:	08 95       	ret

0000046a <proto_create>:

proto_packet_t proto_create(uint8_t id, const uint8_t* payload, uint8_t len)
{
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	00 d0       	rcall	.+0      	; 0x474 <proto_create+0xa>
 474:	00 d0       	rcall	.+0      	; 0x476 <proto_create+0xc>
 476:	00 d0       	rcall	.+0      	; 0x478 <proto_create+0xe>
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	34 2f       	mov	r19, r20
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 47e:	af ef       	ldi	r26, 0xFF	; 255
 480:	bf ef       	ldi	r27, 0xFF	; 255
 482:	a8 27       	eor	r26, r24
 484:	0a 2e       	mov	r0, r26
 486:	a2 95       	swap	r26
 488:	a0 7f       	andi	r26, 0xF0	; 240
 48a:	a0 25       	eor	r26, r0
 48c:	0b 2e       	mov	r0, r27
 48e:	ba 2f       	mov	r27, r26
 490:	a2 95       	swap	r26
 492:	af 70       	andi	r26, 0x0F	; 15
 494:	0a 26       	eor	r0, r26
 496:	a6 95       	lsr	r26
 498:	ba 27       	eor	r27, r26
 49a:	ab 27       	eor	r26, r27
 49c:	aa 0f       	add	r26, r26
 49e:	aa 0f       	add	r26, r26
 4a0:	aa 0f       	add	r26, r26
 4a2:	a0 25       	eor	r26, r0
 4a4:	a4 27       	eor	r26, r20
 4a6:	0a 2e       	mov	r0, r26
 4a8:	a2 95       	swap	r26
 4aa:	a0 7f       	andi	r26, 0xF0	; 240
 4ac:	a0 25       	eor	r26, r0
 4ae:	0b 2e       	mov	r0, r27
 4b0:	ba 2f       	mov	r27, r26
 4b2:	a2 95       	swap	r26
 4b4:	af 70       	andi	r26, 0x0F	; 15
 4b6:	0a 26       	eor	r0, r26
 4b8:	a6 95       	lsr	r26
 4ba:	ba 27       	eor	r27, r26
 4bc:	ab 27       	eor	r26, r27
 4be:	aa 0f       	add	r26, r26
 4c0:	aa 0f       	add	r26, r26
 4c2:	aa 0f       	add	r26, r26
 4c4:	a0 25       	eor	r26, r0
{
    uint16_t crc = 0xFFFF;
    crc = _crc_ccitt_update(crc, packet->id);
    crc = _crc_ccitt_update(crc, packet->len);

    for (uint8_t i = 0; i < packet->len; ++i)
 4c6:	44 23       	and	r20, r20
 4c8:	e9 f0       	breq	.+58     	; 0x504 <proto_create+0x9a>
 4ca:	fb 01       	movw	r30, r22
 4cc:	0f ef       	ldi	r16, 0xFF	; 255
 4ce:	04 0f       	add	r16, r20
 4d0:	10 e0       	ldi	r17, 0x00	; 0
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	06 0f       	add	r16, r22
 4d8:	17 1f       	adc	r17, r23
        crc = _crc_ccitt_update(crc, packet->payload[i]);
 4da:	91 91       	ld	r25, Z+
 4dc:	a9 27       	eor	r26, r25
 4de:	0a 2e       	mov	r0, r26
 4e0:	a2 95       	swap	r26
 4e2:	a0 7f       	andi	r26, 0xF0	; 240
 4e4:	a0 25       	eor	r26, r0
 4e6:	0b 2e       	mov	r0, r27
 4e8:	ba 2f       	mov	r27, r26
 4ea:	a2 95       	swap	r26
 4ec:	af 70       	andi	r26, 0x0F	; 15
 4ee:	0a 26       	eor	r0, r26
 4f0:	a6 95       	lsr	r26
 4f2:	ba 27       	eor	r27, r26
 4f4:	ab 27       	eor	r26, r27
 4f6:	aa 0f       	add	r26, r26
 4f8:	aa 0f       	add	r26, r26
 4fa:	aa 0f       	add	r26, r26
 4fc:	a0 25       	eor	r26, r0
{
    uint16_t crc = 0xFFFF;
    crc = _crc_ccitt_update(crc, packet->id);
    crc = _crc_ccitt_update(crc, packet->len);

    for (uint8_t i = 0; i < packet->len; ++i)
 4fe:	e0 17       	cp	r30, r16
 500:	f1 07       	cpc	r31, r17
 502:	59 f7       	brne	.-42     	; 0x4da <proto_create+0x70>
        .len = len,
        .payload = payload
    };

    packet.crc = calculate_crc(&packet);
    return packet;
 504:	7c 83       	std	Y+4, r23	; 0x04
 506:	6b 83       	std	Y+3, r22	; 0x03
 508:	be 83       	std	Y+6, r27	; 0x06
 50a:	ad 83       	std	Y+5, r26	; 0x05
 50c:	46 2f       	mov	r20, r22
 50e:	5c 81       	ldd	r21, Y+4	; 0x04
 510:	6a 2f       	mov	r22, r26
 512:	7e 81       	ldd	r23, Y+6	; 0x06
}
 514:	28 2f       	mov	r18, r24
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	26 96       	adiw	r28, 0x06	; 6
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	08 95       	ret

00000530 <proto_tranceive>:

void proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 530:	dc 01       	movw	r26, r24
    if (state.running)
 532:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <state>
 536:	92 fd       	sbrc	r25, 2
 538:	08 95       	ret
        return;

    // start by transmitting the header
    state.status = HEADER;
 53a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 53e:	8c 7f       	andi	r24, 0xFC	; 252
 540:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
    state.running = 1;
 544:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 548:	84 60       	ori	r24, 0x04	; 4
 54a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
    state.transmit = transmit;
 54e:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <state+0x2>
 552:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <state+0x1>
    state.receive = receive;
 556:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <state+0x4>
 55a:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <state+0x3>

    state.tranceive((uint8_t*)&state.transmit->id, PROTO_HEADER, (uint8_t*)state.receive, PROTO_HEADER);    
 55e:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <state+0x5>
 562:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <state+0x6>
 566:	22 e0       	ldi	r18, 0x02	; 2
 568:	ab 01       	movw	r20, r22
 56a:	62 e0       	ldi	r22, 0x02	; 2
 56c:	cd 01       	movw	r24, r26
 56e:	09 94       	ijmp

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
