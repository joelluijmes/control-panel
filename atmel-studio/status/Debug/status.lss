
status.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800124  00800124  00000970  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c62  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dab  00000000  00000000  000032e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cd  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f82  00000000  00000000  00004981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	59 c1       	rjmp	.+690    	; 0x2d2 <__vector_15>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e8 eb       	ldi	r30, 0xB8	; 184
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a4 32       	cpi	r26, 0x24	; 36
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a4 e2       	ldi	r26, 0x24	; 36
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	af 32       	cpi	r26, 0x2F	; 47
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	56 d0       	rcall	.+172    	; 0x108 <main>
  5c:	2b c4       	rjmp	.+2134   	; 0x8b4 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <display_update>:
    uint8_t val = *(uint8_t*)&mem;
    max7221_write(0, MAX7221_DIGIT1, val << 3);
}

void display_update(const status_display_t* const display)
{
  60:	cf 92       	push	r12
  62:	df 92       	push	r13
  64:	ef 92       	push	r14
  66:	ff 92       	push	r15
  68:	0f 93       	push	r16
  6a:	1f 93       	push	r17
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	8c 01       	movw	r16, r24
  72:	fc 01       	movw	r30, r24
  74:	c2 81       	ldd	r28, Z+2	; 0x02
  76:	c6 95       	lsr	r28
  78:	c6 95       	lsr	r28
  7a:	d3 81       	ldd	r29, Z+3	; 0x03
  7c:	8d 2f       	mov	r24, r29
  7e:	82 95       	swap	r24
  80:	88 0f       	add	r24, r24
  82:	88 0f       	add	r24, r24
  84:	80 7c       	andi	r24, 0xC0	; 192
  86:	c8 2b       	or	r28, r24
  88:	d6 95       	lsr	r29
  8a:	d6 95       	lsr	r29
#include "display.h"
#include "../../lib/max7221/max7221.h"

static inline void print_clock(clock_t clock)
{
    max7221_display(0, MAX7221_DIGIT3, clock.clock_speed%10);
  8c:	8a e0       	ldi	r24, 0x0A	; 10
  8e:	e8 2e       	mov	r14, r24
  90:	f1 2c       	mov	r15, r1
  92:	ce 01       	movw	r24, r28
  94:	b7 01       	movw	r22, r14
  96:	e7 d3       	rcall	.+1998   	; 0x866 <__divmodhi4>
  98:	6b 01       	movw	r12, r22
  9a:	48 2f       	mov	r20, r24
  9c:	64 e0       	ldi	r22, 0x04	; 4
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	33 d2       	rcall	.+1126   	; 0x508 <max7221_display>
    max7221_display(0, MAX7221_DIGIT2, (clock.clock_speed/10)%10);
  a2:	c6 01       	movw	r24, r12
  a4:	b7 01       	movw	r22, r14
  a6:	df d3       	rcall	.+1982   	; 0x866 <__divmodhi4>
  a8:	48 2f       	mov	r20, r24
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	2c d2       	rcall	.+1112   	; 0x508 <max7221_display>
    max7221_display(0, MAX7221_DIGIT4, (clock.clock_speed/100)%10);
  b0:	ce 01       	movw	r24, r28
  b2:	64 e6       	ldi	r22, 0x64	; 100
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	d7 d3       	rcall	.+1966   	; 0x866 <__divmodhi4>
  b8:	cb 01       	movw	r24, r22
  ba:	b7 01       	movw	r22, r14
  bc:	d4 d3       	rcall	.+1960   	; 0x866 <__divmodhi4>
  be:	48 2f       	mov	r20, r24
  c0:	65 e0       	ldi	r22, 0x05	; 5
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	21 d2       	rcall	.+1090   	; 0x508 <max7221_display>
    max7221_display(0, MAX7221_DIGIT0, (clock.clock_speed/1000)%10);
  c6:	ce 01       	movw	r24, r28
  c8:	68 ee       	ldi	r22, 0xE8	; 232
  ca:	73 e0       	ldi	r23, 0x03	; 3
  cc:	cc d3       	rcall	.+1944   	; 0x866 <__divmodhi4>
  ce:	cb 01       	movw	r24, r22
  d0:	b7 01       	movw	r22, r14
  d2:	c9 d3       	rcall	.+1938   	; 0x866 <__divmodhi4>
  d4:	48 2f       	mov	r20, r24
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	16 d2       	rcall	.+1068   	; 0x508 <max7221_display>
}

static inline void print_status(sreg_t sreg)
{
    uint8_t val = *(uint8_t*)&sreg;
    max7221_write(0, MAX7221_DIGIT5, val << 1);
  dc:	f8 01       	movw	r30, r16
  de:	40 81       	ld	r20, Z
  e0:	44 0f       	add	r20, r20
  e2:	66 e0       	ldi	r22, 0x06	; 6
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	f3 d1       	rcall	.+998    	; 0x4ce <max7221_write>
}

static inline void print_memory(memory_t mem)
{
    uint8_t val = *(uint8_t*)&mem;
    max7221_write(0, MAX7221_DIGIT1, val << 3);
  e8:	f8 01       	movw	r30, r16
  ea:	41 81       	ldd	r20, Z+1	; 0x01
  ec:	44 0f       	add	r20, r20
  ee:	44 0f       	add	r20, r20
  f0:	44 0f       	add	r20, r20
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	80 e0       	ldi	r24, 0x00	; 0
void display_update(const status_display_t* const display)
{
    print_clock(display->clock);
    print_status(display->status);
    print_memory(display->memory);
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
}

static inline void print_memory(memory_t mem)
{
    uint8_t val = *(uint8_t*)&mem;
    max7221_write(0, MAX7221_DIGIT1, val << 3);
 106:	e3 c1       	rjmp	.+966    	; 0x4ce <max7221_write>

00000108 <main>:
    else
        return MIDDLE;
}

int main(void)
{   
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	66 97       	sbiw	r28, 0x16	; 22
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
    // initialize the ADC with prescaler of 16x (ADC clock must < 1MHz)
    ADMUX = 1 << REFS0;
 11c:	80 e4       	ldi	r24, 0x40	; 64
 11e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    ADCSRA = 1 << ADEN | 1 << ADPS2;
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    // enable the internal pull-ups for the rotary encoder (default DDR is input)
    ROT1_PORT |= ROT1_MASK;
 128:	2e 9a       	sbi	0x05, 6	; 5
    ROT2_PORT |= ROT2_MASK;
 12a:	5d 9a       	sbi	0x0b, 5	; 11
    ROT4_PORT |= ROT4_MASK;
 12c:	2f 9a       	sbi	0x05, 7	; 5
    ROT8_PORT |= ROT8_MASK;
 12e:	5e 9a       	sbi	0x0b, 6	; 11

    // initialize display driver
    max7221_init();
 130:	a2 d1       	rcall	.+836    	; 0x476 <max7221_init>

    // placeholders
    status_state_t state = { 0 };
 132:	1b 8a       	std	Y+19, r1	; 0x13
 134:	1c 8a       	std	Y+20, r1	; 0x14
 136:	1d 8a       	std	Y+21, r1	; 0x15
    status_display_t display = { 0 };
 138:	1f 86       	std	Y+15, r1	; 0x0f
 13a:	18 8a       	std	Y+16, r1	; 0x10
 13c:	19 8a       	std	Y+17, r1	; 0x11
 13e:	1a 8a       	std	Y+18, r1	; 0x12

    // initialize the SPI, note that the slave is nonblocking for the first byte, meaning
    // that continues until the interrupt is called. The rest of the SPI transmission is
    // blocking.
    spi_init(SPI_SLAVE | SPI_NONBLOCKING, SPI_64X);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	86 d0       	rcall	.+268    	; 0x252 <spi_init>
    proto_init(spi_tranceive, &spi_state.on_completed);
 146:	6f e0       	ldi	r22, 0x0F	; 15
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	e3 d2       	rcall	.+1478   	; 0x716 <proto_init>
    sei();
 150:	78 94       	sei
    #define ROT1_SAMPLE() (((ROT1_PIN & ROT1_MASK) == 0) << 0)
    #define ROT2_SAMPLE() (((ROT2_PIN & ROT2_MASK) == 0) << 1)
    #define ROT4_SAMPLE() (((ROT4_PIN & ROT4_MASK) == 0) << 2)
    #define ROT8_SAMPLE() (((ROT8_PIN & ROT8_MASK) == 0) << 3)

    return ROT1_SAMPLE() | ROT2_SAMPLE() | ROT4_SAMPLE() | ROT8_SAMPLE();
 152:	11 e0       	ldi	r17, 0x01	; 1
#include <avr/interrupt.h>

static uint16_t read_adc(uint8_t mux)
{
    // the board has a potmeter and tumble switch, therefor use this nice function to read the ADC  
    ADMUX = (ADMUX & 0xF0) | mux;
 154:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    // start the conversion
    ADCSRA |= 1 << ADSC;            
 160:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    // wait for completion
    while (ADCSRA & (1 << ADSC)) ;
 16a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 16e:	86 fd       	sbrc	r24, 6
 170:	fc cf       	rjmp	.-8      	; 0x16a <main+0x62>
    return ADC;
 172:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 176:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    sei();

    while (1)
    {
        // do the user processing of the interface
        state.clock.clock_speed = read_adc(POT_ADC);
 17a:	38 2f       	mov	r19, r24
 17c:	33 0f       	add	r19, r19
 17e:	33 0f       	add	r19, r19
 180:	2b 89       	ldd	r18, Y+19	; 0x13
 182:	23 70       	andi	r18, 0x03	; 3
 184:	23 2b       	or	r18, r19
 186:	2b 8b       	std	Y+19, r18	; 0x13
 188:	99 0f       	add	r25, r25
 18a:	99 0f       	add	r25, r25
 18c:	82 95       	swap	r24
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	83 70       	andi	r24, 0x03	; 3
 194:	89 2b       	or	r24, r25
 196:	8c 8b       	std	Y+20, r24	; 0x14
    #define ROT1_SAMPLE() (((ROT1_PIN & ROT1_MASK) == 0) << 0)
    #define ROT2_SAMPLE() (((ROT2_PIN & ROT2_MASK) == 0) << 1)
    #define ROT4_SAMPLE() (((ROT4_PIN & ROT4_MASK) == 0) << 2)
    #define ROT8_SAMPLE() (((ROT8_PIN & ROT8_MASK) == 0) << 3)

    return ROT1_SAMPLE() | ROT2_SAMPLE() | ROT4_SAMPLE() | ROT8_SAMPLE();
 198:	83 b1       	in	r24, 0x03	; 3
 19a:	86 fb       	bst	r24, 6
 19c:	88 27       	eor	r24, r24
 19e:	80 f9       	bld	r24, 0
 1a0:	81 27       	eor	r24, r17
 1a2:	4d 9b       	sbis	0x09, 5	; 9
 1a4:	44 c0       	rjmp	.+136    	; 0x22e <main+0x126>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	28 2b       	or	r18, r24
 1aa:	93 b1       	in	r25, 0x03	; 3
 1ac:	90 95       	com	r25
 1ae:	89 2f       	mov	r24, r25
 1b0:	88 1f       	adc	r24, r24
 1b2:	88 27       	eor	r24, r24
 1b4:	88 1f       	adc	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	82 2b       	or	r24, r18
 1bc:	4e 9b       	sbis	0x09, 6	; 9
 1be:	39 c0       	rjmp	.+114    	; 0x232 <main+0x12a>
 1c0:	90 e0       	ldi	r25, 0x00	; 0

    while (1)
    {
        // do the user processing of the interface
        state.clock.clock_speed = read_adc(POT_ADC);
        state.selected = read_rot();
 1c2:	89 2b       	or	r24, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	9d 89       	ldd	r25, Y+21	; 0x15
 1c8:	91 7e       	andi	r25, 0xE1	; 225
 1ca:	89 2b       	or	r24, r25
 1cc:	8d 8b       	std	Y+21, r24	; 0x15

        // if we are not tranceiving we are updating the packet to be tranceived.
        // if we are tranceiving, but the SS is high the transmission has been corrupt and has to be reset
        volatile proto_status_t status = proto_status();
 1ce:	aa d2       	rcall	.+1364   	; 0x724 <proto_status>
 1d0:	8e 8b       	std	Y+22, r24	; 0x16
        if (status == IDLE || status == FAILED || (SS_PIN & SS_MASK))
 1d2:	8e 89       	ldd	r24, Y+22	; 0x16
 1d4:	88 23       	and	r24, r24
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <main+0xda>
 1d8:	8e 89       	ldd	r24, Y+22	; 0x16
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <main+0xda>
 1de:	1a 9b       	sbis	0x03, 2	; 3
 1e0:	b9 cf       	rjmp	.-142    	; 0x154 <main+0x4c>
        {
            if (status == IDLE)
 1e2:	8e 89       	ldd	r24, Y+22	; 0x16
 1e4:	88 23       	and	r24, r24
 1e6:	39 f1       	breq	.+78     	; 0x236 <main+0x12e>
                display_update(&display);

            // debug
            if (status == FAILED)
 1e8:	8e 89       	ldd	r24, Y+22	; 0x16
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	51 f1       	breq	.+84     	; 0x242 <main+0x13a>
                __asm("nop");

            // create the packets
            proto_packet_t transmit = proto_create(10, (uint8_t*)&state, sizeof(state));
 1ee:	43 e0       	ldi	r20, 0x03	; 3
 1f0:	be 01       	movw	r22, r28
 1f2:	6d 5e       	subi	r22, 0xED	; 237
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	99 d2       	rcall	.+1330   	; 0x72c <proto_create>
 1fa:	28 87       	std	Y+8, r18	; 0x08
 1fc:	39 87       	std	Y+9, r19	; 0x09
 1fe:	4a 87       	std	Y+10, r20	; 0x0a
 200:	5b 87       	std	Y+11, r21	; 0x0b
 202:	6c 87       	std	Y+12, r22	; 0x0c
 204:	7d 87       	std	Y+13, r23	; 0x0d
 206:	8e 87       	std	Y+14, r24	; 0x0e
            proto_packet_t receive = proto_create_empty((uint8_t*)&display, sizeof(display));
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	ce 01       	movw	r24, r28
 20c:	0f 96       	adiw	r24, 0x0f	; 15
 20e:	e1 d2       	rcall	.+1474   	; 0x7d2 <proto_create_empty>
 210:	29 83       	std	Y+1, r18	; 0x01
 212:	3a 83       	std	Y+2, r19	; 0x02
 214:	4b 83       	std	Y+3, r20	; 0x03
 216:	5c 83       	std	Y+4, r21	; 0x04
 218:	6d 83       	std	Y+5, r22	; 0x05
 21a:	7e 83       	std	Y+6, r23	; 0x06
 21c:	8f 83       	std	Y+7, r24	; 0x07

            // make sure the SPI hardware is in a valid state
            spi_reset();
 21e:	3b d0       	rcall	.+118    	; 0x296 <spi_reset>
            // set the packets to be tranceived
            proto_tranceive(&transmit, &receive);
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	ce 01       	movw	r24, r28
 228:	08 96       	adiw	r24, 0x08	; 8
 22a:	ff d2       	rcall	.+1534   	; 0x82a <proto_tranceive>
 22c:	93 cf       	rjmp	.-218    	; 0x154 <main+0x4c>
    #define ROT1_SAMPLE() (((ROT1_PIN & ROT1_MASK) == 0) << 0)
    #define ROT2_SAMPLE() (((ROT2_PIN & ROT2_MASK) == 0) << 1)
    #define ROT4_SAMPLE() (((ROT4_PIN & ROT4_MASK) == 0) << 2)
    #define ROT8_SAMPLE() (((ROT8_PIN & ROT8_MASK) == 0) << 3)

    return ROT1_SAMPLE() | ROT2_SAMPLE() | ROT4_SAMPLE() | ROT8_SAMPLE();
 22e:	22 e0       	ldi	r18, 0x02	; 2
 230:	bb cf       	rjmp	.-138    	; 0x1a8 <main+0xa0>
 232:	98 e0       	ldi	r25, 0x08	; 8
 234:	c6 cf       	rjmp	.-116    	; 0x1c2 <main+0xba>
        // if we are tranceiving, but the SS is high the transmission has been corrupt and has to be reset
        volatile proto_status_t status = proto_status();
        if (status == IDLE || status == FAILED || (SS_PIN & SS_MASK))
        {
            if (status == IDLE)
                display_update(&display);
 236:	ce 01       	movw	r24, r28
 238:	0f 96       	adiw	r24, 0x0f	; 15
 23a:	12 df       	rcall	.-476    	; 0x60 <display_update>

            // debug
            if (status == FAILED)
 23c:	8e 89       	ldd	r24, Y+22	; 0x16
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	b1 f6       	brne	.-84     	; 0x1ee <main+0xe6>
                __asm("nop");
 242:	00 00       	nop
 244:	d4 cf       	rjmp	.-88     	; 0x1ee <main+0xe6>

00000246 <spi_tranceive_byte>:
    spi_state.tran_buf = tran_buf;
    spi_state.tran_len = tran_len;
    spi_state.recv_buf = recv_buf;
    spi_state.recv_len = recv_len;

    return _spi_tranceive(&spi_state);
 246:	8e bd       	out	0x2e, r24	; 46
 248:	0d b4       	in	r0, 0x2d	; 45
 24a:	07 fe       	sbrs	r0, 7
 24c:	fd cf       	rjmp	.-6      	; 0x248 <spi_tranceive_byte+0x2>
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	08 95       	ret

00000252 <spi_init>:
 252:	28 2f       	mov	r18, r24
 254:	23 70       	andi	r18, 0x03	; 3
 256:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
 25a:	9c 7f       	andi	r25, 0xFC	; 252
 25c:	92 2b       	or	r25, r18
 25e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_start+0x8>
 262:	96 2f       	mov	r25, r22
 264:	93 70       	andi	r25, 0x03	; 3
 266:	90 64       	ori	r25, 0x40	; 64
 268:	9c bd       	out	0x2c, r25	; 44
 26a:	81 11       	cpse	r24, r1
 26c:	0d c0       	rjmp	.+26     	; 0x288 <spi_init+0x36>
 26e:	24 98       	cbi	0x04, 4	; 4
 270:	23 9a       	sbi	0x04, 3	; 4
 272:	25 9a       	sbi	0x04, 5	; 4
 274:	22 9a       	sbi	0x04, 2	; 4
 276:	8c b5       	in	r24, 0x2c	; 44
 278:	80 61       	ori	r24, 0x10	; 16
 27a:	8c bd       	out	0x2c, r24	; 44
 27c:	62 ff       	sbrs	r22, 2
 27e:	03 c0       	rjmp	.+6      	; 0x286 <spi_init+0x34>
 280:	8d b5       	in	r24, 0x2d	; 45
 282:	81 60       	ori	r24, 0x01	; 1
 284:	8d bd       	out	0x2d, r24	; 45
 286:	08 95       	ret
 288:	80 ff       	sbrs	r24, 0
 28a:	f8 cf       	rjmp	.-16     	; 0x27c <spi_init+0x2a>
 28c:	24 9a       	sbi	0x04, 4	; 4
 28e:	23 98       	cbi	0x04, 3	; 4
 290:	25 98       	cbi	0x04, 5	; 4
 292:	22 98       	cbi	0x04, 2	; 4
 294:	f3 cf       	rjmp	.-26     	; 0x27c <spi_init+0x2a>

00000296 <spi_reset>:
 296:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_start+0x8>
 29a:	83 70       	andi	r24, 0x03	; 3
 29c:	41 f0       	breq	.+16     	; 0x2ae <spi_reset+0x18>
 29e:	8c b5       	in	r24, 0x2c	; 44
 2a0:	83 70       	andi	r24, 0x03	; 3
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	8c bd       	out	0x2c, r24	; 44
 2a6:	8e b5       	in	r24, 0x2e	; 46
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	8e bd       	out	0x2e, r24	; 46
 2ac:	08 95       	ret
 2ae:	8c b5       	in	r24, 0x2c	; 44
 2b0:	83 70       	andi	r24, 0x03	; 3
 2b2:	80 65       	ori	r24, 0x50	; 80
 2b4:	8c bd       	out	0x2c, r24	; 44
 2b6:	8e b5       	in	r24, 0x2e	; 46
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8e bd       	out	0x2e, r24	; 46
 2bc:	08 95       	ret

000002be <spi_tranceive>:
 2be:	e0 e0       	ldi	r30, 0x00	; 0
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	91 83       	std	Z+1, r25	; 0x01
 2c4:	80 83       	st	Z, r24
 2c6:	64 83       	std	Z+4, r22	; 0x04
 2c8:	53 83       	std	Z+3, r21	; 0x03
 2ca:	42 83       	std	Z+2, r20	; 0x02
 2cc:	25 83       	std	Z+5, r18	; 0x05
 2ce:	cf 01       	movw	r24, r30
 2d0:	25 c0       	rjmp	.+74     	; 0x31c <_spi_tranceive>

000002d2 <__vector_15>:
    
    return SPDR;
}

ISR(SPI_STC_vect)
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
    _spi_isr(&spi_state);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	7f d0       	rcall	.+254    	; 0x3f8 <_spi_isr>
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <_spi_tranceive>:
    #error 'Unsupported device'
#endif


int8_t _spi_tranceive(spi_state_t* state)
{
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	fc 01       	movw	r30, r24
    uint8_t tran_len = state->tran_len;
 332:	a4 80       	ldd	r10, Z+4	; 0x04
    uint8_t* tran_buf = state->tran_buf;
 334:	e0 80       	ld	r14, Z
 336:	f1 80       	ldd	r15, Z+1	; 0x01
    uint8_t recv_len = state->recv_len;
 338:	d5 81       	ldd	r29, Z+5	; 0x05
    uint8_t* recv_buf = state->recv_buf;
 33a:	c2 80       	ldd	r12, Z+2	; 0x02
 33c:	d3 80       	ldd	r13, Z+3	; 0x03

    uint8_t len = MAX(tran_len, recv_len);
 33e:	bd 2e       	mov	r11, r29
 340:	da 15       	cp	r29, r10
 342:	08 f4       	brcc	.+2      	; 0x346 <_spi_tranceive+0x2a>
 344:	ba 2c       	mov	r11, r10
    if (!len)
 346:	bb 20       	and	r11, r11
 348:	39 f1       	breq	.+78     	; 0x398 <_spi_tranceive+0x7c>
 34a:	8f 01       	movw	r16, r30
        return SPI_OK;

    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 34c:	80 85       	ldd	r24, Z+8	; 0x08
 34e:	83 70       	andi	r24, 0x03	; 3
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	71 f1       	breq	.+92     	; 0x3b0 <_spi_tranceive+0x94>

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;

    uint8_t i = 0;
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	13 c0       	rjmp	.+38     	; 0x37e <_spi_tranceive+0x62>
        ++i;
    }
	
	for (; i < len; ++i)
	{
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 358:	f7 01       	movw	r30, r14
 35a:	ec 0f       	add	r30, r28
 35c:	f1 1d       	adc	r31, r1
 35e:	80 81       	ld	r24, Z
	    uint8_t recv = state->tranceive_byte(tran);	
 360:	d8 01       	movw	r26, r16
 362:	51 96       	adiw	r26, 0x11	; 17
 364:	ed 91       	ld	r30, X+
 366:	fc 91       	ld	r31, X
 368:	52 97       	sbiw	r26, 0x12	; 18
 36a:	09 95       	icall
		
		if (i < recv_len)
 36c:	cd 17       	cp	r28, r29
 36e:	20 f4       	brcc	.+8      	; 0x378 <_spi_tranceive+0x5c>
		    recv_buf[i] = recv;
 370:	f6 01       	movw	r30, r12
 372:	ec 0f       	add	r30, r28
 374:	f1 1d       	adc	r31, r1
 376:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 378:	cf 5f       	subi	r28, 0xFF	; 255
 37a:	cb 15       	cp	r28, r11
 37c:	21 f0       	breq	.+8      	; 0x386 <_spi_tranceive+0x6a>
	{
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 37e:	ca 15       	cp	r28, r10
 380:	58 f3       	brcs	.-42     	; 0x358 <_spi_tranceive+0x3c>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	ed cf       	rjmp	.-38     	; 0x360 <_spi_tranceive+0x44>
		
		if (i < recv_len)
		    recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 386:	d8 01       	movw	r26, r16
 388:	1f 96       	adiw	r26, 0x0f	; 15
 38a:	ed 91       	ld	r30, X+
 38c:	fc 91       	ld	r31, X
 38e:	50 97       	sbiw	r26, 0x10	; 16
 390:	30 97       	sbiw	r30, 0x00	; 0
 392:	11 f0       	breq	.+4      	; 0x398 <_spi_tranceive+0x7c>
        state->on_completed(state);
 394:	c8 01       	movw	r24, r16
 396:	09 95       	icall

    return SPI_OK;
 398:	80 e0       	ldi	r24, 0x00	; 0
}   
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	08 95       	ret

    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
    {
        if ((!(*state->spcr & (1 << SPIF))))
 3b0:	05 84       	ldd	r0, Z+13	; 0x0d
 3b2:	f6 85       	ldd	r31, Z+14	; 0x0e
 3b4:	e0 2d       	mov	r30, r0
 3b6:	80 81       	ld	r24, Z
 3b8:	87 ff       	sbrs	r24, 7
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <_spi_tranceive+0xb0>
            *state->spcr |= 1 << SPIF;

            return SPI_PENDING;
        }

        *state->spcr &= ~(1 << SPIF);
 3bc:	80 81       	ld	r24, Z
 3be:	8f 77       	andi	r24, 0x7F	; 127
 3c0:	80 83       	st	Z, r24
        ++i;
    }
	
	for (; i < len; ++i)
 3c2:	b1 e0       	ldi	r27, 0x01	; 1
 3c4:	bb 15       	cp	r27, r11
 3c6:	f8 f6       	brcc	.-66     	; 0x386 <_spi_tranceive+0x6a>

            return SPI_PENDING;
        }

        *state->spcr &= ~(1 << SPIF);
        ++i;
 3c8:	c1 e0       	ldi	r28, 0x01	; 1
 3ca:	d9 cf       	rjmp	.-78     	; 0x37e <_spi_tranceive+0x62>
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
    {
        if ((!(*state->spcr & (1 << SPIF))))
        {
            *state->spdr = tran_len ? tran_buf[0] : 0xFF;
 3cc:	d8 01       	movw	r26, r16
 3ce:	19 96       	adiw	r26, 0x09	; 9
 3d0:	ed 91       	ld	r30, X+
 3d2:	fc 91       	ld	r31, X
 3d4:	1a 97       	sbiw	r26, 0x0a	; 10
 3d6:	aa 20       	and	r10, r10
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <_spi_tranceive+0xd8>
 3da:	d7 01       	movw	r26, r14
 3dc:	8c 91       	ld	r24, X
 3de:	80 83       	st	Z, r24
            *state->spcr |= 1 << SPIF;
 3e0:	d8 01       	movw	r26, r16
 3e2:	1d 96       	adiw	r26, 0x0d	; 13
 3e4:	ed 91       	ld	r30, X+
 3e6:	fc 91       	ld	r31, X
 3e8:	1e 97       	sbiw	r26, 0x0e	; 14
 3ea:	80 81       	ld	r24, Z
 3ec:	80 68       	ori	r24, 0x80	; 128
 3ee:	80 83       	st	Z, r24

            return SPI_PENDING;
 3f0:	8e ef       	ldi	r24, 0xFE	; 254
 3f2:	d3 cf       	rjmp	.-90     	; 0x39a <_spi_tranceive+0x7e>
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
    {
        if ((!(*state->spcr & (1 << SPIF))))
        {
            *state->spdr = tran_len ? tran_buf[0] : 0xFF;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	f3 cf       	rjmp	.-26     	; 0x3de <_spi_tranceive+0xc2>

000003f8 <_spi_isr>:

    return SPI_OK;
}   

void _spi_isr(spi_state_t* state)
{  
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
    if (state->recv_len)
 3fc:	dc 01       	movw	r26, r24
 3fe:	15 96       	adiw	r26, 0x05	; 5
 400:	2c 91       	ld	r18, X
 402:	15 97       	sbiw	r26, 0x05	; 5
 404:	22 23       	and	r18, r18
 406:	51 f0       	breq	.+20     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
        state->recv_buf[0] = *state->spdr;
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	ed 91       	ld	r30, X+
 40c:	fc 91       	ld	r31, X
 40e:	13 97       	sbiw	r26, 0x03	; 3
 410:	19 96       	adiw	r26, 0x09	; 9
 412:	0d 90       	ld	r0, X+
 414:	bc 91       	ld	r27, X
 416:	a0 2d       	mov	r26, r0
 418:	2c 91       	ld	r18, X
 41a:	20 83       	st	Z, r18

    _spi_tranceive(state);
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
void _spi_isr(spi_state_t* state)
{  
    if (state->recv_len)
        state->recv_buf[0] = *state->spdr;

    _spi_tranceive(state);
 420:	7d cf       	rjmp	.-262    	; 0x31c <_spi_tranceive>

00000422 <spi_write.constprop.0>:
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 422:	40 98       	cbi	0x08, 0	; 8
 424:	fc 01       	movw	r30, r24
 426:	02 96       	adiw	r24, 0x02	; 2
    };

    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
 428:	47 e0       	ldi	r20, 0x07	; 7
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	12 c0       	rjmp	.+36     	; 0x452 <spi_write.constprop.0+0x30>
    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
                DATA_ASSERT();
 42e:	71 9a       	sbi	0x0e, 1	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	2d e0       	ldi	r18, 0x0D	; 13
 432:	2a 95       	dec	r18
 434:	f1 f7       	brne	.-4      	; 0x432 <spi_write.constprop.0+0x10>
 436:	00 00       	nop
            else
                DATA_DISABLE();

            _delay_us(5);
            SCK_ASSERT();
 438:	70 9a       	sbi	0x0e, 0	; 14
 43a:	2d e0       	ldi	r18, 0x0D	; 13
 43c:	2a 95       	dec	r18
 43e:	f1 f7       	brne	.-4      	; 0x43c <spi_write.constprop.0+0x1a>
 440:	00 00       	nop
            _delay_us(5);
            SCK_DISABLE();
 442:	70 98       	cbi	0x0e, 0	; 14
 444:	2d e0       	ldi	r18, 0x0D	; 13
 446:	2a 95       	dec	r18
 448:	f1 f7       	brne	.-4      	; 0x446 <spi_write.constprop.0+0x24>
 44a:	00 00       	nop
 44c:	41 50       	subi	r20, 0x01	; 1
 44e:	51 09       	sbc	r21, r1
 450:	60 f0       	brcs	.+24     	; 0x46a <spi_write.constprop.0+0x48>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 452:	20 81       	ld	r18, Z
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	04 2e       	mov	r0, r20
 458:	02 c0       	rjmp	.+4      	; 0x45e <spi_write.constprop.0+0x3c>
 45a:	35 95       	asr	r19
 45c:	27 95       	ror	r18
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <spi_write.constprop.0+0x38>
 462:	20 fd       	sbrc	r18, 0
 464:	e4 cf       	rjmp	.-56     	; 0x42e <spi_write.constprop.0+0xc>
                DATA_ASSERT();
            else
                DATA_DISABLE();
 466:	71 98       	cbi	0x0e, 1	; 14
 468:	e3 cf       	rjmp	.-58     	; 0x430 <spi_write.constprop.0+0xe>
 46a:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 46c:	e8 17       	cp	r30, r24
 46e:	f9 07       	cpc	r31, r25
 470:	d9 f6       	brne	.-74     	; 0x428 <spi_write.constprop.0+0x6>
            SCK_DISABLE();
            _delay_us(5);
        }
    }

    CS_DISABLE();
 472:	40 9a       	sbi	0x08, 0	; 8
 474:	08 95       	ret

00000476 <max7221_init>:
#define SCK_DISABLE()   (MAX7221_SCK_PORT   &= ~MAX7221_SCK_MASK)

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 d0       	rcall	.+0      	; 0x47c <max7221_init+0x6>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 480:	38 9a       	sbi	0x07, 0	; 7
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 482:	68 9a       	sbi	0x0d, 0	; 13
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 484:	69 9a       	sbi	0x0d, 1	; 13

    CS_ASSERT();
 486:	40 98       	cbi	0x08, 0	; 8
    SCK_ASSERT();
 488:	70 9a       	sbi	0x0e, 0	; 14
    DATA_ASSERT();
 48a:	71 9a       	sbi	0x0e, 1	; 14
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 48c:	8b e0       	ldi	r24, 0x0B	; 11
 48e:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 490:	87 e0       	ldi	r24, 0x07	; 7
 492:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	c4 df       	rcall	.-120    	; 0x422 <spi_write.constprop.0>
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 49a:	1a 82       	std	Y+2, r1	; 0x02
 49c:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	bd df       	rcall	.-134    	; 0x422 <spi_write.constprop.0>
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 4b0:	ce 01       	movw	r24, r28
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	b6 df       	rcall	.-148    	; 0x422 <spi_write.constprop.0>
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 4b6:	8a e0       	ldi	r24, 0x0A	; 10
 4b8:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 4ba:	88 e0       	ldi	r24, 0x08	; 8
 4bc:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 4be:	ce 01       	movw	r24, r28
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	af df       	rcall	.-162    	; 0x422 <spi_write.constprop.0>
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <max7221_write>:

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <max7221_write+0x6>
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 4d8:	1a 82       	std	Y+2, r1	; 0x02
 4da:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	e1 e0       	ldi	r30, 0x01	; 1
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ec 0f       	add	r30, r28
 4e8:	fd 1f       	adc	r31, r29
 4ea:	e8 0f       	add	r30, r24
 4ec:	f9 1f       	adc	r31, r25
 4ee:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 4f0:	fe 01       	movw	r30, r28
 4f2:	e8 0f       	add	r30, r24
 4f4:	f9 1f       	adc	r31, r25
 4f6:	42 83       	std	Z+2, r20	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 4f8:	ce 01       	movw	r24, r28
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	92 df       	rcall	.-220    	; 0x422 <spi_write.constprop.0>
}
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <max7221_display>:

void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	00 d0       	rcall	.+0      	; 0x50e <max7221_display+0x6>
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
    if (c >= '0' && c <= '9')
 512:	90 ed       	ldi	r25, 0xD0	; 208
 514:	94 0f       	add	r25, r20
 516:	9a 30       	cpi	r25, 0x0A	; 10
 518:	58 f1       	brcs	.+86     	; 0x570 <max7221_display+0x68>
        c -= '0';
    else if (c >= 'a' && c <= 'z')
 51a:	9f e9       	ldi	r25, 0x9F	; 159
 51c:	94 0f       	add	r25, r20
 51e:	9a 31       	cpi	r25, 0x1A	; 26
 520:	48 f0       	brcs	.+18     	; 0x534 <max7221_display+0x2c>
        c -= 'a' - 10;
    else if (c >= 'A' && c <= 'Z')
 522:	9f eb       	ldi	r25, 0xBF	; 191
 524:	94 0f       	add	r25, r20
 526:	9a 31       	cpi	r25, 0x1A	; 26
 528:	48 f1       	brcs	.+82     	; 0x57c <max7221_display+0x74>
        c -= 'A' - 10;
    else if (c > 0x0F)
 52a:	40 31       	cpi	r20, 0x10	; 16
 52c:	20 f1       	brcs	.+72     	; 0x576 <max7221_display+0x6e>
 52e:	e0 e0       	ldi	r30, 0x00	; 0
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	03 c0       	rjmp	.+6      	; 0x53a <max7221_display+0x32>
void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
    if (c >= '0' && c <= '9')
        c -= '0';
    else if (c >= 'a' && c <= 'z')
        c -= 'a' - 10;
 534:	e9 ea       	ldi	r30, 0xA9	; 169
 536:	e4 0f       	add	r30, r20
 538:	f0 e0       	ldi	r31, 0x00	; 0
    {
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
 53a:	ed 5e       	subi	r30, 0xED	; 237
 53c:	fe 4f       	sbci	r31, 0xFE	; 254
 53e:	20 81       	ld	r18, Z
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 540:	1a 82       	std	Y+2, r1	; 0x02
 542:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	e1 e0       	ldi	r30, 0x01	; 1
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	ec 0f       	add	r30, r28
 550:	fd 1f       	adc	r31, r29
 552:	e8 0f       	add	r30, r24
 554:	f9 1f       	adc	r31, r25
 556:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 558:	fe 01       	movw	r30, r28
 55a:	e8 0f       	add	r30, r24
 55c:	f9 1f       	adc	r31, r25
 55e:	22 83       	std	Z+2, r18	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	5e df       	rcall	.-324    	; 0x422 <spi_write.constprop.0>
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
}
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret
 570:	e9 2f       	mov	r30, r25
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	e2 cf       	rjmp	.-60     	; 0x53a <max7221_display+0x32>
 576:	e4 2f       	mov	r30, r20
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	df cf       	rjmp	.-66     	; 0x53a <max7221_display+0x32>
    if (c >= '0' && c <= '9')
        c -= '0';
    else if (c >= 'a' && c <= 'z')
        c -= 'a' - 10;
    else if (c >= 'A' && c <= 'Z')
        c -= 'A' - 10;
 57c:	e9 ec       	ldi	r30, 0xC9	; 201
 57e:	e4 0f       	add	r30, r20
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	db cf       	rjmp	.-74     	; 0x53a <max7221_display+0x32>

00000584 <calculate_crc>:
}

int8_t proto_completed()
{
    return state.status == IDLE;
}
 584:	fc 01       	movw	r30, r24
 586:	80 81       	ld	r24, Z
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	3f ef       	ldi	r19, 0xFF	; 255
 58c:	28 27       	eor	r18, r24
 58e:	02 2e       	mov	r0, r18
 590:	22 95       	swap	r18
 592:	20 7f       	andi	r18, 0xF0	; 240
 594:	20 25       	eor	r18, r0
 596:	03 2e       	mov	r0, r19
 598:	32 2f       	mov	r19, r18
 59a:	22 95       	swap	r18
 59c:	2f 70       	andi	r18, 0x0F	; 15
 59e:	02 26       	eor	r0, r18
 5a0:	26 95       	lsr	r18
 5a2:	32 27       	eor	r19, r18
 5a4:	23 27       	eor	r18, r19
 5a6:	22 0f       	add	r18, r18
 5a8:	22 0f       	add	r18, r18
 5aa:	22 0f       	add	r18, r18
 5ac:	20 25       	eor	r18, r0
 5ae:	41 81       	ldd	r20, Z+1	; 0x01
 5b0:	c9 01       	movw	r24, r18
 5b2:	84 27       	eor	r24, r20
 5b4:	08 2e       	mov	r0, r24
 5b6:	82 95       	swap	r24
 5b8:	80 7f       	andi	r24, 0xF0	; 240
 5ba:	80 25       	eor	r24, r0
 5bc:	09 2e       	mov	r0, r25
 5be:	98 2f       	mov	r25, r24
 5c0:	82 95       	swap	r24
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	08 26       	eor	r0, r24
 5c6:	86 95       	lsr	r24
 5c8:	98 27       	eor	r25, r24
 5ca:	89 27       	eor	r24, r25
 5cc:	88 0f       	add	r24, r24
 5ce:	88 0f       	add	r24, r24
 5d0:	88 0f       	add	r24, r24
 5d2:	80 25       	eor	r24, r0
 5d4:	44 23       	and	r20, r20
 5d6:	f9 f0       	breq	.+62     	; 0x616 <calculate_crc+0x92>
 5d8:	02 80       	ldd	r0, Z+2	; 0x02
 5da:	f3 81       	ldd	r31, Z+3	; 0x03
 5dc:	e0 2d       	mov	r30, r0
 5de:	41 50       	subi	r20, 0x01	; 1
 5e0:	24 2f       	mov	r18, r20
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	2f 5f       	subi	r18, 0xFF	; 255
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	2e 0f       	add	r18, r30
 5ea:	3f 1f       	adc	r19, r31
 5ec:	41 91       	ld	r20, Z+
 5ee:	84 27       	eor	r24, r20
 5f0:	08 2e       	mov	r0, r24
 5f2:	82 95       	swap	r24
 5f4:	80 7f       	andi	r24, 0xF0	; 240
 5f6:	80 25       	eor	r24, r0
 5f8:	09 2e       	mov	r0, r25
 5fa:	98 2f       	mov	r25, r24
 5fc:	82 95       	swap	r24
 5fe:	8f 70       	andi	r24, 0x0F	; 15
 600:	08 26       	eor	r0, r24
 602:	86 95       	lsr	r24
 604:	98 27       	eor	r25, r24
 606:	89 27       	eor	r24, r25
 608:	88 0f       	add	r24, r24
 60a:	88 0f       	add	r24, r24
 60c:	88 0f       	add	r24, r24
 60e:	80 25       	eor	r24, r0
 610:	e2 17       	cp	r30, r18
 612:	f3 07       	cpc	r31, r19
 614:	59 f7       	brne	.-42     	; 0x5ec <calculate_crc+0x68>
 616:	08 95       	ret

00000618 <completed>:
 618:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <__data_end+0x3>
 61c:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <__data_end+0x4>
 620:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <__data_end+0x5>
 624:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <__data_end+0x6>
 628:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
 62c:	29 2f       	mov	r18, r25
 62e:	27 70       	andi	r18, 0x07	; 7
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	23 30       	cpi	r18, 0x03	; 3
 634:	31 05       	cpc	r19, r1
 636:	09 f4       	brne	.+2      	; 0x63a <completed+0x22>
 638:	56 c0       	rjmp	.+172    	; 0x6e6 <completed+0xce>
 63a:	94 f1       	brlt	.+100    	; 0x6a0 <completed+0x88>
 63c:	24 30       	cpi	r18, 0x04	; 4
 63e:	31 05       	cpc	r19, r1
 640:	c1 f0       	breq	.+48     	; 0x672 <completed+0x5a>
 642:	25 30       	cpi	r18, 0x05	; 5
 644:	31 05       	cpc	r19, r1
 646:	09 f0       	breq	.+2      	; 0x64a <completed+0x32>
 648:	65 c0       	rjmp	.+202    	; 0x714 <completed+0xfc>
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <__data_end+0x1>
 650:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <__data_end+0x2>
 654:	14 96       	adiw	r26, 0x04	; 4
 656:	2d 91       	ld	r18, X+
 658:	3c 91       	ld	r19, X
 65a:	15 97       	sbiw	r26, 0x05	; 5
 65c:	42 17       	cp	r20, r18
 65e:	53 07       	cpc	r21, r19
 660:	09 f4       	brne	.+2      	; 0x664 <completed+0x4c>
 662:	55 c0       	rjmp	.+170    	; 0x70e <completed+0xf6>
 664:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
 668:	98 7f       	andi	r25, 0xF8	; 248
 66a:	89 2b       	or	r24, r25
 66c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 670:	08 95       	ret
 672:	00 00       	nop
 674:	cf 01       	movw	r24, r30
 676:	86 df       	rcall	.-244    	; 0x584 <calculate_crc>
 678:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <__data_end+0x2>
 67c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__data_end+0x1>
 680:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 684:	88 7f       	andi	r24, 0xF8	; 248
 686:	85 60       	ori	r24, 0x05	; 5
 688:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 68c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__data_end+0x7>
 690:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <__data_end+0x8>
 694:	22 e0       	ldi	r18, 0x02	; 2
 696:	45 e2       	ldi	r20, 0x25	; 37
 698:	51 e0       	ldi	r21, 0x01	; 1
 69a:	62 e0       	ldi	r22, 0x02	; 2
 69c:	ca 01       	movw	r24, r20
 69e:	09 94       	ijmp
 6a0:	22 30       	cpi	r18, 0x02	; 2
 6a2:	31 05       	cpc	r19, r1
 6a4:	b1 f5       	brne	.+108    	; 0x712 <completed+0xfa>
 6a6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <__data_end+0x1>
 6aa:	80 83       	st	Z, r24
 6ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end+0x2>
 6b0:	21 81       	ldd	r18, Z+1	; 0x01
 6b2:	28 17       	cp	r18, r24
 6b4:	40 f1       	brcs	.+80     	; 0x706 <completed+0xee>
 6b6:	82 17       	cp	r24, r18
 6b8:	10 f4       	brcc	.+4      	; 0x6be <completed+0xa6>
 6ba:	81 83       	std	Z+1, r24	; 0x01
 6bc:	28 2f       	mov	r18, r24
 6be:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 6c2:	88 7f       	andi	r24, 0xF8	; 248
 6c4:	83 60       	ori	r24, 0x03	; 3
 6c6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 6ca:	42 81       	ldd	r20, Z+2	; 0x02
 6cc:	53 81       	ldd	r21, Z+3	; 0x03
 6ce:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__data_end+0x7>
 6d2:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <__data_end+0x8>
 6d6:	11 96       	adiw	r26, 0x01	; 1
 6d8:	6c 91       	ld	r22, X
 6da:	11 97       	sbiw	r26, 0x01	; 1
 6dc:	12 96       	adiw	r26, 0x02	; 2
 6de:	8d 91       	ld	r24, X+
 6e0:	9c 91       	ld	r25, X
 6e2:	13 97       	sbiw	r26, 0x03	; 3
 6e4:	09 94       	ijmp
 6e6:	98 7f       	andi	r25, 0xF8	; 248
 6e8:	94 60       	ori	r25, 0x04	; 4
 6ea:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__data_end>
 6ee:	af 01       	movw	r20, r30
 6f0:	4c 5f       	subi	r20, 0xFC	; 252
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__data_end+0x7>
 6f8:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <__data_end+0x8>
 6fc:	22 e0       	ldi	r18, 0x02	; 2
 6fe:	62 e0       	ldi	r22, 0x02	; 2
 700:	cd 01       	movw	r24, r26
 702:	04 96       	adiw	r24, 0x04	; 4
 704:	09 94       	ijmp
 706:	86 81       	ldd	r24, Z+6	; 0x06
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	86 83       	std	Z+6, r24	; 0x06
 70c:	d8 cf       	rjmp	.-80     	; 0x6be <completed+0xa6>
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	a9 cf       	rjmp	.-174    	; 0x664 <completed+0x4c>
 712:	08 95       	ret
 714:	08 95       	ret

00000716 <proto_init>:
 716:	e4 e2       	ldi	r30, 0x24	; 36
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	90 87       	std	Z+8, r25	; 0x08
 71c:	87 83       	std	Z+7, r24	; 0x07
 71e:	72 87       	std	Z+10, r23	; 0x0a
 720:	61 87       	std	Z+9, r22	; 0x09
 722:	08 95       	ret

00000724 <proto_status>:

proto_status_t proto_status()
{
    return state.status;
 724:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
}
 728:	87 70       	andi	r24, 0x07	; 7
 72a:	08 95       	ret

0000072c <proto_create>:

proto_packet_t proto_create(uint8_t id, const uint8_t* payload, uint8_t len)
{
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	6c 97       	sbiw	r28, 0x1c	; 28
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
    return packet;
}

proto_packet_t proto_create_empty(const uint8_t* payload, uint8_t len)
{
    proto_packet_t packet =
 740:	9e 01       	movw	r18, r28
 742:	28 5f       	subi	r18, 0xF8	; 248
 744:	3f 4f       	sbci	r19, 0xFF	; 255
 746:	97 e0       	ldi	r25, 0x07	; 7
 748:	f9 01       	movw	r30, r18
 74a:	11 92       	st	Z+, r1
 74c:	9a 95       	dec	r25
 74e:	e9 f7       	brne	.-6      	; 0x74a <proto_create+0x1e>
    {
        .len = len,
        .payload = (uint8_t*)payload
    };

    return packet;
 750:	49 87       	std	Y+9, r20	; 0x09
 752:	7b 87       	std	Y+11, r23	; 0x0b
 754:	6a 87       	std	Y+10, r22	; 0x0a
 756:	97 e0       	ldi	r25, 0x07	; 7
 758:	f9 01       	movw	r30, r18
 75a:	de 01       	movw	r26, r28
 75c:	11 96       	adiw	r26, 0x01	; 1
 75e:	01 90       	ld	r0, Z+
 760:	0d 92       	st	X+, r0
 762:	9a 95       	dec	r25
 764:	e1 f7       	brne	.-8      	; 0x75e <proto_create+0x32>
 766:	4a 83       	std	Y+2, r20	; 0x02
 768:	7c 83       	std	Y+4, r23	; 0x04
 76a:	6b 83       	std	Y+3, r22	; 0x03
 76c:	97 e0       	ldi	r25, 0x07	; 7
 76e:	fe 01       	movw	r30, r28
 770:	31 96       	adiw	r30, 0x01	; 1
 772:	d9 01       	movw	r26, r18
 774:	01 90       	ld	r0, Z+
 776:	0d 92       	st	X+, r0
 778:	9a 95       	dec	r25
 77a:	e1 f7       	brne	.-8      	; 0x774 <proto_create+0x48>
    return state.status;
}

proto_packet_t proto_create(uint8_t id, const uint8_t* payload, uint8_t len)
{
    proto_packet_t packet = proto_create_empty(payload, len);
 77c:	49 87       	std	Y+9, r20	; 0x09
 77e:	7b 87       	std	Y+11, r23	; 0x0b
 780:	6a 87       	std	Y+10, r22	; 0x0a
 782:	97 e0       	ldi	r25, 0x07	; 7
 784:	f9 01       	movw	r30, r18
 786:	de 01       	movw	r26, r28
 788:	56 96       	adiw	r26, 0x16	; 22
 78a:	01 90       	ld	r0, Z+
 78c:	0d 92       	st	X+, r0
 78e:	9a 95       	dec	r25
 790:	e1 f7       	brne	.-8      	; 0x78a <proto_create+0x5e>
    packet.id = id;
 792:	8e 8b       	std	Y+22, r24	; 0x16
    packet.crc = calculate_crc(&packet);
 794:	ce 01       	movw	r24, r28
 796:	46 96       	adiw	r24, 0x16	; 22
 798:	f5 de       	rcall	.-534    	; 0x584 <calculate_crc>
 79a:	9b 8f       	std	Y+27, r25	; 0x1b
 79c:	8a 8f       	std	Y+26, r24	; 0x1a

    return packet;
 79e:	87 e0       	ldi	r24, 0x07	; 7
 7a0:	fe 01       	movw	r30, r28
 7a2:	76 96       	adiw	r30, 0x16	; 22
 7a4:	de 01       	movw	r26, r28
 7a6:	1f 96       	adiw	r26, 0x0f	; 15
 7a8:	01 90       	ld	r0, Z+
 7aa:	0d 92       	st	X+, r0
 7ac:	8a 95       	dec	r24
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <proto_create+0x7c>
 7b0:	2f 85       	ldd	r18, Y+15	; 0x0f
 7b2:	38 89       	ldd	r19, Y+16	; 0x10
 7b4:	49 89       	ldd	r20, Y+17	; 0x11
 7b6:	5a 89       	ldd	r21, Y+18	; 0x12
 7b8:	6b 89       	ldd	r22, Y+19	; 0x13
 7ba:	7c 89       	ldd	r23, Y+20	; 0x14
}
 7bc:	8d 89       	ldd	r24, Y+21	; 0x15
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	6c 96       	adiw	r28, 0x1c	; 28
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	f8 94       	cli
 7c6:	de bf       	out	0x3e, r29	; 62
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	cd bf       	out	0x3d, r28	; 61
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <proto_create_empty>:

proto_packet_t proto_create_empty(const uint8_t* payload, uint8_t len)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	2e 97       	sbiw	r28, 0x0e	; 14
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
    proto_packet_t packet =
 7e6:	fe 01       	movw	r30, r28
 7e8:	38 96       	adiw	r30, 0x08	; 8
 7ea:	27 e0       	ldi	r18, 0x07	; 7
 7ec:	df 01       	movw	r26, r30
 7ee:	1d 92       	st	X+, r1
 7f0:	2a 95       	dec	r18
 7f2:	e9 f7       	brne	.-6      	; 0x7ee <proto_create_empty+0x1c>
    {
        .len = len,
        .payload = (uint8_t*)payload
    };

    return packet;
 7f4:	69 87       	std	Y+9, r22	; 0x09
 7f6:	9b 87       	std	Y+11, r25	; 0x0b
 7f8:	8a 87       	std	Y+10, r24	; 0x0a
 7fa:	87 e0       	ldi	r24, 0x07	; 7
 7fc:	de 01       	movw	r26, r28
 7fe:	11 96       	adiw	r26, 0x01	; 1
 800:	01 90       	ld	r0, Z+
 802:	0d 92       	st	X+, r0
 804:	8a 95       	dec	r24
 806:	e1 f7       	brne	.-8      	; 0x800 <proto_create_empty+0x2e>
 808:	29 81       	ldd	r18, Y+1	; 0x01
 80a:	3a 81       	ldd	r19, Y+2	; 0x02
 80c:	4b 81       	ldd	r20, Y+3	; 0x03
 80e:	5c 81       	ldd	r21, Y+4	; 0x04
 810:	6d 81       	ldd	r22, Y+5	; 0x05
 812:	7e 81       	ldd	r23, Y+6	; 0x06
}
 814:	8f 81       	ldd	r24, Y+7	; 0x07
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	2e 96       	adiw	r28, 0x0e	; 14
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	f8 94       	cli
 81e:	de bf       	out	0x3e, r29	; 62
 820:	0f be       	out	0x3f, r0	; 63
 822:	cd bf       	out	0x3d, r28	; 61
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	08 95       	ret

0000082a <proto_tranceive>:
        }
    }
}

int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	dc 01       	movw	r26, r24
	//if (state.status != IDLE)
	    //return PROTO_BUSY;

    *state.on_completed = completed;
 830:	e4 e2       	ldi	r30, 0x24	; 36
 832:	f1 e0       	ldi	r31, 0x01	; 1
 834:	c1 85       	ldd	r28, Z+9	; 0x09
 836:	d2 85       	ldd	r29, Z+10	; 0x0a
 838:	8c e0       	ldi	r24, 0x0C	; 12
 83a:	93 e0       	ldi	r25, 0x03	; 3
 83c:	99 83       	std	Y+1, r25	; 0x01
 83e:	88 83       	st	Y, r24
    state.transmit = transmit;
 840:	b4 83       	std	Z+4, r27	; 0x04
 842:	a3 83       	std	Z+3, r26	; 0x03
    state.receive = receive;
 844:	76 83       	std	Z+6, r23	; 0x06
 846:	65 83       	std	Z+5, r22	; 0x05

    state.status = HEADER;
 848:	90 81       	ld	r25, Z
 84a:	98 7f       	andi	r25, 0xF8	; 248
 84c:	92 60       	ori	r25, 0x02	; 2
 84e:	90 83       	st	Z, r25
    return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 850:	07 80       	ldd	r0, Z+7	; 0x07
 852:	f0 85       	ldd	r31, Z+8	; 0x08
 854:	e0 2d       	mov	r30, r0
 856:	22 e0       	ldi	r18, 0x02	; 2
 858:	45 e2       	ldi	r20, 0x25	; 37
 85a:	51 e0       	ldi	r21, 0x01	; 1
 85c:	62 e0       	ldi	r22, 0x02	; 2
 85e:	cd 01       	movw	r24, r26
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
    *state.on_completed = completed;
    state.transmit = transmit;
    state.receive = receive;

    state.status = HEADER;
    return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 864:	09 94       	ijmp

00000866 <__divmodhi4>:
 866:	97 fb       	bst	r25, 7
 868:	07 2e       	mov	r0, r23
 86a:	16 f4       	brtc	.+4      	; 0x870 <__divmodhi4+0xa>
 86c:	00 94       	com	r0
 86e:	06 d0       	rcall	.+12     	; 0x87c <__divmodhi4_neg1>
 870:	77 fd       	sbrc	r23, 7
 872:	08 d0       	rcall	.+16     	; 0x884 <__divmodhi4_neg2>
 874:	0b d0       	rcall	.+22     	; 0x88c <__udivmodhi4>
 876:	07 fc       	sbrc	r0, 7
 878:	05 d0       	rcall	.+10     	; 0x884 <__divmodhi4_neg2>
 87a:	3e f4       	brtc	.+14     	; 0x88a <__divmodhi4_exit>

0000087c <__divmodhi4_neg1>:
 87c:	90 95       	com	r25
 87e:	81 95       	neg	r24
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <__divmodhi4_neg2>:
 884:	70 95       	com	r23
 886:	61 95       	neg	r22
 888:	7f 4f       	sbci	r23, 0xFF	; 255

0000088a <__divmodhi4_exit>:
 88a:	08 95       	ret

0000088c <__udivmodhi4>:
 88c:	aa 1b       	sub	r26, r26
 88e:	bb 1b       	sub	r27, r27
 890:	51 e1       	ldi	r21, 0x11	; 17
 892:	07 c0       	rjmp	.+14     	; 0x8a2 <__udivmodhi4_ep>

00000894 <__udivmodhi4_loop>:
 894:	aa 1f       	adc	r26, r26
 896:	bb 1f       	adc	r27, r27
 898:	a6 17       	cp	r26, r22
 89a:	b7 07       	cpc	r27, r23
 89c:	10 f0       	brcs	.+4      	; 0x8a2 <__udivmodhi4_ep>
 89e:	a6 1b       	sub	r26, r22
 8a0:	b7 0b       	sbc	r27, r23

000008a2 <__udivmodhi4_ep>:
 8a2:	88 1f       	adc	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	5a 95       	dec	r21
 8a8:	a9 f7       	brne	.-22     	; 0x894 <__udivmodhi4_loop>
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	bc 01       	movw	r22, r24
 8b0:	cd 01       	movw	r24, r26
 8b2:	08 95       	ret

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
