
status.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000094c  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800124  00800124  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf0  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba4  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e66  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  000041c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7a  00000000  00000000  00004a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000058e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	9a c1       	rjmp	.+820    	; 0x354 <__vector_15>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ec e4       	ldi	r30, 0x4C	; 76
  3c:	f9 e0       	ldi	r31, 0x09	; 9
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a4 32       	cpi	r26, 0x24	; 36
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a4 e2       	ldi	r26, 0x24	; 36
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ae 33       	cpi	r26, 0x3E	; 62
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	5c d0       	rcall	.+184    	; 0x114 <main>
  5c:	75 c4       	rjmp	.+2282   	; 0x948 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <display_update>:
    uint8_t val = *(uint8_t*)&mem;
    max7221_write(0, MAX7221_DIGIT1, val << 3);
}

void display_update(const status_display_t* const display)
{
  60:	cf 92       	push	r12
  62:	df 92       	push	r13
  64:	ef 92       	push	r14
  66:	ff 92       	push	r15
  68:	0f 93       	push	r16
  6a:	1f 93       	push	r17
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	8c 01       	movw	r16, r24
  72:	fc 01       	movw	r30, r24
  74:	c2 81       	ldd	r28, Z+2	; 0x02
  76:	c6 95       	lsr	r28
  78:	c6 95       	lsr	r28
  7a:	d3 81       	ldd	r29, Z+3	; 0x03
  7c:	8d 2f       	mov	r24, r29
  7e:	82 95       	swap	r24
  80:	88 0f       	add	r24, r24
  82:	88 0f       	add	r24, r24
  84:	80 7c       	andi	r24, 0xC0	; 192
  86:	c8 2b       	or	r28, r24
  88:	d6 95       	lsr	r29
  8a:	d6 95       	lsr	r29
#include "display.h"
#include "../../lib/max7221/max7221.h"

static inline void print_clock(clock_t clock)
{
    max7221_display(0, MAX7221_DIGIT3, clock.clock_speed%10);
  8c:	8a e0       	ldi	r24, 0x0A	; 10
  8e:	e8 2e       	mov	r14, r24
  90:	f1 2c       	mov	r15, r1
  92:	ce 01       	movw	r24, r28
  94:	b7 01       	movw	r22, r14
  96:	31 d4       	rcall	.+2146   	; 0x8fa <__divmodhi4>
  98:	6b 01       	movw	r12, r22
  9a:	48 2f       	mov	r20, r24
  9c:	64 e0       	ldi	r22, 0x04	; 4
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	73 d2       	rcall	.+1254   	; 0x588 <max7221_display>
    max7221_display(0, MAX7221_DIGIT2, (clock.clock_speed/10)%10);
  a2:	c6 01       	movw	r24, r12
  a4:	b7 01       	movw	r22, r14
  a6:	29 d4       	rcall	.+2130   	; 0x8fa <__divmodhi4>
  a8:	48 2f       	mov	r20, r24
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	6c d2       	rcall	.+1240   	; 0x588 <max7221_display>
    max7221_display(0, MAX7221_DIGIT4, (clock.clock_speed/100)%10);
  b0:	ce 01       	movw	r24, r28
  b2:	64 e6       	ldi	r22, 0x64	; 100
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	21 d4       	rcall	.+2114   	; 0x8fa <__divmodhi4>
  b8:	cb 01       	movw	r24, r22
  ba:	b7 01       	movw	r22, r14
  bc:	1e d4       	rcall	.+2108   	; 0x8fa <__divmodhi4>
  be:	48 2f       	mov	r20, r24
  c0:	65 e0       	ldi	r22, 0x05	; 5
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	61 d2       	rcall	.+1218   	; 0x588 <max7221_display>
    max7221_display(0, MAX7221_DIGIT0, (clock.clock_speed/1000)%10);
  c6:	ce 01       	movw	r24, r28
  c8:	68 ee       	ldi	r22, 0xE8	; 232
  ca:	73 e0       	ldi	r23, 0x03	; 3
  cc:	16 d4       	rcall	.+2092   	; 0x8fa <__divmodhi4>
  ce:	cb 01       	movw	r24, r22
  d0:	b7 01       	movw	r22, r14
  d2:	13 d4       	rcall	.+2086   	; 0x8fa <__divmodhi4>
  d4:	48 2f       	mov	r20, r24
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	56 d2       	rcall	.+1196   	; 0x588 <max7221_display>
}

static inline void print_status(sreg_t sreg)
{
    uint8_t val = *(uint8_t*)&sreg;
    max7221_write(0, MAX7221_DIGIT5, val << 1);
  dc:	f8 01       	movw	r30, r16
  de:	40 81       	ld	r20, Z
  e0:	44 0f       	add	r20, r20
  e2:	66 e0       	ldi	r22, 0x06	; 6
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	33 d2       	rcall	.+1126   	; 0x54e <max7221_write>
  e8:	f8 01       	movw	r30, r16
  ea:	41 81       	ldd	r20, Z+1	; 0x01
}

static inline void print_memory(memory_t mem)
{
    mem.enable = (*(uint8_t*)&mem) != 0;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	41 11       	cpse	r20, r1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <display_update+0x94>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	80 fb       	bst	r24, 0
  f6:	43 f9       	bld	r20, 3

    uint8_t val = *(uint8_t*)&mem;
    max7221_write(0, MAX7221_DIGIT1, val << 3);
  f8:	44 0f       	add	r20, r20
  fa:	44 0f       	add	r20, r20
  fc:	44 0f       	add	r20, r20
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	80 e0       	ldi	r24, 0x00	; 0
void display_update(const status_display_t* const display)
{
    print_clock(display->clock);
    print_status(display->status);
    print_memory(display->memory);
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	ff 90       	pop	r15
 10c:	ef 90       	pop	r14
 10e:	df 90       	pop	r13
 110:	cf 90       	pop	r12
static inline void print_memory(memory_t mem)
{
    mem.enable = (*(uint8_t*)&mem) != 0;

    uint8_t val = *(uint8_t*)&mem;
    max7221_write(0, MAX7221_DIGIT1, val << 3);
 112:	1d c2       	rjmp	.+1082   	; 0x54e <max7221_write>

00000114 <main>:
    else
        return MIDDLE;
}

int main(void)
{   
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	2e 97       	sbiw	r28, 0x0e	; 14
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
    // make sure WDT is disabled after a reset
    MCUSR &= ~(1 << WDRF);
 128:	84 b7       	in	r24, 0x34	; 52
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1 << WDCE) | (1 << WDE);
 12e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 132:	88 61       	ori	r24, 0x18	; 24
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    WDTCSR = 0x00;
 138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    
    // wdt_enable(WDTO_30MS);

    // initialize the ADC with prescaler of 16x (ADC clock must < 1MHz)
    ADMUX = 1 << REFS0;
 13c:	80 e4       	ldi	r24, 0x40	; 64
 13e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    ADCSRA = 1 << ADEN | 1 << ADPS2;
 142:	84 e8       	ldi	r24, 0x84	; 132
 144:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    // enable the internal pull-ups for the rotary encoder (default DDR is input)
    ROT1_PORT |= ROT1_MASK;
 148:	2e 9a       	sbi	0x05, 6	; 5
    ROT2_PORT |= ROT2_MASK;
 14a:	5d 9a       	sbi	0x0b, 5	; 11
    ROT4_PORT |= ROT4_MASK;
 14c:	2f 9a       	sbi	0x05, 7	; 5
    ROT8_PORT |= ROT8_MASK;
 14e:	5e 9a       	sbi	0x0b, 6	; 11

    // initialize display driver
    max7221_init();
 150:	c0 d1       	rcall	.+896    	; 0x4d2 <max7221_init>

    // initialize the SPI, note that the slave is nonblocking for the first byte, meaning
    // that continues until the interrupt is called. The rest of the SPI transmission is
    // blocking.
    spi_init(SPI_SLAVE | SPI_NONBLOCKING, SPI_64X);
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	d1 d0       	rcall	.+418    	; 0x2fa <spi_init>
    proto_init(spi_tranceive, &spi_state.on_completed);
 158:	6f e0       	ldi	r22, 0x0F	; 15
 15a:	71 e0       	ldi	r23, 0x01	; 1
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	4d d3       	rcall	.+1690   	; 0x7fc <proto_init>
    sei();
 162:	78 94       	sei
    // placeholders
    static status_state_t state, tmp_state;
    static status_display_t display, tmp_display;
    static proto_status_t status;

    uint8_t updated = 0;
 164:	10 e0       	ldi	r17, 0x00	; 0
{
    // ADC returns 0 - 1023: > 750 it is in UP; < 250 is DOWN; 250 - 750 is MIDDLE
    uint16_t val = read_adc(CLOCK_ADC);
    if (val > 750)
        return UP;
    else if (val < 250)
 166:	01 e0       	ldi	r16, 0x01	; 1
    static proto_status_t status;

    uint8_t updated = 0;
    while (1)
    {
        status = proto_status();
 168:	50 d3       	rcall	.+1696   	; 0x80a <proto_status>
 16a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <status.1930>

        // while the transmission hasn't completed, process user interaction
        while (status != IDLE && status != FAILED)
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	08 f4       	brcc	.+2      	; 0x174 <main+0x60>
 172:	6a c0       	rjmp	.+212    	; 0x248 <main+0x134>
        {
            wdt_reset();
 174:	a8 95       	wdr

            // received valid packet to display
            if (updated)
 176:	11 11       	cpse	r17, r1
 178:	b4 c0       	rjmp	.+360    	; 0x2e2 <main+0x1ce>


static uint16_t read_adc(uint8_t mux)
{
    // the board has a potmeter and tumble switch, therefor use this nice function to read the ADC  
    ADMUX = (ADMUX & 0xF0) | mux;
 17a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    // start the conversion
    ADCSRA |= 1 << ADSC;            
 186:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    // wait for completion
    while (ADCSRA & (1 << ADSC)) ;
 190:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 194:	86 fd       	sbrc	r24, 6
 196:	fc cf       	rjmp	.-8      	; 0x190 <main+0x7c>
    return ADC;
 198:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 19c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
            // received valid packet to display
            if (updated)
                display_update(&display);

            // do the user processing of the interface
            state.clock.clock_speed = read_adc(POT_ADC);
 1a0:	38 2f       	mov	r19, r24
 1a2:	33 0f       	add	r19, r19
 1a4:	33 0f       	add	r19, r19
 1a6:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <state.1926>
 1aa:	23 70       	andi	r18, 0x03	; 3
 1ac:	23 2b       	or	r18, r19
 1ae:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <state.1926>
 1b2:	99 0f       	add	r25, r25
 1b4:	99 0f       	add	r25, r25
 1b6:	82 95       	swap	r24
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	83 70       	andi	r24, 0x03	; 3
 1be:	89 2b       	or	r24, r25
 1c0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state.1926+0x1>


static uint16_t read_adc(uint8_t mux)
{
    // the board has a potmeter and tumble switch, therefor use this nice function to read the ADC  
    ADMUX = (ADMUX & 0xF0) | mux;
 1c4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	83 60       	ori	r24, 0x03	; 3
 1cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    // start the conversion
    ADCSRA |= 1 << ADSC;            
 1d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    // wait for completion
    while (ADCSRA & (1 << ADSC)) ;
 1da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 1de:	86 fd       	sbrc	r24, 6
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <main+0xc6>
    return ADC;
 1e2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 1e6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>

static uint8_t read_switch()
{
    // ADC returns 0 - 1023: > 750 it is in UP; < 250 is DOWN; 250 - 750 is MIDDLE
    uint16_t val = read_adc(CLOCK_ADC);
    if (val > 750)
 1ea:	2f 3e       	cpi	r18, 0xEF	; 239
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	38 07       	cpc	r19, r24
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <main+0xe0>
 1f2:	70 c0       	rjmp	.+224    	; 0x2d4 <main+0x1c0>
 1f4:	82 e0       	ldi	r24, 0x02	; 2
            if (updated)
                display_update(&display);

            // do the user processing of the interface
            state.clock.clock_speed = read_adc(POT_ADC);
            state.clock.clock_mode = read_switch();
 1f6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state.1926>
 1fa:	9c 7f       	andi	r25, 0xFC	; 252
 1fc:	89 2b       	or	r24, r25
 1fe:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <state.1926>
    #define ROT1_SAMPLE() (((ROT1_PIN & ROT1_MASK) == 0) << 0)
    #define ROT2_SAMPLE() (((ROT2_PIN & ROT2_MASK) == 0) << 1)
    #define ROT4_SAMPLE() (((ROT4_PIN & ROT4_MASK) == 0) << 2)
    #define ROT8_SAMPLE() (((ROT8_PIN & ROT8_MASK) == 0) << 3)

    return ROT1_SAMPLE() | ROT2_SAMPLE() | ROT4_SAMPLE() | ROT8_SAMPLE();
 202:	83 b1       	in	r24, 0x03	; 3
 204:	86 fb       	bst	r24, 6
 206:	88 27       	eor	r24, r24
 208:	80 f9       	bld	r24, 0
 20a:	80 27       	eor	r24, r16
 20c:	4d 9b       	sbis	0x09, 5	; 9
 20e:	5e c0       	rjmp	.+188    	; 0x2cc <main+0x1b8>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	28 2b       	or	r18, r24
 214:	93 b1       	in	r25, 0x03	; 3
 216:	90 95       	com	r25
 218:	89 2f       	mov	r24, r25
 21a:	88 1f       	adc	r24, r24
 21c:	88 27       	eor	r24, r24
 21e:	88 1f       	adc	r24, r24
 220:	88 0f       	add	r24, r24
 222:	88 0f       	add	r24, r24
 224:	82 2b       	or	r24, r18
 226:	4e 9b       	sbis	0x09, 6	; 9
 228:	53 c0       	rjmp	.+166    	; 0x2d0 <main+0x1bc>
 22a:	90 e0       	ldi	r25, 0x00	; 0
                display_update(&display);

            // do the user processing of the interface
            state.clock.clock_speed = read_adc(POT_ADC);
            state.clock.clock_mode = read_switch();
            state.selected = read_rot();
 22c:	89 2b       	or	r24, r25
 22e:	88 0f       	add	r24, r24
 230:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state.1926+0x2>
 234:	91 7e       	andi	r25, 0xE1	; 225
 236:	89 2b       	or	r24, r25
 238:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <state.1926+0x2>

            status = proto_status();
 23c:	e6 d2       	rcall	.+1484   	; 0x80a <proto_status>
 23e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <status.1930>
    while (1)
    {
        status = proto_status();

        // while the transmission hasn't completed, process user interaction
        while (status != IDLE && status != FAILED)
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	08 f0       	brcs	.+2      	; 0x248 <main+0x134>
 246:	96 cf       	rjmp	.-212    	; 0x174 <main+0x60>

            status = proto_status();
        }
        
        // debug
        if (status == FAILED)
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	09 f4       	brne	.+2      	; 0x24e <main+0x13a>
 24c:	4e c0       	rjmp	.+156    	; 0x2ea <main+0x1d6>
            __asm("nop");

        // update the display on successful transmission :)
        if (status == IDLE)
        {
            display = tmp_display;
 24e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <tmp_display.1929>
 252:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <tmp_display.1929+0x1>
 256:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <tmp_display.1929+0x2>
 25a:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <tmp_display.1929+0x3>
 25e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <display.1928>
 262:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <display.1928+0x1>
 266:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <display.1928+0x2>
 26a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <display.1928+0x3>
            updated = 1;
 26e:	11 e0       	ldi	r17, 0x01	; 1
        }

        tmp_state = state;
 270:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <state.1926>
 274:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <state.1926+0x1>
 278:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <state.1926+0x2>
 27c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 280:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 284:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <__data_end+0x2>

        // create the packets
        proto_packet_t transmit = proto_create(3, (uint8_t*)&tmp_state, sizeof(status_state_t));
 288:	43 e0       	ldi	r20, 0x03	; 3
 28a:	64 e2       	ldi	r22, 0x24	; 36
 28c:	71 e0       	ldi	r23, 0x01	; 1
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	c0 d2       	rcall	.+1408   	; 0x812 <proto_create>
 292:	28 87       	std	Y+8, r18	; 0x08
 294:	39 87       	std	Y+9, r19	; 0x09
 296:	4a 87       	std	Y+10, r20	; 0x0a
 298:	5b 87       	std	Y+11, r21	; 0x0b
 29a:	6c 87       	std	Y+12, r22	; 0x0c
 29c:	7d 87       	std	Y+13, r23	; 0x0d
 29e:	8e 87       	std	Y+14, r24	; 0x0e
        proto_update_crc(&transmit);
 2a0:	ce 01       	movw	r24, r28
 2a2:	08 96       	adiw	r24, 0x08	; 8
 2a4:	e3 d2       	rcall	.+1478   	; 0x86c <proto_update_crc>

        proto_packet_t receive = proto_create(30, (uint8_t*)&tmp_display, sizeof(status_display_t));
 2a6:	44 e0       	ldi	r20, 0x04	; 4
 2a8:	67 e2       	ldi	r22, 0x27	; 39
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	8e e1       	ldi	r24, 0x1E	; 30
 2ae:	b1 d2       	rcall	.+1378   	; 0x812 <proto_create>
 2b0:	29 83       	std	Y+1, r18	; 0x01
 2b2:	3a 83       	std	Y+2, r19	; 0x02
 2b4:	4b 83       	std	Y+3, r20	; 0x03
 2b6:	5c 83       	std	Y+4, r21	; 0x04
 2b8:	6d 83       	std	Y+5, r22	; 0x05
 2ba:	7e 83       	std	Y+6, r23	; 0x06
 2bc:	8f 83       	std	Y+7, r24	; 0x07
        // set the packets to be tranceived
        proto_tranceive(&transmit, &receive);
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5f       	subi	r22, 0xFF	; 255
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	ce 01       	movw	r24, r28
 2c6:	08 96       	adiw	r24, 0x08	; 8
 2c8:	da d2       	rcall	.+1460   	; 0x87e <proto_tranceive>
    }
 2ca:	4e cf       	rjmp	.-356    	; 0x168 <main+0x54>
    #define ROT1_SAMPLE() (((ROT1_PIN & ROT1_MASK) == 0) << 0)
    #define ROT2_SAMPLE() (((ROT2_PIN & ROT2_MASK) == 0) << 1)
    #define ROT4_SAMPLE() (((ROT4_PIN & ROT4_MASK) == 0) << 2)
    #define ROT8_SAMPLE() (((ROT8_PIN & ROT8_MASK) == 0) << 3)

    return ROT1_SAMPLE() | ROT2_SAMPLE() | ROT4_SAMPLE() | ROT8_SAMPLE();
 2cc:	22 e0       	ldi	r18, 0x02	; 2
 2ce:	a1 cf       	rjmp	.-190    	; 0x212 <main+0xfe>
 2d0:	98 e0       	ldi	r25, 0x08	; 8
 2d2:	ac cf       	rjmp	.-168    	; 0x22c <main+0x118>
{
    // ADC returns 0 - 1023: > 750 it is in UP; < 250 is DOWN; 250 - 750 is MIDDLE
    uint16_t val = read_adc(CLOCK_ADC);
    if (val > 750)
        return UP;
    else if (val < 250)
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	2a 3f       	cpi	r18, 0xFA	; 250
 2d8:	31 05       	cpc	r19, r1
 2da:	08 f4       	brcc	.+2      	; 0x2de <main+0x1ca>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	83 70       	andi	r24, 0x03	; 3
 2e0:	8a cf       	rjmp	.-236    	; 0x1f6 <main+0xe2>
        {
            wdt_reset();

            // received valid packet to display
            if (updated)
                display_update(&display);
 2e2:	8e e2       	ldi	r24, 0x2E	; 46
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	bc de       	rcall	.-648    	; 0x60 <display_update>
 2e8:	48 cf       	rjmp	.-368    	; 0x17a <main+0x66>
            status = proto_status();
        }
        
        // debug
        if (status == FAILED)
            __asm("nop");
 2ea:	00 00       	nop
 2ec:	c1 cf       	rjmp	.-126    	; 0x270 <main+0x15c>

000002ee <spi_tranceive_byte>:
    spi_state.tran_buf = tran_buf;
    spi_state.tran_len = tran_len;
    spi_state.recv_buf = recv_buf;
    spi_state.recv_len = recv_len;

    return _spi_tranceive(&spi_state);
 2ee:	8e bd       	out	0x2e, r24	; 46
 2f0:	0d b4       	in	r0, 0x2d	; 45
 2f2:	07 fe       	sbrs	r0, 7
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <spi_tranceive_byte+0x2>
 2f6:	8e b5       	in	r24, 0x2e	; 46
 2f8:	08 95       	ret

000002fa <spi_init>:
 2fa:	28 2f       	mov	r18, r24
 2fc:	23 70       	andi	r18, 0x03	; 3
 2fe:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
 302:	9c 7f       	andi	r25, 0xFC	; 252
 304:	92 2b       	or	r25, r18
 306:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_start+0x8>
 30a:	96 2f       	mov	r25, r22
 30c:	93 70       	andi	r25, 0x03	; 3
 30e:	90 64       	ori	r25, 0x40	; 64
 310:	9c bd       	out	0x2c, r25	; 44
 312:	81 11       	cpse	r24, r1
 314:	0e c0       	rjmp	.+28     	; 0x332 <__stack+0x33>
 316:	24 98       	cbi	0x04, 4	; 4
 318:	23 9a       	sbi	0x04, 3	; 4
 31a:	25 9a       	sbi	0x04, 5	; 4
 31c:	22 9a       	sbi	0x04, 2	; 4
 31e:	2a 9a       	sbi	0x05, 2	; 5
 320:	8c b5       	in	r24, 0x2c	; 44
 322:	80 61       	ori	r24, 0x10	; 16
 324:	8c bd       	out	0x2c, r24	; 44
 326:	62 ff       	sbrs	r22, 2
 328:	03 c0       	rjmp	.+6      	; 0x330 <__stack+0x31>
 32a:	8d b5       	in	r24, 0x2d	; 45
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	8d bd       	out	0x2d, r24	; 45
 330:	08 95       	ret
 332:	80 ff       	sbrs	r24, 0
 334:	f8 cf       	rjmp	.-16     	; 0x326 <__stack+0x27>
 336:	24 9a       	sbi	0x04, 4	; 4
 338:	23 98       	cbi	0x04, 3	; 4
 33a:	25 98       	cbi	0x04, 5	; 4
 33c:	22 98       	cbi	0x04, 2	; 4
 33e:	f3 cf       	rjmp	.-26     	; 0x326 <__stack+0x27>

00000340 <spi_tranceive>:
 340:	e0 e0       	ldi	r30, 0x00	; 0
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	91 83       	std	Z+1, r25	; 0x01
 346:	80 83       	st	Z, r24
 348:	64 83       	std	Z+4, r22	; 0x04
 34a:	53 83       	std	Z+3, r21	; 0x03
 34c:	42 83       	std	Z+2, r20	; 0x02
 34e:	25 83       	std	Z+5, r18	; 0x05
 350:	cf 01       	movw	r24, r30
 352:	25 c0       	rjmp	.+74     	; 0x39e <_spi_tranceive>

00000354 <__vector_15>:
    
    return SPDR;
}

ISR(SPI_STC_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
    _spi_isr(&spi_state);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	74 d0       	rcall	.+232    	; 0x464 <_spi_isr>
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	fc 01       	movw	r30, r24
    uint8_t len = MAX(state->tran_len, state->recv_len);
 3a8:	94 81       	ldd	r25, Z+4	; 0x04
 3aa:	85 81       	ldd	r24, Z+5	; 0x05
 3ac:	89 17       	cp	r24, r25
 3ae:	c0 f5       	brcc	.+112    	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 3b0:	d4 81       	ldd	r29, Z+4	; 0x04
    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 3b2:	80 85       	ldd	r24, Z+8	; 0x08
 3b4:	83 70       	andi	r24, 0x03	; 3
 3b6:	83 30       	cpi	r24, 0x03	; 3
 3b8:	c1 f1       	breq	.+112    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
    uint8_t len = MAX(state->tran_len, state->recv_len);
    uint8_t i = 0;
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 3be:	cd 17       	cp	r28, r29
 3c0:	d0 f0       	brcs	.+52     	; 0x3f6 <_spi_tranceive+0x58>
 3c2:	1f c0       	rjmp	.+62     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
	{
		uint8_t tran = i < state->tran_len ? state->tran_buf[i] : 0xFF;
 3c4:	01 90       	ld	r0, Z+
 3c6:	f0 81       	ld	r31, Z
 3c8:	e0 2d       	mov	r30, r0
 3ca:	ec 0f       	add	r30, r28
 3cc:	f1 1d       	adc	r31, r1
 3ce:	80 81       	ld	r24, Z
	    uint8_t recv = state->tranceive_byte(tran);	
 3d0:	d8 01       	movw	r26, r16
 3d2:	51 96       	adiw	r26, 0x11	; 17
 3d4:	ed 91       	ld	r30, X+
 3d6:	fc 91       	ld	r31, X
 3d8:	52 97       	sbiw	r26, 0x12	; 18
 3da:	09 95       	icall
		
		if (i < state->recv_len)
 3dc:	f8 01       	movw	r30, r16
 3de:	95 81       	ldd	r25, Z+5	; 0x05
 3e0:	c9 17       	cp	r28, r25
 3e2:	30 f4       	brcc	.+12     	; 0x3f0 <_spi_tranceive+0x52>
		    state->recv_buf[i] = recv;
 3e4:	02 80       	ldd	r0, Z+2	; 0x02
 3e6:	f3 81       	ldd	r31, Z+3	; 0x03
 3e8:	e0 2d       	mov	r30, r0
 3ea:	ec 0f       	add	r30, r28
 3ec:	f1 1d       	adc	r31, r1
 3ee:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 3f0:	cf 5f       	subi	r28, 0xFF	; 255
 3f2:	cd 17       	cp	r28, r29
 3f4:	31 f0       	breq	.+12     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
	{
		uint8_t tran = i < state->tran_len ? state->tran_buf[i] : 0xFF;
 3f6:	f8 01       	movw	r30, r16
 3f8:	84 81       	ldd	r24, Z+4	; 0x04
 3fa:	c8 17       	cp	r28, r24
 3fc:	18 f3       	brcs	.-58     	; 0x3c4 <_spi_tranceive+0x26>
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	e7 cf       	rjmp	.-50     	; 0x3d0 <_spi_tranceive+0x32>
		
		if (i < state->recv_len)
		    state->recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 402:	d8 01       	movw	r26, r16
 404:	1f 96       	adiw	r26, 0x0f	; 15
 406:	ed 91       	ld	r30, X+
 408:	fc 91       	ld	r31, X
 40a:	50 97       	sbiw	r26, 0x10	; 16
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	11 f0       	breq	.+4      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
        state->on_completed(state);
 410:	c8 01       	movw	r24, r16
 412:	09 95       	icall

    return SPI_OK;
 414:	80 e0       	ldi	r24, 0x00	; 0
}   
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
    uint8_t len = MAX(state->tran_len, state->recv_len);
 420:	d5 81       	ldd	r29, Z+5	; 0x05
    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 422:	80 85       	ldd	r24, Z+8	; 0x08
 424:	83 70       	andi	r24, 0x03	; 3
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	41 f6       	brne	.-112    	; 0x3ba <_spi_tranceive+0x1c>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 42a:	a5 85       	ldd	r26, Z+13	; 0x0d
 42c:	b6 85       	ldd	r27, Z+14	; 0x0e
 42e:	8c 91       	ld	r24, X
 430:	87 ff       	sbrs	r24, 7
 432:	05 c0       	rjmp	.+10     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
            *state->spcr |= 1 << SPIF;

            return SPI_PENDING;
        }

        *state->spcr &= ~(1 << SPIF);
 434:	8c 91       	ld	r24, X
 436:	8f 77       	andi	r24, 0x7F	; 127
 438:	8c 93       	st	X, r24
        ++i;
 43a:	c1 e0       	ldi	r28, 0x01	; 1
 43c:	bf cf       	rjmp	.-130    	; 0x3bc <_spi_tranceive+0x1e>
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
    {
        if ((!(*state->spcr & (1 << SPIF))))
        {
            *state->spdr = state->tran_len ? state->tran_buf[0] : 0xFF;
 43e:	a1 85       	ldd	r26, Z+9	; 0x09
 440:	b2 85       	ldd	r27, Z+10	; 0x0a
 442:	84 81       	ldd	r24, Z+4	; 0x04
 444:	88 23       	and	r24, r24
 446:	61 f0       	breq	.+24     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 448:	c0 81       	ld	r28, Z
 44a:	d1 81       	ldd	r29, Z+1	; 0x01
 44c:	88 81       	ld	r24, Y
 44e:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 450:	05 84       	ldd	r0, Z+13	; 0x0d
 452:	f6 85       	ldd	r31, Z+14	; 0x0e
 454:	e0 2d       	mov	r30, r0
 456:	80 81       	ld	r24, Z
 458:	80 68       	ori	r24, 0x80	; 128
 45a:	80 83       	st	Z, r24

            return SPI_PENDING;
 45c:	8e ef       	ldi	r24, 0xFE	; 254
 45e:	db cf       	rjmp	.-74     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
    {
        if ((!(*state->spcr & (1 << SPIF))))
        {
            *state->spdr = state->tran_len ? state->tran_buf[0] : 0xFF;
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	f5 cf       	rjmp	.-22     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>

00000464 <_spi_isr>:

    return SPI_OK;
}   

void _spi_isr(spi_state_t* state)
{  
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
    if (state->recv_len)
 468:	dc 01       	movw	r26, r24
 46a:	15 96       	adiw	r26, 0x05	; 5
 46c:	2c 91       	ld	r18, X
 46e:	15 97       	sbiw	r26, 0x05	; 5
 470:	22 23       	and	r18, r18
 472:	51 f0       	breq	.+20     	; 0x488 <_spi_isr+0x24>
        state->recv_buf[0] = *state->spdr;
 474:	12 96       	adiw	r26, 0x02	; 2
 476:	ed 91       	ld	r30, X+
 478:	fc 91       	ld	r31, X
 47a:	13 97       	sbiw	r26, 0x03	; 3
 47c:	19 96       	adiw	r26, 0x09	; 9
 47e:	0d 90       	ld	r0, X+
 480:	bc 91       	ld	r27, X
 482:	a0 2d       	mov	r26, r0
 484:	2c 91       	ld	r18, X
 486:	20 83       	st	Z, r18

    _spi_tranceive(state);
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
void _spi_isr(spi_state_t* state)
{  
    if (state->recv_len)
        state->recv_buf[0] = *state->spdr;

    _spi_tranceive(state);
 48c:	88 cf       	rjmp	.-240    	; 0x39e <_spi_tranceive>

0000048e <spi_write.constprop.0>:
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 48e:	40 98       	cbi	0x08, 0	; 8
 490:	fc 01       	movw	r30, r24
 492:	02 96       	adiw	r24, 0x02	; 2
    };

    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
 494:	47 e0       	ldi	r20, 0x07	; 7
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <spi_write.constprop.0+0x18>
    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
                DATA_ASSERT();
 49a:	71 9a       	sbi	0x0e, 1	; 14
            else
                DATA_DISABLE();

            SCK_ASSERT();
 49c:	70 9a       	sbi	0x0e, 0	; 14
            SCK_DISABLE();
 49e:	70 98       	cbi	0x0e, 0	; 14
 4a0:	41 50       	subi	r20, 0x01	; 1
 4a2:	51 09       	sbc	r21, r1
 4a4:	80 f0       	brcs	.+32     	; 0x4c6 <spi_write.constprop.0+0x38>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 4a6:	20 81       	ld	r18, Z
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	04 2e       	mov	r0, r20
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <spi_write.constprop.0+0x24>
 4ae:	35 95       	asr	r19
 4b0:	27 95       	ror	r18
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <spi_write.constprop.0+0x20>
 4b6:	20 fd       	sbrc	r18, 0
 4b8:	f0 cf       	rjmp	.-32     	; 0x49a <spi_write.constprop.0+0xc>
                DATA_ASSERT();
            else
                DATA_DISABLE();
 4ba:	71 98       	cbi	0x0e, 1	; 14

            SCK_ASSERT();
 4bc:	70 9a       	sbi	0x0e, 0	; 14
            SCK_DISABLE();
 4be:	70 98       	cbi	0x0e, 0	; 14
 4c0:	41 50       	subi	r20, 0x01	; 1
 4c2:	51 09       	sbc	r21, r1
 4c4:	80 f7       	brcc	.-32     	; 0x4a6 <spi_write.constprop.0+0x18>
 4c6:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 4c8:	e8 17       	cp	r30, r24
 4ca:	f9 07       	cpc	r31, r25
 4cc:	19 f7       	brne	.-58     	; 0x494 <spi_write.constprop.0+0x6>
            SCK_ASSERT();
            SCK_DISABLE();
        }
    }

    CS_DISABLE();
 4ce:	40 9a       	sbi	0x08, 0	; 8
 4d0:	08 95       	ret

000004d2 <max7221_init>:
#define SCK_DISABLE()   (MAX7221_SCK_PORT   &= ~MAX7221_SCK_MASK)

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	00 d0       	rcall	.+0      	; 0x4da <max7221_init+0x8>
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 4de:	38 9a       	sbi	0x07, 0	; 7
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 4e0:	68 9a       	sbi	0x0d, 0	; 13
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 4e2:	69 9a       	sbi	0x0d, 1	; 13

    CS_ASSERT();
 4e4:	40 98       	cbi	0x08, 0	; 8
    SCK_ASSERT();
 4e6:	70 9a       	sbi	0x0e, 0	; 14
    DATA_ASSERT();
 4e8:	71 9a       	sbi	0x0e, 1	; 14
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 4ea:	8b e0       	ldi	r24, 0x0B	; 11
 4ec:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 4ee:	87 e0       	ldi	r24, 0x07	; 7
 4f0:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	cb df       	rcall	.-106    	; 0x48e <spi_write.constprop.0>
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 4f8:	1a 82       	std	Y+2, r1	; 0x02
 4fa:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 4fc:	89 e0       	ldi	r24, 0x09	; 9
 4fe:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
 500:	ce 01       	movw	r24, r28
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	c4 df       	rcall	.-120    	; 0x48e <spi_write.constprop.0>
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 506:	8c e0       	ldi	r24, 0x0C	; 12
 508:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 50a:	11 e0       	ldi	r17, 0x01	; 1
 50c:	1a 83       	std	Y+2, r17	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	bd df       	rcall	.-134    	; 0x48e <spi_write.constprop.0>
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };

    // store the command in the buffer
    arr[device*2] = address;
 514:	8a e0       	ldi	r24, 0x0A	; 10
 516:	89 83       	std	Y+1, r24	; 0x01
    arr[device*2 + 1] = data;
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	8a 83       	std	Y+2, r24	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	b6 df       	rcall	.-148    	; 0x48e <spi_write.constprop.0>
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 522:	1a 82       	std	Y+2, r1	; 0x02
 524:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 526:	19 83       	std	Y+1, r17	; 0x01
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	b0 df       	rcall	.-160    	; 0x48e <spi_write.constprop.0>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
 52e:	12 e0       	ldi	r17, 0x02	; 2
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 530:	1a 82       	std	Y+2, r1	; 0x02
 532:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 534:	19 83       	std	Y+1, r17	; 0x01
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	a9 df       	rcall	.-174    	; 0x48e <spi_write.constprop.0>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
 53c:	1f 5f       	subi	r17, 0xFF	; 255
 53e:	19 30       	cpi	r17, 0x09	; 9
 540:	b9 f7       	brne	.-18     	; 0x530 <max7221_init+0x5e>
            max7221_write(i, j, 0);
    }    
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	08 95       	ret

0000054e <max7221_write>:

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	00 d0       	rcall	.+0      	; 0x554 <max7221_write+0x6>
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 558:	1a 82       	std	Y+2, r1	; 0x02
 55a:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	e1 e0       	ldi	r30, 0x01	; 1
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ec 0f       	add	r30, r28
 568:	fd 1f       	adc	r31, r29
 56a:	e8 0f       	add	r30, r24
 56c:	f9 1f       	adc	r31, r25
 56e:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 570:	fe 01       	movw	r30, r28
 572:	e8 0f       	add	r30, r24
 574:	f9 1f       	adc	r31, r25
 576:	42 83       	std	Z+2, r20	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	88 df       	rcall	.-240    	; 0x48e <spi_write.constprop.0>
}
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <max7221_display>:

void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	00 d0       	rcall	.+0      	; 0x58e <max7221_display+0x6>
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
    if (c >= '0' && c <= '9')
 592:	90 ed       	ldi	r25, 0xD0	; 208
 594:	94 0f       	add	r25, r20
 596:	9a 30       	cpi	r25, 0x0A	; 10
 598:	58 f1       	brcs	.+86     	; 0x5f0 <max7221_display+0x68>
        c -= '0';
    else if (c >= 'a' && c <= 'z')
 59a:	9f e9       	ldi	r25, 0x9F	; 159
 59c:	94 0f       	add	r25, r20
 59e:	9a 31       	cpi	r25, 0x1A	; 26
 5a0:	48 f0       	brcs	.+18     	; 0x5b4 <max7221_display+0x2c>
        c -= 'a' - 10;
    else if (c >= 'A' && c <= 'Z')
 5a2:	9f eb       	ldi	r25, 0xBF	; 191
 5a4:	94 0f       	add	r25, r20
 5a6:	9a 31       	cpi	r25, 0x1A	; 26
 5a8:	48 f1       	brcs	.+82     	; 0x5fc <max7221_display+0x74>
        c -= 'A' - 10;
    else if (c > 0x0F)
 5aa:	40 31       	cpi	r20, 0x10	; 16
 5ac:	20 f1       	brcs	.+72     	; 0x5f6 <max7221_display+0x6e>
 5ae:	e0 e0       	ldi	r30, 0x00	; 0
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <max7221_display+0x32>
void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
    if (c >= '0' && c <= '9')
        c -= '0';
    else if (c >= 'a' && c <= 'z')
        c -= 'a' - 10;
 5b4:	e9 ea       	ldi	r30, 0xA9	; 169
 5b6:	e4 0f       	add	r30, r20
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
    {
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
 5ba:	ed 5e       	subi	r30, 0xED	; 237
 5bc:	fe 4f       	sbci	r31, 0xFE	; 254
 5be:	20 81       	ld	r18, Z
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 5c0:	1a 82       	std	Y+2, r1	; 0x02
 5c2:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	e1 e0       	ldi	r30, 0x01	; 1
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	ec 0f       	add	r30, r28
 5d0:	fd 1f       	adc	r31, r29
 5d2:	e8 0f       	add	r30, r24
 5d4:	f9 1f       	adc	r31, r25
 5d6:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 5d8:	fe 01       	movw	r30, r28
 5da:	e8 0f       	add	r30, r24
 5dc:	f9 1f       	adc	r31, r25
 5de:	22 83       	std	Z+2, r18	; 0x02

    spi_write(arr, MAX7221_DEVICES*2);
 5e0:	ce 01       	movw	r24, r28
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	54 df       	rcall	.-344    	; 0x48e <spi_write.constprop.0>
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
}
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret
 5f0:	e9 2f       	mov	r30, r25
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	e2 cf       	rjmp	.-60     	; 0x5ba <max7221_display+0x32>
 5f6:	e4 2f       	mov	r30, r20
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	df cf       	rjmp	.-66     	; 0x5ba <max7221_display+0x32>
    if (c >= '0' && c <= '9')
        c -= '0';
    else if (c >= 'a' && c <= 'z')
        c -= 'a' - 10;
    else if (c >= 'A' && c <= 'Z')
        c -= 'A' - 10;
 5fc:	e9 ec       	ldi	r30, 0xC9	; 201
 5fe:	e4 0f       	add	r30, r20
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	db cf       	rjmp	.-74     	; 0x5ba <max7221_display+0x32>

00000604 <calculate_crc>:
}

int8_t proto_completed()
{
    return state.status == IDLE;
}
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	3f ef       	ldi	r19, 0xFF	; 255
 60c:	28 27       	eor	r18, r24
 60e:	02 2e       	mov	r0, r18
 610:	22 95       	swap	r18
 612:	20 7f       	andi	r18, 0xF0	; 240
 614:	20 25       	eor	r18, r0
 616:	03 2e       	mov	r0, r19
 618:	32 2f       	mov	r19, r18
 61a:	22 95       	swap	r18
 61c:	2f 70       	andi	r18, 0x0F	; 15
 61e:	02 26       	eor	r0, r18
 620:	26 95       	lsr	r18
 622:	32 27       	eor	r19, r18
 624:	23 27       	eor	r18, r19
 626:	22 0f       	add	r18, r18
 628:	22 0f       	add	r18, r18
 62a:	22 0f       	add	r18, r18
 62c:	20 25       	eor	r18, r0
 62e:	41 81       	ldd	r20, Z+1	; 0x01
 630:	c9 01       	movw	r24, r18
 632:	84 27       	eor	r24, r20
 634:	08 2e       	mov	r0, r24
 636:	82 95       	swap	r24
 638:	80 7f       	andi	r24, 0xF0	; 240
 63a:	80 25       	eor	r24, r0
 63c:	09 2e       	mov	r0, r25
 63e:	98 2f       	mov	r25, r24
 640:	82 95       	swap	r24
 642:	8f 70       	andi	r24, 0x0F	; 15
 644:	08 26       	eor	r0, r24
 646:	86 95       	lsr	r24
 648:	98 27       	eor	r25, r24
 64a:	89 27       	eor	r24, r25
 64c:	88 0f       	add	r24, r24
 64e:	88 0f       	add	r24, r24
 650:	88 0f       	add	r24, r24
 652:	80 25       	eor	r24, r0
 654:	44 23       	and	r20, r20
 656:	f9 f0       	breq	.+62     	; 0x696 <calculate_crc+0x92>
 658:	02 80       	ldd	r0, Z+2	; 0x02
 65a:	f3 81       	ldd	r31, Z+3	; 0x03
 65c:	e0 2d       	mov	r30, r0
 65e:	41 50       	subi	r20, 0x01	; 1
 660:	24 2f       	mov	r18, r20
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	2f 5f       	subi	r18, 0xFF	; 255
 666:	3f 4f       	sbci	r19, 0xFF	; 255
 668:	2e 0f       	add	r18, r30
 66a:	3f 1f       	adc	r19, r31
 66c:	41 91       	ld	r20, Z+
 66e:	84 27       	eor	r24, r20
 670:	08 2e       	mov	r0, r24
 672:	82 95       	swap	r24
 674:	80 7f       	andi	r24, 0xF0	; 240
 676:	80 25       	eor	r24, r0
 678:	09 2e       	mov	r0, r25
 67a:	98 2f       	mov	r25, r24
 67c:	82 95       	swap	r24
 67e:	8f 70       	andi	r24, 0x0F	; 15
 680:	08 26       	eor	r0, r24
 682:	86 95       	lsr	r24
 684:	98 27       	eor	r25, r24
 686:	89 27       	eor	r24, r25
 688:	88 0f       	add	r24, r24
 68a:	88 0f       	add	r24, r24
 68c:	88 0f       	add	r24, r24
 68e:	80 25       	eor	r24, r0
 690:	e2 17       	cp	r30, r18
 692:	f3 07       	cpc	r31, r19
 694:	59 f7       	brne	.-42     	; 0x66c <calculate_crc+0x68>
 696:	08 95       	ret

00000698 <completed>:
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <state+0x3>
 6a0:	d0 91 37 01 	lds	r29, 0x0137	; 0x800137 <state+0x4>
 6a4:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <state+0x5>
 6a8:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <state+0x6>
 6ac:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <state>
 6b0:	29 2f       	mov	r18, r25
 6b2:	27 70       	andi	r18, 0x07	; 7
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	23 30       	cpi	r18, 0x03	; 3
 6b8:	31 05       	cpc	r19, r1
 6ba:	99 f1       	breq	.+102    	; 0x722 <completed+0x8a>
 6bc:	24 30       	cpi	r18, 0x04	; 4
 6be:	31 05       	cpc	r19, r1
 6c0:	a9 f0       	breq	.+42     	; 0x6ec <completed+0x54>
 6c2:	22 30       	cpi	r18, 0x02	; 2
 6c4:	31 05       	cpc	r19, r1
 6c6:	19 f0       	breq	.+6      	; 0x6ce <completed+0x36>
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret
 6ce:	10 97       	sbiw	r26, 0x00	; 0
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <completed+0x3c>
 6d2:	74 c0       	rjmp	.+232    	; 0x7bc <completed+0x124>
 6d4:	2c 91       	ld	r18, X
 6d6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state+0x1>
 6da:	28 17       	cp	r18, r24
 6dc:	c9 f1       	breq	.+114    	; 0x750 <completed+0xb8>
 6de:	98 7f       	andi	r25, 0xF8	; 248
 6e0:	91 60       	ori	r25, 0x01	; 1
 6e2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <state>
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret
 6ec:	00 00       	nop
 6ee:	98 7f       	andi	r25, 0xF8	; 248
 6f0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <state>
 6f4:	10 97       	sbiw	r26, 0x00	; 0
 6f6:	89 f0       	breq	.+34     	; 0x71a <completed+0x82>
 6f8:	14 96       	adiw	r26, 0x04	; 4
 6fa:	cd 91       	ld	r28, X+
 6fc:	dc 91       	ld	r29, X
 6fe:	15 97       	sbiw	r26, 0x05	; 5
 700:	cd 01       	movw	r24, r26
 702:	80 df       	rcall	.-256    	; 0x604 <calculate_crc>
 704:	21 e0       	ldi	r18, 0x01	; 1
 706:	c8 17       	cp	r28, r24
 708:	d9 07       	cpc	r29, r25
 70a:	09 f4       	brne	.+2      	; 0x70e <completed+0x76>
 70c:	45 c0       	rjmp	.+138    	; 0x798 <completed+0x100>
 70e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <state>
 712:	88 7f       	andi	r24, 0xF8	; 248
 714:	28 2b       	or	r18, r24
 716:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <state>
 71a:	00 00       	nop
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret
 722:	98 7f       	andi	r25, 0xF8	; 248
 724:	94 60       	ori	r25, 0x04	; 4
 726:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <state>
 72a:	20 97       	sbiw	r28, 0x00	; 0
 72c:	09 f4       	brne	.+2      	; 0x730 <completed+0x98>
 72e:	55 c0       	rjmp	.+170    	; 0x7da <completed+0x142>
 730:	10 97       	sbiw	r26, 0x00	; 0
 732:	a1 f1       	breq	.+104    	; 0x79c <completed+0x104>
 734:	ad 01       	movw	r20, r26
 736:	4c 5f       	subi	r20, 0xFC	; 252
 738:	5f 4f       	sbci	r21, 0xFF	; 255
 73a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 73e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
 742:	22 e0       	ldi	r18, 0x02	; 2
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	ce 01       	movw	r24, r28
 748:	04 96       	adiw	r24, 0x04	; 4
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	09 94       	ijmp
 750:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <state+0x2>
 754:	11 96       	adiw	r26, 0x01	; 1
 756:	9c 91       	ld	r25, X
 758:	11 97       	sbiw	r26, 0x01	; 1
 75a:	98 17       	cp	r25, r24
 75c:	38 f1       	brcs	.+78     	; 0x7ac <completed+0x114>
 75e:	89 17       	cp	r24, r25
 760:	18 f4       	brcc	.+6      	; 0x768 <completed+0xd0>
 762:	11 96       	adiw	r26, 0x01	; 1
 764:	8c 93       	st	X, r24
 766:	11 97       	sbiw	r26, 0x01	; 1
 768:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <state>
 76c:	88 7f       	andi	r24, 0xF8	; 248
 76e:	83 60       	ori	r24, 0x03	; 3
 770:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <state>
 774:	12 96       	adiw	r26, 0x02	; 2
 776:	4d 91       	ld	r20, X+
 778:	5c 91       	ld	r21, X
 77a:	13 97       	sbiw	r26, 0x03	; 3
 77c:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 780:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
 784:	11 96       	adiw	r26, 0x01	; 1
 786:	2c 91       	ld	r18, X
 788:	20 97       	sbiw	r28, 0x00	; 0
 78a:	91 f1       	breq	.+100    	; 0x7f0 <completed+0x158>
 78c:	69 81       	ldd	r22, Y+1	; 0x01
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	9b 81       	ldd	r25, Y+3	; 0x03
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	09 94       	ijmp
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	b9 cf       	rjmp	.-142    	; 0x70e <completed+0x76>
 79c:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 7a0:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	cc cf       	rjmp	.-104    	; 0x744 <completed+0xac>
 7ac:	16 96       	adiw	r26, 0x06	; 6
 7ae:	8c 91       	ld	r24, X
 7b0:	16 97       	sbiw	r26, 0x06	; 6
 7b2:	81 60       	ori	r24, 0x01	; 1
 7b4:	16 96       	adiw	r26, 0x06	; 6
 7b6:	8c 93       	st	X, r24
 7b8:	16 97       	sbiw	r26, 0x06	; 6
 7ba:	d6 cf       	rjmp	.-84     	; 0x768 <completed+0xd0>
 7bc:	98 7f       	andi	r25, 0xF8	; 248
 7be:	93 60       	ori	r25, 0x03	; 3
 7c0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <state>
 7c4:	20 97       	sbiw	r28, 0x00	; 0
 7c6:	09 f4       	brne	.+2      	; 0x7ca <completed+0x132>
 7c8:	7f cf       	rjmp	.-258    	; 0x6c8 <completed+0x30>
 7ca:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 7ce:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
 7d2:	20 e0       	ldi	r18, 0x00	; 0
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	d9 cf       	rjmp	.-78     	; 0x78c <completed+0xf4>
 7da:	10 97       	sbiw	r26, 0x00	; 0
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <completed+0x148>
 7de:	74 cf       	rjmp	.-280    	; 0x6c8 <completed+0x30>
 7e0:	ad 01       	movw	r20, r26
 7e2:	4c 5f       	subi	r20, 0xFC	; 252
 7e4:	5f 4f       	sbci	r21, 0xFF	; 255
 7e6:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 7ea:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
 7ee:	22 e0       	ldi	r18, 0x02	; 2
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	09 94       	ijmp

000007fc <proto_init>:
 7fc:	e3 e3       	ldi	r30, 0x33	; 51
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	90 87       	std	Z+8, r25	; 0x08
 802:	87 83       	std	Z+7, r24	; 0x07
 804:	72 87       	std	Z+10, r23	; 0x0a
 806:	61 87       	std	Z+9, r22	; 0x09
 808:	08 95       	ret

0000080a <proto_status>:

proto_status_t proto_status()
{
    return state.status;
 80a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <state>
}
 80e:	87 70       	andi	r24, 0x07	; 7
 810:	08 95       	ret

00000812 <proto_create>:

proto_packet_t proto_create(uint8_t id, uint8_t* payload, uint8_t len)
{
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
 81a:	2e 97       	sbiw	r28, 0x0e	; 14
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
    proto_packet_t packet =
 826:	fe 01       	movw	r30, r28
 828:	38 96       	adiw	r30, 0x08	; 8
 82a:	97 e0       	ldi	r25, 0x07	; 7
 82c:	df 01       	movw	r26, r30
 82e:	1d 92       	st	X+, r1
 830:	9a 95       	dec	r25
 832:	e9 f7       	brne	.-6      	; 0x82e <proto_create+0x1c>
        .id = id,
        .payload = payload,
        .len = len
    };

    return packet;
 834:	88 87       	std	Y+8, r24	; 0x08
 836:	49 87       	std	Y+9, r20	; 0x09
 838:	7b 87       	std	Y+11, r23	; 0x0b
 83a:	6a 87       	std	Y+10, r22	; 0x0a
 83c:	87 e0       	ldi	r24, 0x07	; 7
 83e:	de 01       	movw	r26, r28
 840:	11 96       	adiw	r26, 0x01	; 1
 842:	01 90       	ld	r0, Z+
 844:	0d 92       	st	X+, r0
 846:	8a 95       	dec	r24
 848:	e1 f7       	brne	.-8      	; 0x842 <proto_create+0x30>
 84a:	29 81       	ldd	r18, Y+1	; 0x01
 84c:	3a 81       	ldd	r19, Y+2	; 0x02
 84e:	4b 81       	ldd	r20, Y+3	; 0x03
 850:	5c 81       	ldd	r21, Y+4	; 0x04
 852:	6d 81       	ldd	r22, Y+5	; 0x05
 854:	7e 81       	ldd	r23, Y+6	; 0x06
}
 856:	8f 81       	ldd	r24, Y+7	; 0x07
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	2e 96       	adiw	r28, 0x0e	; 14
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <proto_update_crc>:

void proto_update_crc(proto_packet_t* packet)
{
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	ec 01       	movw	r28, r24
    packet->crc = calculate_crc(packet);
 872:	c8 de       	rcall	.-624    	; 0x604 <calculate_crc>
 874:	9d 83       	std	Y+5, r25	; 0x05
 876:	8c 83       	std	Y+4, r24	; 0x04
}
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <proto_tranceive>:

int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 87e:	dc 01       	movw	r26, r24
    //if (state.status != IDLE)
    //return PROTO_BUSY;

    *state.on_completed = completed;
 880:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <state+0x9>
 884:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <state+0xa>
 888:	8c e4       	ldi	r24, 0x4C	; 76
 88a:	93 e0       	ldi	r25, 0x03	; 3
 88c:	91 83       	std	Z+1, r25	; 0x01
 88e:	80 83       	st	Z, r24
    state.transmit = transmit;
 890:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <state+0x4>
 894:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <state+0x3>
    state.receive = receive;
 898:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <state+0x6>
 89c:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <state+0x5>

    state.status = HEADER;
 8a0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <state>
 8a4:	98 7f       	andi	r25, 0xF8	; 248
 8a6:	92 60       	ori	r25, 0x02	; 2
 8a8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <state>

    // tranceive
    if (transmit != 0 && receive != 0)
 8ac:	10 97       	sbiw	r26, 0x00	; 0
 8ae:	91 f0       	breq	.+36     	; 0x8d4 <proto_tranceive+0x56>
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 8b0:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 8b4:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
    state.receive = receive;

    state.status = HEADER;

    // tranceive
    if (transmit != 0 && receive != 0)
 8b8:	67 2b       	or	r22, r23
 8ba:	31 f0       	breq	.+12     	; 0x8c8 <proto_tranceive+0x4a>
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 8bc:	22 e0       	ldi	r18, 0x02	; 2
 8be:	44 e3       	ldi	r20, 0x34	; 52
 8c0:	51 e0       	ldi	r21, 0x01	; 1
 8c2:	62 e0       	ldi	r22, 0x02	; 2
 8c4:	cd 01       	movw	r24, r26
 8c6:	09 94       	ijmp
    // receive only
    if (transmit == 0 && receive != 0)
        return state.tranceive(0, 0, state.buf, PROTO_HEADER);
    // transmit only
    if (transmit != 0 && receive == 0)
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, 0, 0);
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	62 e0       	ldi	r22, 0x02	; 2
 8d0:	cd 01       	movw	r24, r26
 8d2:	09 94       	ijmp

    // tranceive
    if (transmit != 0 && receive != 0)
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
    // receive only
    if (transmit == 0 && receive != 0)
 8d4:	67 2b       	or	r22, r23
 8d6:	59 f0       	breq	.+22     	; 0x8ee <proto_tranceive+0x70>
        return state.tranceive(0, 0, state.buf, PROTO_HEADER);
 8d8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <state+0x7>
 8dc:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <state+0x8>
 8e0:	22 e0       	ldi	r18, 0x02	; 2
 8e2:	44 e3       	ldi	r20, 0x34	; 52
 8e4:	51 e0       	ldi	r21, 0x01	; 1
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	09 94       	ijmp
    // transmit only
    if (transmit != 0 && receive == 0)
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, 0, 0);

    state.status = FAILED;
 8ee:	98 7f       	andi	r25, 0xF8	; 248
 8f0:	91 60       	ori	r25, 0x01	; 1
 8f2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <state>
    return PROTO_INV_ARG;
}
 8f6:	8b ef       	ldi	r24, 0xFB	; 251
 8f8:	08 95       	ret

000008fa <__divmodhi4>:
 8fa:	97 fb       	bst	r25, 7
 8fc:	07 2e       	mov	r0, r23
 8fe:	16 f4       	brtc	.+4      	; 0x904 <__divmodhi4+0xa>
 900:	00 94       	com	r0
 902:	06 d0       	rcall	.+12     	; 0x910 <__divmodhi4_neg1>
 904:	77 fd       	sbrc	r23, 7
 906:	08 d0       	rcall	.+16     	; 0x918 <__divmodhi4_neg2>
 908:	0b d0       	rcall	.+22     	; 0x920 <__udivmodhi4>
 90a:	07 fc       	sbrc	r0, 7
 90c:	05 d0       	rcall	.+10     	; 0x918 <__divmodhi4_neg2>
 90e:	3e f4       	brtc	.+14     	; 0x91e <__divmodhi4_exit>

00000910 <__divmodhi4_neg1>:
 910:	90 95       	com	r25
 912:	81 95       	neg	r24
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	08 95       	ret

00000918 <__divmodhi4_neg2>:
 918:	70 95       	com	r23
 91a:	61 95       	neg	r22
 91c:	7f 4f       	sbci	r23, 0xFF	; 255

0000091e <__divmodhi4_exit>:
 91e:	08 95       	ret

00000920 <__udivmodhi4>:
 920:	aa 1b       	sub	r26, r26
 922:	bb 1b       	sub	r27, r27
 924:	51 e1       	ldi	r21, 0x11	; 17
 926:	07 c0       	rjmp	.+14     	; 0x936 <__udivmodhi4_ep>

00000928 <__udivmodhi4_loop>:
 928:	aa 1f       	adc	r26, r26
 92a:	bb 1f       	adc	r27, r27
 92c:	a6 17       	cp	r26, r22
 92e:	b7 07       	cpc	r27, r23
 930:	10 f0       	brcs	.+4      	; 0x936 <__udivmodhi4_ep>
 932:	a6 1b       	sub	r26, r22
 934:	b7 0b       	sbc	r27, r23

00000936 <__udivmodhi4_ep>:
 936:	88 1f       	adc	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	5a 95       	dec	r21
 93c:	a9 f7       	brne	.-22     	; 0x928 <__udivmodhi4_loop>
 93e:	80 95       	com	r24
 940:	90 95       	com	r25
 942:	bc 01       	movw	r22, r24
 944:	cd 01       	movw	r24, r26
 946:	08 95       	ret

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
