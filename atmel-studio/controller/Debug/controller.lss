
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000a4a  00000ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800126  00800126  00000b04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b23  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd5  00000000  00000000  0000388f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f5  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  0000565c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4d  00000000  00000000  00005a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc5  00000000  00000000  0000649d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007262  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e4       	ldi	r30, 0x4A	; 74
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 32       	cpi	r26, 0x26	; 38
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 35       	cpi	r26, 0x5B	; 91
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  ea:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <process>:
static status_display_t display;
static instruction_t instruction;

void process(void)
{
    backplane_read();
  f2:	0e 94 25 01 	call	0x24a	; 0x24a <backplane_read>

    status_state_t* state = front_status_get();
  f6:	0e 94 c7 01 	call	0x38e	; 0x38e <front_status_get>
  fa:	fc 01       	movw	r30, r24

    // display.memory.enable = !!(backplane.memory.read || backplane.memory.write);
    display.memory.mmio = backplane.memory.mmio_enable;
  fc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <backplane+0x4>
 100:	91 fb       	bst	r25, 1
 102:	88 27       	eor	r24, r24
 104:	80 f9       	bld	r24, 0
 106:	ab e3       	ldi	r26, 0x3B	; 59
 108:	b1 e0       	ldi	r27, 0x01	; 1
 10a:	2c 91       	ld	r18, X
 10c:	80 fb       	bst	r24, 0
 10e:	22 f9       	bld	r18, 2
    display.memory.read = backplane.memory.read;
 110:	93 fb       	bst	r25, 3
 112:	33 27       	eor	r19, r19
 114:	30 f9       	bld	r19, 0
 116:	2e 7f       	andi	r18, 0xFE	; 254
    display.memory.write = backplane.memory.write;
 118:	92 95       	swap	r25
 11a:	91 70       	andi	r25, 0x01	; 1
 11c:	23 2b       	or	r18, r19
 11e:	90 fb       	bst	r25, 0
 120:	21 f9       	bld	r18, 1
 122:	2c 93       	st	X, r18

    display.clock.clock_speed = state->clock.clock_speed;
 124:	90 81       	ld	r25, Z
 126:	96 95       	lsr	r25
 128:	96 95       	lsr	r25
 12a:	21 81       	ldd	r18, Z+1	; 0x01
 12c:	82 2f       	mov	r24, r18
 12e:	82 95       	swap	r24
 130:	88 0f       	add	r24, r24
 132:	88 0f       	add	r24, r24
 134:	80 7c       	andi	r24, 0xC0	; 192
 136:	89 2b       	or	r24, r25
 138:	ec e3       	ldi	r30, 0x3C	; 60
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	38 2f       	mov	r19, r24
 13e:	33 0f       	add	r19, r19
 140:	33 0f       	add	r19, r19
 142:	90 81       	ld	r25, Z
 144:	93 70       	andi	r25, 0x03	; 3
 146:	93 2b       	or	r25, r19
 148:	90 83       	st	Z, r25
 14a:	2c 7f       	andi	r18, 0xFC	; 252
 14c:	82 95       	swap	r24
 14e:	86 95       	lsr	r24
 150:	86 95       	lsr	r24
 152:	83 70       	andi	r24, 0x03	; 3
 154:	82 2b       	or	r24, r18
 156:	81 83       	std	Z+1, r24	; 0x01

    front_status_set(&display);
 158:	8a e3       	ldi	r24, 0x3A	; 58
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 ca 01 	call	0x394	; 0x394 <front_status_set>

    instruction.alu.add = !!(backplane.alu == ALU_ADD);
 160:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <backplane+0x2>
 164:	80 7e       	andi	r24, 0xE0	; 224
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	80 36       	cpi	r24, 0x60	; 96
 16a:	09 f0       	breq	.+2      	; 0x16e <process+0x7c>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	ef e2       	ldi	r30, 0x2F	; 47
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	20 fb       	bst	r18, 0
 176:	90 f9       	bld	r25, 0
 178:	91 83       	std	Z+1, r25	; 0x01
    instruction.alu.sub = !!(backplane.alu == ALU_SUB);
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	09 f0       	breq	.+2      	; 0x182 <process+0x90>
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	ef e2       	ldi	r30, 0x2F	; 47
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	90 81       	ld	r25, Z
 188:	20 fb       	bst	r18, 0
 18a:	97 f9       	bld	r25, 7
 18c:	90 83       	st	Z, r25
    instruction.alu.and = !!(backplane.alu == ALU_AND);
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	80 3c       	cpi	r24, 0xC0	; 192
 192:	09 f0       	breq	.+2      	; 0x196 <process+0xa4>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	ef e2       	ldi	r30, 0x2F	; 47
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	20 fb       	bst	r18, 0
 19e:	93 f9       	bld	r25, 3
 1a0:	91 83       	std	Z+1, r25	; 0x01
    instruction.alu.or = !!(backplane.alu == ALU_OR);
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	80 3a       	cpi	r24, 0xA0	; 160
 1a6:	09 f0       	breq	.+2      	; 0x1aa <process+0xb8>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	ef e2       	ldi	r30, 0x2F	; 47
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	20 fb       	bst	r18, 0
 1b2:	92 f9       	bld	r25, 2
 1b4:	91 83       	std	Z+1, r25	; 0x01
    instruction.alu.xor = !!(backplane.alu == ALU_XOR);
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	80 38       	cpi	r24, 0x80	; 128
 1ba:	09 f0       	breq	.+2      	; 0x1be <process+0xcc>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	ef e2       	ldi	r30, 0x2F	; 47
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	20 fb       	bst	r18, 0
 1c6:	91 f9       	bld	r25, 1
 1c8:	91 83       	std	Z+1, r25	; 0x01
    instruction.alu.clr = !!(backplane.alu == ALU_CLEAR);
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	81 11       	cpse	r24, r1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	ef e2       	ldi	r30, 0x2F	; 47
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	80 81       	ld	r24, Z
 1d6:	90 fb       	bst	r25, 0
 1d8:	86 f9       	bld	r24, 6
 1da:	80 83       	st	Z, r24

    frontend_update();
 1dc:	0e 94 ef 01 	call	0x3de	; 0x3de <frontend_update>
 1e0:	08 95       	ret

000001e2 <main>:
}

int main(void)
{
    backplane_init();
 1e2:	0e 94 05 01 	call	0x20a	; 0x20a <backplane_init>
    frontend_init();  
 1e6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <frontend_init>

    front_instruction_set(&instruction);
 1ea:	86 e2       	ldi	r24, 0x26	; 38
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 c2 01 	call	0x384	; 0x384 <front_instruction_set>

    while (1)
    {
        process();
 1f2:	0e 94 79 00 	call	0xf2	; 0xf2 <process>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	80 e7       	ldi	r24, 0x70	; 112
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x1a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x24>
 206:	00 00       	nop
 208:	f4 cf       	rjmp	.-24     	; 0x1f2 <main+0x10>

0000020a <backplane_init>:
#define MCP_ADDR2 2

void backplane_init(void)
{
    // The MCP23S17 IO expanders are connected on the first spi bus
    spi0_init(SPI_MASTER, SPI_128X);
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 2f 02 	call	0x45e	; 0x45e <spi0_init>
    mcp23_init(spi0_tranceive);
 212:	8d e6       	ldi	r24, 0x6D	; 109
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	0e 94 82 04 	call	0x904	; 0x904 <mcp23_init>

    // Enable addressing mode of the expanders (the same CS is used for all devices)
    mcp23_write(0, MCP23_IOCON, MCP23_HAEN);
 21a:	48 e0       	ldi	r20, 0x08	; 8
 21c:	6a e0       	ldi	r22, 0x0A	; 10
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 93 04 	call	0x926	; 0x926 <mcp23_write>
uint8_t mcp23_read(uint8_t addr, uint8_t reg);
uint16_t mcp23_read_wide(uint8_t addr, uint8_t reg);

inline void mcp23_ddr(uint8_t addr, uint16_t mask)
{
    mcp23_write_wide(addr, MCP23_IODIRA, ~mask);
 224:	4f ef       	ldi	r20, 0xFF	; 255
 226:	5f ef       	ldi	r21, 0xFF	; 255
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 bc 04 	call	0x978	; 0x978 <mcp23_write_wide>
 230:	4f ef       	ldi	r20, 0xFF	; 255
 232:	5f ef       	ldi	r21, 0xFF	; 255
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 bc 04 	call	0x978	; 0x978 <mcp23_write_wide>
 23c:	4f ef       	ldi	r20, 0xFF	; 255
 23e:	5f ef       	ldi	r21, 0xFF	; 255
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 bc 04 	call	0x978	; 0x978 <mcp23_write_wide>
 248:	08 95       	ret

0000024a <backplane_read>:
    //mcp23_write_wide(MCP_ADDR1, MCP23_IPOLA, 0);
    //mcp23_write_wide(MCP_ADDR2, MCP23_IPOLA, 0);
}

void backplane_read(void)
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <backplane_read+0xa>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
    // read the first chip, contains the C bus and target
    volatile uint16_t content = mcp23_read_wide(MCP_ADDR0, MCP23_GPIOA);
 258:	62 e1       	ldi	r22, 0x12	; 18
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <mcp23_read_wide>
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	89 83       	std	Y+1, r24	; 0x01
    // mask out the 12 bits of the C bus
    backplane.c_bus = content & 0x0FFF;
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	9a 81       	ldd	r25, Y+2	; 0x02
 268:	09 e4       	ldi	r16, 0x49	; 73
 26a:	11 e0       	ldi	r17, 0x01	; 1
 26c:	d8 01       	movw	r26, r16
 26e:	8c 93       	st	X, r24
 270:	ea e4       	ldi	r30, 0x4A	; 74
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	9f 70       	andi	r25, 0x0F	; 15
 276:	80 81       	ld	r24, Z
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	89 2b       	or	r24, r25
 27c:	80 83       	st	Z, r24
    // get the upper 4 bits for target decoder
    backplane.target_decoder = content >> 12;  
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	3a 81       	ldd	r19, Y+2	; 0x02
 282:	93 2f       	mov	r25, r19
 284:	90 7f       	andi	r25, 0xF0	; 240
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	89 2b       	or	r24, r25
 28a:	80 83       	st	Z, r24

    // read the second expander
    content = mcp23_read_wide(MCP_ADDR1, MCP23_GPIOA);
 28c:	62 e1       	ldi	r22, 0x12	; 18
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 e7 04 	call	0x9ce	; 0x9ce <mcp23_read_wide>
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
    backplane.alu = (content & 0x07);
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	eb e4       	ldi	r30, 0x4B	; 75
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	82 95       	swap	r24
 2a2:	88 0f       	add	r24, r24
 2a4:	80 7e       	andi	r24, 0xE0	; 224
 2a6:	20 81       	ld	r18, Z
 2a8:	2f 71       	andi	r18, 0x1F	; 31
 2aa:	28 2b       	or	r18, r24
 2ac:	20 83       	st	Z, r18
    *(uint8_t*)&backplane.memory = (content >> 8) & 0x1F;    
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	89 2f       	mov	r24, r25
 2b4:	8f 71       	andi	r24, 0x1F	; 31
 2b6:	d8 01       	movw	r26, r16
 2b8:	14 96       	adiw	r26, 0x04	; 4
 2ba:	8c 93       	st	X, r24
    backplane.condition = (content >> 5) & 0x07;
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	92 95       	swap	r25
 2c6:	82 95       	swap	r24
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	89 27       	eor	r24, r25
 2cc:	9f 70       	andi	r25, 0x0F	; 15
 2ce:	89 27       	eor	r24, r25
 2d0:	98 2f       	mov	r25, r24
 2d2:	97 70       	andi	r25, 0x07	; 7
 2d4:	82 2f       	mov	r24, r18
 2d6:	88 7f       	andi	r24, 0xF8	; 248
 2d8:	89 2b       	or	r24, r25
 2da:	80 83       	st	Z, r24
    backplane.condition_inverted = !!(content & 0x10);
 2dc:	29 81       	ldd	r18, Y+1	; 0x01
 2de:	3a 81       	ldd	r19, Y+2	; 0x02
 2e0:	32 95       	swap	r19
 2e2:	22 95       	swap	r18
 2e4:	2f 70       	andi	r18, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	3f 70       	andi	r19, 0x0F	; 15
 2ea:	23 27       	eor	r18, r19
 2ec:	20 fb       	bst	r18, 0
 2ee:	83 f9       	bld	r24, 3
 2f0:	80 83       	st	Z, r24
    backplane.carry = !!(content & 0x8000);
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
 2f6:	99 1f       	adc	r25, r25
 2f8:	99 27       	eor	r25, r25
 2fa:	99 1f       	adc	r25, r25
 2fc:	ec e4       	ldi	r30, 0x4C	; 76
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	80 81       	ld	r24, Z
 302:	90 fb       	bst	r25, 0
 304:	80 f9       	bld	r24, 0
 306:	80 83       	st	Z, r24
    backplane.sra = !!(content & 0x4000);
 308:	29 81       	ldd	r18, Y+1	; 0x01
 30a:	3a 81       	ldd	r19, Y+2	; 0x02
 30c:	24 e0       	ldi	r18, 0x04	; 4
 30e:	32 9f       	mul	r19, r18
 310:	21 2d       	mov	r18, r1
 312:	33 27       	eor	r19, r19
 314:	11 24       	eor	r1, r1
 316:	20 fb       	bst	r18, 0
 318:	81 f9       	bld	r24, 1
 31a:	80 83       	st	Z, r24
    backplane.srl = !!(content & 0x2000);
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	3a 81       	ldd	r19, Y+2	; 0x02
 320:	35 fb       	bst	r19, 5
 322:	99 27       	eor	r25, r25
 324:	90 f9       	bld	r25, 0
 326:	90 fb       	bst	r25, 0
 328:	82 f9       	bld	r24, 2
 32a:	80 83       	st	Z, r24

    // read the third expander
    content = mcp23_read_wide(MCP_ADDR2, MCP23_GPIOA);
 32c:	62 e1       	ldi	r22, 0x12	; 18
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 e7 04 	call	0x9ce	; 0x9ce <mcp23_read_wide>
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	89 83       	std	Y+1, r24	; 0x01
    backplane.left_decoder = content & 0x0F;
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	9a 81       	ldd	r25, Y+2	; 0x02
 33c:	ee e4       	ldi	r30, 0x4E	; 78
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	90 81       	ld	r25, Z
 344:	90 7f       	andi	r25, 0xF0	; 240
 346:	89 2b       	or	r24, r25
 348:	80 83       	st	Z, r24
    backplane.right_decoder = (content >> 4) & 0x0F;
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	3a 81       	ldd	r19, Y+2	; 0x02
 34e:	32 95       	swap	r19
 350:	22 95       	swap	r18
 352:	2f 70       	andi	r18, 0x0F	; 15
 354:	23 27       	eor	r18, r19
 356:	3f 70       	andi	r19, 0x0F	; 15
 358:	23 27       	eor	r18, r19
 35a:	22 95       	swap	r18
 35c:	20 7f       	andi	r18, 0xF0	; 240
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	82 2b       	or	r24, r18
 362:	80 83       	st	Z, r24
    //backplane.status_enable = 
}
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <delayed_tranceive_byte>:
static instruction_t* instruction;

instruction_t* front_instruction_get()
{
    return instruction;
}
 372:	ef ec       	ldi	r30, 0xCF	; 207
 374:	f7 e0       	ldi	r31, 0x07	; 7
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <delayed_tranceive_byte+0x4>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <delayed_tranceive_byte+0xa>
 37c:	00 00       	nop
 37e:	0e 94 25 02 	call	0x44a	; 0x44a <spi1_tranceive_byte>
 382:	08 95       	ret

00000384 <front_instruction_set>:

void front_instruction_set(instruction_t* instr)
{
    instruction = instr;
 384:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <instruction+0x1>
 388:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <instruction>
 38c:	08 95       	ret

0000038e <front_status_get>:
static status_display_t status_display;

status_state_t* front_status_get()
{
    return &status_state;
}
 38e:	82 e4       	ldi	r24, 0x42	; 66
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	08 95       	ret

00000394 <front_status_set>:

void front_status_set(status_display_t* display)
{
    status_display = *display;
 394:	fc 01       	movw	r30, r24
 396:	80 81       	ld	r24, Z
 398:	91 81       	ldd	r25, Z+1	; 0x01
 39a:	a2 81       	ldd	r26, Z+2	; 0x02
 39c:	b3 81       	ldd	r27, Z+3	; 0x03
 39e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <status_display>
 3a2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <status_display+0x1>
 3a6:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <status_display+0x2>
 3aa:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <status_display+0x3>
 3ae:	08 95       	ret

000003b0 <frontend_init>:

// ------ PUBLIC ------
void frontend_init(void)
{
    // init the Slave Selects pins
    FRONT_SS1_DDR |= FRONT_SS1_MASK;
 3b0:	6a 9a       	sbi	0x0d, 2	; 13
    FRONT_SS2_DDR |= FRONT_SS2_MASK;
 3b2:	3a 9a       	sbi	0x07, 2	; 7
    FRONT_SS3_DDR |= FRONT_SS3_MASK;
 3b4:	3b 9a       	sbi	0x07, 3	; 7

    DISABLE_FRONT1();
 3b6:	72 9a       	sbi	0x0e, 2	; 14
    DISABLE_FRONT2();
 3b8:	42 9a       	sbi	0x08, 2	; 8
    DISABLE_FRONT3();
 3ba:	43 9a       	sbi	0x08, 3	; 8

    // boards are connected on the SPI1 bus
    spi1_init(SPI_MASTER, SPI_128X);
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 4b 02 	call	0x496	; 0x496 <spi1_init>
    // hook into the SPI to delay the master
    spi1_state.tranceive_byte = delayed_tranceive_byte;
 3c4:	89 eb       	ldi	r24, 0xB9	; 185
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <__data_start+0x12>
 3cc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <__data_start+0x11>
    proto_init(spi1_tranceive, &spi1_state.on_completed);
 3d0:	6f e0       	ldi	r22, 0x0F	; 15
 3d2:	71 e0       	ldi	r23, 0x01	; 1
 3d4:	89 e7       	ldi	r24, 0x79	; 121
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <proto_init>
 3dc:	08 95       	ret

000003de <frontend_update>:
}

void frontend_update(void)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	27 97       	sbiw	r28, 0x07	; 7
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
}

static uint8_t update_instruction(void)
{
    // Assert the CS to speak to the right board
    ASSERT_FRONT2();
 3f2:	42 98       	cbi	0x08, 2	; 8

    // create the packets to tranceive
    proto_packet_t transmit = proto_create(2, (uint8_t*)instruction, sizeof(instruction_t));
 3f4:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <instruction>
 3f8:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <instruction+0x1>
 3fc:	44 e1       	ldi	r20, 0x14	; 20
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 06 04 	call	0x80c	; 0x80c <proto_create>
 404:	29 83       	std	Y+1, r18	; 0x01
 406:	3a 83       	std	Y+2, r19	; 0x02
 408:	4b 83       	std	Y+3, r20	; 0x03
 40a:	5c 83       	std	Y+4, r21	; 0x04
 40c:	6d 83       	std	Y+5, r22	; 0x05
 40e:	7e 83       	std	Y+6, r23	; 0x06
 410:	8f 83       	std	Y+7, r24	; 0x07
    proto_update_crc(&transmit);
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	0e 94 33 04 	call	0x866	; 0x866 <proto_update_crc>
    return proto_tranceive(0, receive);
}

static inline int8_t proto_transmit(const proto_packet_t* transmit)
{
    return proto_tranceive(transmit, 0);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	0e 94 3d 04 	call	0x87a	; 0x87a <proto_tranceive>

    // do the tranceive (blocking)
    proto_transmit(&transmit);
        
    // done communicating
    DISABLE_FRONT2();
 426:	42 9a       	sbi	0x08, 2	; 8
        
    // get the status of the tranceivement (IDLE -> success; FAILED -> incorrect CRC)
    proto_status_t status = proto_status();
 428:	0e 94 02 04 	call	0x804	; 0x804 <proto_status>
void frontend_update(void)
{
    //update_register(status_state.selected);
    update_instruction();
    //update_status();
}
 42c:	27 96       	adiw	r28, 0x07	; 7
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <spi0_tranceive_byte>:
}

int8_t spi0_transmit(const uint8_t* buffer, uint8_t len)
{
    return spi0_tranceive(buffer, len, NULL, 0);
}
 43e:	8e bd       	out	0x2e, r24	; 46
 440:	0d b4       	in	r0, 0x2d	; 45
 442:	07 fe       	sbrs	r0, 7
 444:	fd cf       	rjmp	.-6      	; 0x440 <spi0_tranceive_byte+0x2>
 446:	8e b5       	in	r24, 0x2e	; 46
 448:	08 95       	ret

0000044a <spi1_tranceive_byte>:
 44a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 44e:	ed ea       	ldi	r30, 0xAD	; 173
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	88 23       	and	r24, r24
 456:	ec f7       	brge	.-6      	; 0x452 <spi1_tranceive_byte+0x8>
 458:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 45c:	08 95       	ret

0000045e <spi0_init>:
 45e:	28 2f       	mov	r18, r24
 460:	23 70       	andi	r18, 0x03	; 3
 462:	eb e1       	ldi	r30, 0x1B	; 27
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	90 81       	ld	r25, Z
 468:	9c 7f       	andi	r25, 0xFC	; 252
 46a:	92 2b       	or	r25, r18
 46c:	90 83       	st	Z, r25
 46e:	81 11       	cpse	r24, r1
 470:	07 c0       	rjmp	.+14     	; 0x480 <spi0_init+0x22>
 472:	23 9a       	sbi	0x04, 3	; 4
 474:	25 9a       	sbi	0x04, 5	; 4
 476:	22 9a       	sbi	0x04, 2	; 4
 478:	2a 9a       	sbi	0x05, 2	; 5
 47a:	8c b5       	in	r24, 0x2c	; 44
 47c:	80 61       	ori	r24, 0x10	; 16
 47e:	8c bd       	out	0x2c, r24	; 44
 480:	62 ff       	sbrs	r22, 2
 482:	03 c0       	rjmp	.+6      	; 0x48a <spi0_init+0x2c>
 484:	8d b5       	in	r24, 0x2d	; 45
 486:	81 60       	ori	r24, 0x01	; 1
 488:	8d bd       	out	0x2d, r24	; 45
 48a:	8c b5       	in	r24, 0x2c	; 44
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	63 70       	andi	r22, 0x03	; 3
 490:	68 2b       	or	r22, r24
 492:	6c bd       	out	0x2c, r22	; 44
 494:	08 95       	ret

00000496 <spi1_init>:
 496:	28 2f       	mov	r18, r24
 498:	23 70       	andi	r18, 0x03	; 3
 49a:	e8 e0       	ldi	r30, 0x08	; 8
 49c:	f1 e0       	ldi	r31, 0x01	; 1
 49e:	90 81       	ld	r25, Z
 4a0:	9c 7f       	andi	r25, 0xFC	; 252
 4a2:	92 2b       	or	r25, r18
 4a4:	90 83       	st	Z, r25
 4a6:	81 11       	cpse	r24, r1
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <spi1_init+0x26>
 4aa:	6b 9a       	sbi	0x0d, 3	; 13
 4ac:	39 9a       	sbi	0x07, 1	; 7
 4ae:	6a 9a       	sbi	0x0d, 2	; 13
 4b0:	72 9a       	sbi	0x0e, 2	; 14
 4b2:	ec ea       	ldi	r30, 0xAC	; 172
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	80 61       	ori	r24, 0x10	; 16
 4ba:	80 83       	st	Z, r24
 4bc:	62 ff       	sbrs	r22, 2
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <spi1_init+0x34>
 4c0:	ed ea       	ldi	r30, 0xAD	; 173
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	80 83       	st	Z, r24
 4ca:	ec ea       	ldi	r30, 0xAC	; 172
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	63 70       	andi	r22, 0x03	; 3
 4d4:	68 2b       	or	r22, r24
 4d6:	60 83       	st	Z, r22
 4d8:	08 95       	ret

000004da <spi0_tranceive>:
 4da:	e3 e1       	ldi	r30, 0x13	; 19
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	91 83       	std	Z+1, r25	; 0x01
 4e0:	80 83       	st	Z, r24
 4e2:	64 83       	std	Z+4, r22	; 0x04
 4e4:	53 83       	std	Z+3, r21	; 0x03
 4e6:	42 83       	std	Z+2, r20	; 0x02
 4e8:	25 83       	std	Z+5, r18	; 0x05
 4ea:	cf 01       	movw	r24, r30
 4ec:	0e 94 85 02 	call	0x50a	; 0x50a <_spi_tranceive>
 4f0:	08 95       	ret

000004f2 <spi1_tranceive>:

int8_t spi1_tranceive(const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
    spi1_state.tran_buf = tran_buf;
 4f2:	e0 e0       	ldi	r30, 0x00	; 0
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	91 83       	std	Z+1, r25	; 0x01
 4f8:	80 83       	st	Z, r24
    spi1_state.tran_len = tran_len;
 4fa:	64 83       	std	Z+4, r22	; 0x04
    spi1_state.recv_buf = recv_buf;
 4fc:	53 83       	std	Z+3, r21	; 0x03
 4fe:	42 83       	std	Z+2, r20	; 0x02
    spi1_state.recv_len = recv_len;
 500:	25 83       	std	Z+5, r18	; 0x05

    return _spi_tranceive(&spi1_state);
 502:	cf 01       	movw	r24, r30
 504:	0e 94 85 02 	call	0x50a	; 0x50a <_spi_tranceive>
}
 508:	08 95       	ret

0000050a <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
 50a:	ff 92       	push	r15
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	fc 01       	movw	r30, r24
    uint8_t len = MAX(state->tran_len, state->recv_len);
 516:	94 81       	ldd	r25, Z+4	; 0x04
 518:	85 81       	ldd	r24, Z+5	; 0x05
 51a:	89 17       	cp	r24, r25
 51c:	10 f4       	brcc	.+4      	; 0x522 <_spi_tranceive+0x18>
 51e:	d4 81       	ldd	r29, Z+4	; 0x04
 520:	01 c0       	rjmp	.+2      	; 0x524 <_spi_tranceive+0x1a>
 522:	d5 81       	ldd	r29, Z+5	; 0x05
    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 524:	80 85       	ldd	r24, Z+8	; 0x08
 526:	83 70       	andi	r24, 0x03	; 3
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	e9 f4       	brne	.+58     	; 0x566 <_spi_tranceive+0x5c>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 52c:	a5 85       	ldd	r26, Z+13	; 0x0d
 52e:	b6 85       	ldd	r27, Z+14	; 0x0e
 530:	8c 91       	ld	r24, X
 532:	88 23       	and	r24, r24
 534:	9c f0       	brlt	.+38     	; 0x55c <_spi_tranceive+0x52>
        {
            *state->spdr = state->tran_len ? state->tran_buf[0] : 0xFF;
 536:	a1 85       	ldd	r26, Z+9	; 0x09
 538:	b2 85       	ldd	r27, Z+10	; 0x0a
 53a:	84 81       	ldd	r24, Z+4	; 0x04
 53c:	88 23       	and	r24, r24
 53e:	21 f0       	breq	.+8      	; 0x548 <_spi_tranceive+0x3e>
 540:	c0 81       	ld	r28, Z
 542:	d1 81       	ldd	r29, Z+1	; 0x01
 544:	88 81       	ld	r24, Y
 546:	01 c0       	rjmp	.+2      	; 0x54a <_spi_tranceive+0x40>
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 54c:	05 84       	ldd	r0, Z+13	; 0x0d
 54e:	f6 85       	ldd	r31, Z+14	; 0x0e
 550:	e0 2d       	mov	r30, r0
 552:	80 81       	ld	r24, Z
 554:	80 68       	ori	r24, 0x80	; 128
 556:	80 83       	st	Z, r24

            return SPI_PENDING;
 558:	8e ef       	ldi	r24, 0xFE	; 254
 55a:	37 c0       	rjmp	.+110    	; 0x5ca <_spi_tranceive+0xc0>
        }

        *state->spcr &= ~(1 << SPIF);
 55c:	8c 91       	ld	r24, X
 55e:	8f 77       	andi	r24, 0x7F	; 127
 560:	8c 93       	st	X, r24
        ++i;
 562:	c1 e0       	ldi	r28, 0x01	; 1
 564:	01 c0       	rjmp	.+2      	; 0x568 <_spi_tranceive+0x5e>
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
    uint8_t len = MAX(state->tran_len, state->recv_len);
    uint8_t i = 0;
 566:	c0 e0       	ldi	r28, 0x00	; 0
 568:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 56a:	cd 17       	cp	r28, r29
 56c:	10 f5       	brcc	.+68     	; 0x5b2 <_spi_tranceive+0xa8>
	{
		uint8_t tran = i < state->tran_len ? state->tran_buf[i] : 0xFF;
 56e:	ff 24       	eor	r15, r15
 570:	fa 94       	dec	r15
 572:	d8 01       	movw	r26, r16
 574:	14 96       	adiw	r26, 0x04	; 4
 576:	8c 91       	ld	r24, X
 578:	14 97       	sbiw	r26, 0x04	; 4
 57a:	c8 17       	cp	r28, r24
 57c:	30 f4       	brcc	.+12     	; 0x58a <_spi_tranceive+0x80>
 57e:	ed 91       	ld	r30, X+
 580:	fc 91       	ld	r31, X
 582:	ec 0f       	add	r30, r28
 584:	f1 1d       	adc	r31, r1
 586:	80 81       	ld	r24, Z
 588:	01 c0       	rjmp	.+2      	; 0x58c <_spi_tranceive+0x82>
 58a:	8f 2d       	mov	r24, r15
	    uint8_t recv = state->tranceive_byte(tran);	
 58c:	d8 01       	movw	r26, r16
 58e:	51 96       	adiw	r26, 0x11	; 17
 590:	ed 91       	ld	r30, X+
 592:	fc 91       	ld	r31, X
 594:	52 97       	sbiw	r26, 0x12	; 18
 596:	09 95       	icall
		
		if (i < state->recv_len)
 598:	f8 01       	movw	r30, r16
 59a:	95 81       	ldd	r25, Z+5	; 0x05
 59c:	c9 17       	cp	r28, r25
 59e:	30 f4       	brcc	.+12     	; 0x5ac <_spi_tranceive+0xa2>
		    state->recv_buf[i] = recv;
 5a0:	02 80       	ldd	r0, Z+2	; 0x02
 5a2:	f3 81       	ldd	r31, Z+3	; 0x03
 5a4:	e0 2d       	mov	r30, r0
 5a6:	ec 0f       	add	r30, r28
 5a8:	f1 1d       	adc	r31, r1
 5aa:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 5ac:	cf 5f       	subi	r28, 0xFF	; 255
 5ae:	cd 17       	cp	r28, r29
 5b0:	00 f3       	brcs	.-64     	; 0x572 <_spi_tranceive+0x68>
		
		if (i < state->recv_len)
		    state->recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 5b2:	d8 01       	movw	r26, r16
 5b4:	1f 96       	adiw	r26, 0x0f	; 15
 5b6:	ed 91       	ld	r30, X+
 5b8:	fc 91       	ld	r31, X
 5ba:	50 97       	sbiw	r26, 0x10	; 16
 5bc:	30 97       	sbiw	r30, 0x00	; 0
 5be:	21 f0       	breq	.+8      	; 0x5c8 <_spi_tranceive+0xbe>
        state->on_completed(state);
 5c0:	c8 01       	movw	r24, r16
 5c2:	09 95       	icall

    return SPI_OK;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <_spi_tranceive+0xc0>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
}   
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	08 95       	ret

000005d6 <calculate_crc>:
}

int8_t proto_completed()
{
    return state.status == IDLE;
}
 5d6:	fc 01       	movw	r30, r24
 5d8:	80 81       	ld	r24, Z
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	3f ef       	ldi	r19, 0xFF	; 255
 5de:	28 27       	eor	r18, r24
 5e0:	02 2e       	mov	r0, r18
 5e2:	22 95       	swap	r18
 5e4:	20 7f       	andi	r18, 0xF0	; 240
 5e6:	20 25       	eor	r18, r0
 5e8:	03 2e       	mov	r0, r19
 5ea:	32 2f       	mov	r19, r18
 5ec:	22 95       	swap	r18
 5ee:	2f 70       	andi	r18, 0x0F	; 15
 5f0:	02 26       	eor	r0, r18
 5f2:	26 95       	lsr	r18
 5f4:	32 27       	eor	r19, r18
 5f6:	23 27       	eor	r18, r19
 5f8:	22 0f       	add	r18, r18
 5fa:	22 0f       	add	r18, r18
 5fc:	22 0f       	add	r18, r18
 5fe:	20 25       	eor	r18, r0
 600:	41 81       	ldd	r20, Z+1	; 0x01
 602:	c9 01       	movw	r24, r18
 604:	84 27       	eor	r24, r20
 606:	08 2e       	mov	r0, r24
 608:	82 95       	swap	r24
 60a:	80 7f       	andi	r24, 0xF0	; 240
 60c:	80 25       	eor	r24, r0
 60e:	09 2e       	mov	r0, r25
 610:	98 2f       	mov	r25, r24
 612:	82 95       	swap	r24
 614:	8f 70       	andi	r24, 0x0F	; 15
 616:	08 26       	eor	r0, r24
 618:	86 95       	lsr	r24
 61a:	98 27       	eor	r25, r24
 61c:	89 27       	eor	r24, r25
 61e:	88 0f       	add	r24, r24
 620:	88 0f       	add	r24, r24
 622:	88 0f       	add	r24, r24
 624:	80 25       	eor	r24, r0
 626:	44 23       	and	r20, r20
 628:	f9 f0       	breq	.+62     	; 0x668 <calculate_crc+0x92>
 62a:	02 80       	ldd	r0, Z+2	; 0x02
 62c:	f3 81       	ldd	r31, Z+3	; 0x03
 62e:	e0 2d       	mov	r30, r0
 630:	41 50       	subi	r20, 0x01	; 1
 632:	24 2f       	mov	r18, r20
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	2f 5f       	subi	r18, 0xFF	; 255
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	2e 0f       	add	r18, r30
 63c:	3f 1f       	adc	r19, r31
 63e:	41 91       	ld	r20, Z+
 640:	84 27       	eor	r24, r20
 642:	08 2e       	mov	r0, r24
 644:	82 95       	swap	r24
 646:	80 7f       	andi	r24, 0xF0	; 240
 648:	80 25       	eor	r24, r0
 64a:	09 2e       	mov	r0, r25
 64c:	98 2f       	mov	r25, r24
 64e:	82 95       	swap	r24
 650:	8f 70       	andi	r24, 0x0F	; 15
 652:	08 26       	eor	r0, r24
 654:	86 95       	lsr	r24
 656:	98 27       	eor	r25, r24
 658:	89 27       	eor	r24, r25
 65a:	88 0f       	add	r24, r24
 65c:	88 0f       	add	r24, r24
 65e:	88 0f       	add	r24, r24
 660:	80 25       	eor	r24, r0
 662:	e2 17       	cp	r30, r18
 664:	f3 07       	cpc	r31, r19
 666:	59 f7       	brne	.-42     	; 0x63e <calculate_crc+0x68>
 668:	08 95       	ret

0000066a <completed>:
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	e0 e5       	ldi	r30, 0x50	; 80
 670:	f1 e0       	ldi	r31, 0x01	; 1
 672:	c3 81       	ldd	r28, Z+3	; 0x03
 674:	d4 81       	ldd	r29, Z+4	; 0x04
 676:	a5 81       	ldd	r26, Z+5	; 0x05
 678:	b6 81       	ldd	r27, Z+6	; 0x06
 67a:	20 81       	ld	r18, Z
 67c:	27 70       	andi	r18, 0x07	; 7
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	23 30       	cpi	r18, 0x03	; 3
 682:	31 05       	cpc	r19, r1
 684:	09 f4       	brne	.+2      	; 0x688 <completed+0x1e>
 686:	4e c0       	rjmp	.+156    	; 0x724 <completed+0xba>
 688:	24 30       	cpi	r18, 0x04	; 4
 68a:	31 05       	cpc	r19, r1
 68c:	09 f4       	brne	.+2      	; 0x690 <completed+0x26>
 68e:	7d c0       	rjmp	.+250    	; 0x78a <completed+0x120>
 690:	22 30       	cpi	r18, 0x02	; 2
 692:	31 05       	cpc	r19, r1
 694:	09 f0       	breq	.+2      	; 0x698 <completed+0x2e>
 696:	ac c0       	rjmp	.+344    	; 0x7f0 <completed+0x186>
 698:	10 97       	sbiw	r26, 0x00	; 0
 69a:	01 f1       	breq	.+64     	; 0x6dc <completed+0x72>
 69c:	9c 91       	ld	r25, X
 69e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <state+0x1>
 6a2:	98 17       	cp	r25, r24
 6a4:	29 f0       	breq	.+10     	; 0x6b0 <completed+0x46>
 6a6:	80 81       	ld	r24, Z
 6a8:	88 7f       	andi	r24, 0xF8	; 248
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	80 83       	st	Z, r24
 6ae:	a0 c0       	rjmp	.+320    	; 0x7f0 <completed+0x186>
 6b0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <state+0x2>
 6b4:	11 96       	adiw	r26, 0x01	; 1
 6b6:	9c 91       	ld	r25, X
 6b8:	11 97       	sbiw	r26, 0x01	; 1
 6ba:	98 17       	cp	r25, r24
 6bc:	40 f4       	brcc	.+16     	; 0x6ce <completed+0x64>
 6be:	16 96       	adiw	r26, 0x06	; 6
 6c0:	8c 91       	ld	r24, X
 6c2:	16 97       	sbiw	r26, 0x06	; 6
 6c4:	81 60       	ori	r24, 0x01	; 1
 6c6:	16 96       	adiw	r26, 0x06	; 6
 6c8:	8c 93       	st	X, r24
 6ca:	16 97       	sbiw	r26, 0x06	; 6
 6cc:	7a c0       	rjmp	.+244    	; 0x7c2 <completed+0x158>
 6ce:	89 17       	cp	r24, r25
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <completed+0x6a>
 6d2:	77 c0       	rjmp	.+238    	; 0x7c2 <completed+0x158>
 6d4:	11 96       	adiw	r26, 0x01	; 1
 6d6:	8c 93       	st	X, r24
 6d8:	11 97       	sbiw	r26, 0x01	; 1
 6da:	73 c0       	rjmp	.+230    	; 0x7c2 <completed+0x158>
 6dc:	e0 e5       	ldi	r30, 0x50	; 80
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	80 81       	ld	r24, Z
 6e2:	88 7f       	andi	r24, 0xF8	; 248
 6e4:	83 60       	ori	r24, 0x03	; 3
 6e6:	80 83       	st	Z, r24
 6e8:	20 97       	sbiw	r28, 0x00	; 0
 6ea:	81 f4       	brne	.+32     	; 0x70c <completed+0xa2>
 6ec:	81 c0       	rjmp	.+258    	; 0x7f0 <completed+0x186>
 6ee:	12 96       	adiw	r26, 0x02	; 2
 6f0:	4d 91       	ld	r20, X+
 6f2:	5c 91       	ld	r21, X
 6f4:	13 97       	sbiw	r26, 0x03	; 3
 6f6:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 6fa:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 6fe:	11 96       	adiw	r26, 0x01	; 1
 700:	2c 91       	ld	r18, X
 702:	69 81       	ldd	r22, Y+1	; 0x01
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	9b 81       	ldd	r25, Y+3	; 0x03
 708:	09 95       	icall
 70a:	72 c0       	rjmp	.+228    	; 0x7f0 <completed+0x186>
 70c:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 710:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	69 81       	ldd	r22, Y+1	; 0x01
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	9b 81       	ldd	r25, Y+3	; 0x03
 720:	09 95       	icall
 722:	66 c0       	rjmp	.+204    	; 0x7f0 <completed+0x186>
 724:	e0 e5       	ldi	r30, 0x50	; 80
 726:	f1 e0       	ldi	r31, 0x01	; 1
 728:	80 81       	ld	r24, Z
 72a:	88 7f       	andi	r24, 0xF8	; 248
 72c:	84 60       	ori	r24, 0x04	; 4
 72e:	80 83       	st	Z, r24
 730:	20 97       	sbiw	r28, 0x00	; 0
 732:	79 f0       	breq	.+30     	; 0x752 <completed+0xe8>
 734:	10 97       	sbiw	r26, 0x00	; 0
 736:	e9 f0       	breq	.+58     	; 0x772 <completed+0x108>
 738:	ad 01       	movw	r20, r26
 73a:	4c 5f       	subi	r20, 0xFC	; 252
 73c:	5f 4f       	sbci	r21, 0xFF	; 255
 73e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 742:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 746:	22 e0       	ldi	r18, 0x02	; 2
 748:	62 e0       	ldi	r22, 0x02	; 2
 74a:	ce 01       	movw	r24, r28
 74c:	04 96       	adiw	r24, 0x04	; 4
 74e:	09 95       	icall
 750:	4f c0       	rjmp	.+158    	; 0x7f0 <completed+0x186>
 752:	10 97       	sbiw	r26, 0x00	; 0
 754:	09 f4       	brne	.+2      	; 0x758 <completed+0xee>
 756:	4c c0       	rjmp	.+152    	; 0x7f0 <completed+0x186>
 758:	ad 01       	movw	r20, r26
 75a:	4c 5f       	subi	r20, 0xFC	; 252
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 762:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 766:	22 e0       	ldi	r18, 0x02	; 2
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	09 95       	icall
 770:	3f c0       	rjmp	.+126    	; 0x7f0 <completed+0x186>
 772:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 776:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	40 e0       	ldi	r20, 0x00	; 0
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	62 e0       	ldi	r22, 0x02	; 2
 782:	ce 01       	movw	r24, r28
 784:	04 96       	adiw	r24, 0x04	; 4
 786:	09 95       	icall
 788:	33 c0       	rjmp	.+102    	; 0x7f0 <completed+0x186>
 78a:	00 00       	nop
 78c:	e0 e5       	ldi	r30, 0x50	; 80
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	80 81       	ld	r24, Z
 792:	88 7f       	andi	r24, 0xF8	; 248
 794:	80 83       	st	Z, r24
 796:	10 97       	sbiw	r26, 0x00	; 0
 798:	91 f0       	breq	.+36     	; 0x7be <completed+0x154>
 79a:	14 96       	adiw	r26, 0x04	; 4
 79c:	cd 91       	ld	r28, X+
 79e:	dc 91       	ld	r29, X
 7a0:	15 97       	sbiw	r26, 0x05	; 5
 7a2:	cd 01       	movw	r24, r26
 7a4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <calculate_crc>
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	c8 17       	cp	r28, r24
 7ac:	d9 07       	cpc	r29, r25
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <completed+0x148>
 7b0:	20 e0       	ldi	r18, 0x00	; 0
 7b2:	e0 e5       	ldi	r30, 0x50	; 80
 7b4:	f1 e0       	ldi	r31, 0x01	; 1
 7b6:	80 81       	ld	r24, Z
 7b8:	88 7f       	andi	r24, 0xF8	; 248
 7ba:	82 2b       	or	r24, r18
 7bc:	80 83       	st	Z, r24
 7be:	00 00       	nop
 7c0:	17 c0       	rjmp	.+46     	; 0x7f0 <completed+0x186>
 7c2:	e0 e5       	ldi	r30, 0x50	; 80
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
 7c6:	80 81       	ld	r24, Z
 7c8:	88 7f       	andi	r24, 0xF8	; 248
 7ca:	83 60       	ori	r24, 0x03	; 3
 7cc:	80 83       	st	Z, r24
 7ce:	20 97       	sbiw	r28, 0x00	; 0
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <completed+0x16a>
 7d2:	8d cf       	rjmp	.-230    	; 0x6ee <completed+0x84>
 7d4:	12 96       	adiw	r26, 0x02	; 2
 7d6:	4d 91       	ld	r20, X+
 7d8:	5c 91       	ld	r21, X
 7da:	13 97       	sbiw	r26, 0x03	; 3
 7dc:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 7e0:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 7e4:	11 96       	adiw	r26, 0x01	; 1
 7e6:	2c 91       	ld	r18, X
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	09 95       	icall
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

000007f6 <proto_init>:
 7f6:	e0 e5       	ldi	r30, 0x50	; 80
 7f8:	f1 e0       	ldi	r31, 0x01	; 1
 7fa:	90 87       	std	Z+8, r25	; 0x08
 7fc:	87 83       	std	Z+7, r24	; 0x07
 7fe:	72 87       	std	Z+10, r23	; 0x0a
 800:	61 87       	std	Z+9, r22	; 0x09
 802:	08 95       	ret

00000804 <proto_status>:

proto_status_t proto_status()
{
    return state.status;
 804:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <state>
}
 808:	87 70       	andi	r24, 0x07	; 7
 80a:	08 95       	ret

0000080c <proto_create>:

proto_packet_t proto_create(uint8_t id, uint8_t* payload, uint8_t len)
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
 814:	2e 97       	sbiw	r28, 0x0e	; 14
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	f8 94       	cli
 81a:	de bf       	out	0x3e, r29	; 62
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	cd bf       	out	0x3d, r28	; 61
    proto_packet_t packet =
 820:	fe 01       	movw	r30, r28
 822:	38 96       	adiw	r30, 0x08	; 8
 824:	97 e0       	ldi	r25, 0x07	; 7
 826:	df 01       	movw	r26, r30
 828:	1d 92       	st	X+, r1
 82a:	9a 95       	dec	r25
 82c:	e9 f7       	brne	.-6      	; 0x828 <proto_create+0x1c>
        .id = id,
        .payload = payload,
        .len = len
    };

    return packet;
 82e:	88 87       	std	Y+8, r24	; 0x08
 830:	49 87       	std	Y+9, r20	; 0x09
 832:	7b 87       	std	Y+11, r23	; 0x0b
 834:	6a 87       	std	Y+10, r22	; 0x0a
 836:	87 e0       	ldi	r24, 0x07	; 7
 838:	de 01       	movw	r26, r28
 83a:	11 96       	adiw	r26, 0x01	; 1
 83c:	01 90       	ld	r0, Z+
 83e:	0d 92       	st	X+, r0
 840:	8a 95       	dec	r24
 842:	e1 f7       	brne	.-8      	; 0x83c <proto_create+0x30>
 844:	29 81       	ldd	r18, Y+1	; 0x01
 846:	3a 81       	ldd	r19, Y+2	; 0x02
 848:	4b 81       	ldd	r20, Y+3	; 0x03
 84a:	5c 81       	ldd	r21, Y+4	; 0x04
 84c:	6d 81       	ldd	r22, Y+5	; 0x05
 84e:	7e 81       	ldd	r23, Y+6	; 0x06
}
 850:	8f 81       	ldd	r24, Y+7	; 0x07
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	2e 96       	adiw	r28, 0x0e	; 14
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	de bf       	out	0x3e, r29	; 62
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	cd bf       	out	0x3d, r28	; 61
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <proto_update_crc>:

void proto_update_crc(proto_packet_t* packet)
{
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	ec 01       	movw	r28, r24
    packet->crc = calculate_crc(packet);
 86c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <calculate_crc>
 870:	9d 83       	std	Y+5, r25	; 0x05
 872:	8c 83       	std	Y+4, r24	; 0x04
}
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	08 95       	ret

0000087a <proto_tranceive>:

int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	dc 01       	movw	r26, r24
    //if (state.status != IDLE)
    //return PROTO_BUSY;

    *state.on_completed = completed;
 880:	e0 e5       	ldi	r30, 0x50	; 80
 882:	f1 e0       	ldi	r31, 0x01	; 1
 884:	c1 85       	ldd	r28, Z+9	; 0x09
 886:	d2 85       	ldd	r29, Z+10	; 0x0a
 888:	85 e3       	ldi	r24, 0x35	; 53
 88a:	93 e0       	ldi	r25, 0x03	; 3
 88c:	99 83       	std	Y+1, r25	; 0x01
 88e:	88 83       	st	Y, r24
    state.transmit = transmit;
 890:	b4 83       	std	Z+4, r27	; 0x04
 892:	a3 83       	std	Z+3, r26	; 0x03
    state.receive = receive;
 894:	76 83       	std	Z+6, r23	; 0x06
 896:	65 83       	std	Z+5, r22	; 0x05

    state.status = HEADER;
 898:	90 81       	ld	r25, Z
 89a:	98 7f       	andi	r25, 0xF8	; 248
 89c:	92 60       	ori	r25, 0x02	; 2
 89e:	90 83       	st	Z, r25

    // tranceive
    if (transmit != 0 && receive != 0)
 8a0:	10 97       	sbiw	r26, 0x00	; 0
 8a2:	69 f0       	breq	.+26     	; 0x8be <proto_tranceive+0x44>
 8a4:	67 2b       	or	r22, r23
 8a6:	c9 f0       	breq	.+50     	; 0x8da <proto_tranceive+0x60>
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 8a8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 8ac:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 8b0:	22 e0       	ldi	r18, 0x02	; 2
 8b2:	41 e5       	ldi	r20, 0x51	; 81
 8b4:	51 e0       	ldi	r21, 0x01	; 1
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	cd 01       	movw	r24, r26
 8ba:	09 95       	icall
 8bc:	20 c0       	rjmp	.+64     	; 0x8fe <proto_tranceive+0x84>
    // receive only
    if (transmit == 0 && receive != 0)
 8be:	67 2b       	or	r22, r23
 8c0:	b9 f0       	breq	.+46     	; 0x8f0 <proto_tranceive+0x76>
        return state.tranceive(0, 0, state.buf, PROTO_HEADER);
 8c2:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 8c6:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 8ca:	22 e0       	ldi	r18, 0x02	; 2
 8cc:	41 e5       	ldi	r20, 0x51	; 81
 8ce:	51 e0       	ldi	r21, 0x01	; 1
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	09 95       	icall
 8d8:	12 c0       	rjmp	.+36     	; 0x8fe <proto_tranceive+0x84>
    // transmit only
    if (transmit != 0 && receive == 0)
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, 0, 0);
 8da:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <state+0x7>
 8de:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <state+0x8>
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	40 e0       	ldi	r20, 0x00	; 0
 8e6:	50 e0       	ldi	r21, 0x00	; 0
 8e8:	62 e0       	ldi	r22, 0x02	; 2
 8ea:	cd 01       	movw	r24, r26
 8ec:	09 95       	icall
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <proto_tranceive+0x84>

    state.status = FAILED;
 8f0:	e0 e5       	ldi	r30, 0x50	; 80
 8f2:	f1 e0       	ldi	r31, 0x01	; 1
 8f4:	80 81       	ld	r24, Z
 8f6:	88 7f       	andi	r24, 0xF8	; 248
 8f8:	81 60       	ori	r24, 0x01	; 1
 8fa:	80 83       	st	Z, r24
    return PROTO_INV_ARG;
 8fc:	8b ef       	ldi	r24, 0xFB	; 251
}
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <mcp23_init>:
    _tranceive(buf_in, sizeof(buf_in), buf_out, sizeof(buf_out));

    MCP23_SS12_PORT |= MCP23_SS12_MASK; MCP23_SS3_PORT |= MCP23_SS3_MASK;

    return buf_out[2];
}
 904:	24 b1       	in	r18, 0x04	; 4
 906:	25 60       	ori	r18, 0x05	; 5
 908:	24 b9       	out	0x04, r18	; 4
 90a:	27 b1       	in	r18, 0x07	; 7
 90c:	24 61       	ori	r18, 0x14	; 20
 90e:	27 b9       	out	0x07, r18	; 7
 910:	25 b1       	in	r18, 0x05	; 5
 912:	25 60       	ori	r18, 0x05	; 5
 914:	25 b9       	out	0x05, r18	; 5
 916:	28 b1       	in	r18, 0x08	; 8
 918:	24 61       	ori	r18, 0x14	; 20
 91a:	28 b9       	out	0x08, r18	; 8
 91c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_tranceive+0x1>
 920:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_tranceive>
 924:	08 95       	ret

00000926 <mcp23_write>:
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	00 d0       	rcall	.+0      	; 0x92c <mcp23_write+0x6>
 92c:	1f 92       	push	r1
 92e:	cd b7       	in	r28, 0x3d	; 61
 930:	de b7       	in	r29, 0x3e	; 62
 932:	95 b1       	in	r25, 0x05	; 5
 934:	9a 7f       	andi	r25, 0xFA	; 250
 936:	95 b9       	out	0x05, r25	; 5
 938:	98 b1       	in	r25, 0x08	; 8
 93a:	9b 7e       	andi	r25, 0xEB	; 235
 93c:	98 b9       	out	0x08, r25	; 8
 93e:	87 70       	andi	r24, 0x07	; 7
 940:	88 0f       	add	r24, r24
 942:	80 64       	ori	r24, 0x40	; 64
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	6a 83       	std	Y+2, r22	; 0x02
 948:	4b 83       	std	Y+3, r20	; 0x03
 94a:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <_tranceive>
 94e:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <_tranceive+0x1>
 952:	20 e0       	ldi	r18, 0x00	; 0
 954:	40 e0       	ldi	r20, 0x00	; 0
 956:	50 e0       	ldi	r21, 0x00	; 0
 958:	63 e0       	ldi	r22, 0x03	; 3
 95a:	ce 01       	movw	r24, r28
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	09 95       	icall
 960:	85 b1       	in	r24, 0x05	; 5
 962:	85 60       	ori	r24, 0x05	; 5
 964:	85 b9       	out	0x05, r24	; 5
 966:	88 b1       	in	r24, 0x08	; 8
 968:	84 61       	ori	r24, 0x14	; 20
 96a:	88 b9       	out	0x08, r24	; 8
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	0f 90       	pop	r0
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	08 95       	ret

00000978 <mcp23_write_wide>:
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	00 d0       	rcall	.+0      	; 0x97e <mcp23_write_wide+0x6>
 97e:	00 d0       	rcall	.+0      	; 0x980 <mcp23_write_wide+0x8>
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	95 b1       	in	r25, 0x05	; 5
 986:	9a 7f       	andi	r25, 0xFA	; 250
 988:	95 b9       	out	0x05, r25	; 5
 98a:	98 b1       	in	r25, 0x08	; 8
 98c:	9b 7e       	andi	r25, 0xEB	; 235
 98e:	98 b9       	out	0x08, r25	; 8
 990:	87 70       	andi	r24, 0x07	; 7
 992:	88 0f       	add	r24, r24
 994:	80 64       	ori	r24, 0x40	; 64
 996:	89 83       	std	Y+1, r24	; 0x01
 998:	6a 83       	std	Y+2, r22	; 0x02
 99a:	4b 83       	std	Y+3, r20	; 0x03
 99c:	5c 83       	std	Y+4, r21	; 0x04
 99e:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <_tranceive>
 9a2:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <_tranceive+0x1>
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	40 e0       	ldi	r20, 0x00	; 0
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	64 e0       	ldi	r22, 0x04	; 4
 9ae:	ce 01       	movw	r24, r28
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	09 95       	icall
 9b4:	85 b1       	in	r24, 0x05	; 5
 9b6:	85 60       	ori	r24, 0x05	; 5
 9b8:	85 b9       	out	0x05, r24	; 5
 9ba:	88 b1       	in	r24, 0x08	; 8
 9bc:	84 61       	ori	r24, 0x14	; 20
 9be:	88 b9       	out	0x08, r24	; 8
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	0f 90       	pop	r0
 9c6:	0f 90       	pop	r0
 9c8:	df 91       	pop	r29
 9ca:	cf 91       	pop	r28
 9cc:	08 95       	ret

000009ce <mcp23_read_wide>:

uint16_t mcp23_read_wide(uint8_t addr, uint8_t reg)
{
 9ce:	cf 93       	push	r28
 9d0:	df 93       	push	r29
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	28 97       	sbiw	r28, 0x08	; 8
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	f8 94       	cli
 9dc:	de bf       	out	0x3e, r29	; 62
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	cd bf       	out	0x3d, r28	; 61
    MCP23_SS12_PORT &= ~MCP23_SS12_MASK; MCP23_SS3_PORT &= ~MCP23_SS3_MASK;
 9e2:	95 b1       	in	r25, 0x05	; 5
 9e4:	9a 7f       	andi	r25, 0xFA	; 250
 9e6:	95 b9       	out	0x05, r25	; 5
 9e8:	98 b1       	in	r25, 0x08	; 8
 9ea:	9b 7e       	andi	r25, 0xEB	; 235
 9ec:	98 b9       	out	0x08, r25	; 8
    
    uint8_t buf_in[4] = { OPCODER | ((addr & 0x07) << 1), reg, 0, 0 };
 9ee:	87 70       	andi	r24, 0x07	; 7
 9f0:	88 0f       	add	r24, r24
 9f2:	81 64       	ori	r24, 0x41	; 65
 9f4:	89 83       	std	Y+1, r24	; 0x01
 9f6:	6a 83       	std	Y+2, r22	; 0x02
 9f8:	1b 82       	std	Y+3, r1	; 0x03
 9fa:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t buf_out[4] = { 0 };
 9fc:	1d 82       	std	Y+5, r1	; 0x05
 9fe:	1e 82       	std	Y+6, r1	; 0x06
 a00:	1f 82       	std	Y+7, r1	; 0x07
 a02:	18 86       	std	Y+8, r1	; 0x08

    _tranceive(buf_in, sizeof(buf_in), buf_out, sizeof(buf_out));
 a04:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <_tranceive>
 a08:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <_tranceive+0x1>
 a0c:	24 e0       	ldi	r18, 0x04	; 4
 a0e:	ae 01       	movw	r20, r28
 a10:	4b 5f       	subi	r20, 0xFB	; 251
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	64 e0       	ldi	r22, 0x04	; 4
 a16:	ce 01       	movw	r24, r28
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	09 95       	icall

    MCP23_SS12_PORT |= MCP23_SS12_MASK; MCP23_SS3_PORT |= MCP23_SS3_MASK;
 a1c:	85 b1       	in	r24, 0x05	; 5
 a1e:	85 60       	ori	r24, 0x05	; 5
 a20:	85 b9       	out	0x05, r24	; 5
 a22:	88 b1       	in	r24, 0x08	; 8
 a24:	84 61       	ori	r24, 0x14	; 20
 a26:	88 b9       	out	0x08, r24	; 8

    return (buf_out[2] << 8) | buf_out[3];
 a28:	8f 81       	ldd	r24, Y+7	; 0x07
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	98 2f       	mov	r25, r24
 a2e:	88 27       	eor	r24, r24
 a30:	28 85       	ldd	r18, Y+8	; 0x08
}
 a32:	82 2b       	or	r24, r18
 a34:	28 96       	adiw	r28, 0x08	; 8
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	f8 94       	cli
 a3a:	de bf       	out	0x3e, r29	; 62
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	cd bf       	out	0x3d, r28	; 61
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	08 95       	ret

00000a46 <_exit>:
 a46:	f8 94       	cli

00000a48 <__stop_program>:
 a48:	ff cf       	rjmp	.-2      	; 0xa48 <__stop_program>
