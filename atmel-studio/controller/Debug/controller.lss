
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011a  0080011a  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ec  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000778  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000994  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000caa  00000000  00000000  00003a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000046be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_39>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 31       	cpi	r26, 0x1A	; 26
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e1       	ldi	r26, 0x1A	; 26
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 32       	cpi	r26, 0x23	; 35
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  ea:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <completed_spi>:
#define DISABLE_FRONT_2() (PORT_SS_FRONT_2 |= MASK_SS_FRONT_2)
#define ASSERT_FRONT_3() (PORT_SS_FRONT_3 &= ~MASK_SS_FRONT_3)
#define DISABLE_FRONT_3() (PORT_SS_FRONT_3 |= MASK_SS_FRONT_3)

void display_instruction()
{
  f2:	dc 01       	movw	r26, r24
  f4:	15 96       	adiw	r26, 0x05	; 5
  f6:	2c 91       	ld	r18, X
  f8:	15 97       	sbiw	r26, 0x05	; 5
  fa:	14 96       	adiw	r26, 0x04	; 4
  fc:	6c 91       	ld	r22, X
  fe:	14 97       	sbiw	r26, 0x04	; 4
 100:	12 96       	adiw	r26, 0x02	; 2
 102:	4d 91       	ld	r20, X+
 104:	5c 91       	ld	r21, X
 106:	13 97       	sbiw	r26, 0x03	; 3
 108:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 10c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 110:	8d 91       	ld	r24, X+
 112:	9c 91       	ld	r25, X
 114:	09 95       	icall
 116:	08 95       	ret

00000118 <main>:
{
    completed((uint8_t*)state->tran_buf, state->tran_len, (uint8_t*)state->recv_buf, state->recv_len);
}

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	63 97       	sbiw	r28, 0x13	; 19
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
    DDR_SS_FRONT_1 |= MASK_SS_FRONT_1;
 12c:	6a 9a       	sbi	0x0d, 2	; 13
    DDR_SS_FRONT_2 |= MASK_SS_FRONT_2;
 12e:	3a 9a       	sbi	0x07, 2	; 7
    DDR_SS_FRONT_3 |= MASK_SS_FRONT_3;
 130:	3b 9a       	sbi	0x07, 3	; 7

    DISABLE_FRONT_1();
 132:	72 9a       	sbi	0x0e, 2	; 14
    DISABLE_FRONT_2();
 134:	42 9a       	sbi	0x08, 2	; 8
    DISABLE_FRONT_3();
 136:	43 9a       	sbi	0x08, 3	; 8

    spi_init_1(SPI_MASTER, SPI_128X);
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_init_1>
    sei();
 140:	78 94       	sei

    //display_register_t reg = { 0 };

    status_display_t status = { 0 };
 142:	19 82       	std	Y+1, r1	; 0x01
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	1b 82       	std	Y+3, r1	; 0x03
 148:	1c 82       	std	Y+4, r1	; 0x04
    status.clock.clock_speed = 123;
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	8c 6e       	ori	r24, 0xEC	; 236
 150:	8b 83       	std	Y+3, r24	; 0x03
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	8c 83       	std	Y+4, r24	; 0x04

    status_state_t state = { 0 };
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07

    proto_packet_t transmit = proto_create(PROTO_DISPLAY, (uint8_t*)&status, sizeof(status));
 15c:	44 e0       	ldi	r20, 0x04	; 4
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 42 02 	call	0x484	; 0x484 <proto_create>
 16a:	28 87       	std	Y+8, r18	; 0x08
 16c:	39 87       	std	Y+9, r19	; 0x09
 16e:	4a 87       	std	Y+10, r20	; 0x0a
 170:	5b 87       	std	Y+11, r21	; 0x0b
 172:	6c 87       	std	Y+12, r22	; 0x0c
 174:	7d 87       	std	Y+13, r23	; 0x0d
    proto_packet_t receive = { .payload = (uint8_t*)&state, .len = sizeof(state) };
 176:	fe 01       	movw	r30, r28
 178:	3e 96       	adiw	r30, 0x0e	; 14
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	df 01       	movw	r26, r30
 17e:	1d 92       	st	X+, r1
 180:	8a 95       	dec	r24
 182:	e9 f7       	brne	.-6      	; 0x17e <main+0x66>
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	8f 87       	std	Y+15, r24	; 0x0f
 188:	ce 01       	movw	r24, r28
 18a:	05 96       	adiw	r24, 0x05	; 5
 18c:	99 8b       	std	Y+17, r25	; 0x11
 18e:	88 8b       	std	Y+16, r24	; 0x10

    spi_install_hook_1(completed_spi);
 190:	89 e7       	ldi	r24, 0x79	; 121
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 13 01 	call	0x226	; 0x226 <spi_install_hook_1>
    proto_init(&completed, spi_tranceive_1);
 198:	68 e0       	ldi	r22, 0x08	; 8
 19a:	71 e0       	ldi	r23, 0x01	; 1
 19c:	8a e1       	ldi	r24, 0x1A	; 26
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 32 02 	call	0x464	; 0x464 <proto_init>

    while (1) 
    {
        ASSERT_FRONT_1();
 1a4:	72 98       	cbi	0x0e, 2	; 14
        ASSERT_FRONT_2();
 1a6:	42 98       	cbi	0x08, 2	; 8
        ASSERT_FRONT_3();
 1a8:	43 98       	cbi	0x08, 3	; 8

        proto_tranceive(&transmit, &receive);
 1aa:	be 01       	movw	r22, r28
 1ac:	62 5f       	subi	r22, 0xF2	; 242
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	ce 01       	movw	r24, r28
 1b2:	08 96       	adiw	r24, 0x08	; 8
 1b4:	0e 94 a5 02 	call	0x54a	; 0x54a <proto_tranceive>
        proto_wait();
 1b8:	0e 94 3c 02 	call	0x478	; 0x478 <proto_wait>
        
        DISABLE_FRONT_1();
 1bc:	72 9a       	sbi	0x0e, 2	; 14
        DISABLE_FRONT_2();
 1be:	42 9a       	sbi	0x08, 2	; 8
        DISABLE_FRONT_3();
 1c0:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	bf ef       	ldi	r27, 0xFF	; 255
 1c4:	21 ee       	ldi	r18, 0xE1	; 225
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	b1 50       	subi	r27, 0x01	; 1
 1ca:	20 40       	sbci	r18, 0x00	; 0
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0xb0>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0xba>
 1d2:	00 00       	nop
 1d4:	e7 cf       	rjmp	.-50     	; 0x1a4 <main+0x8c>

000001d6 <spi_init_1>:
    return _spi_tranceive(&spi_state_1, buffer, len, NULL, 0);
}

void spi_install_hook_0(spi_isr_hook_t hook)
{
    spi_state_0.hook = hook;
 1d6:	e8 e0       	ldi	r30, 0x08	; 8
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	90 81       	ld	r25, Z
 1dc:	80 fb       	bst	r24, 0
 1de:	90 f9       	bld	r25, 0
 1e0:	90 83       	st	Z, r25
 1e2:	96 2f       	mov	r25, r22
 1e4:	93 70       	andi	r25, 0x03	; 3
 1e6:	90 6c       	ori	r25, 0xC0	; 192
 1e8:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 1ec:	81 11       	cpse	r24, r1
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <spi_init_1+0x2a>
 1f0:	6b 9a       	sbi	0x0d, 3	; 13
 1f2:	39 9a       	sbi	0x07, 1	; 7
 1f4:	6a 9a       	sbi	0x0d, 2	; 13
 1f6:	ec ea       	ldi	r30, 0xAC	; 172
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	80 83       	st	Z, r24
 200:	62 ff       	sbrs	r22, 2
 202:	05 c0       	rjmp	.+10     	; 0x20e <spi_init_1+0x38>
 204:	ed ea       	ldi	r30, 0xAD	; 173
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret

00000210 <spi_tranceive_1>:
 210:	0f 93       	push	r16
 212:	02 2f       	mov	r16, r18
 214:	9a 01       	movw	r18, r20
 216:	46 2f       	mov	r20, r22
 218:	bc 01       	movw	r22, r24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_spi_tranceive>
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <spi_install_hook_1>:
}

void spi_install_hook_1(spi_isr_hook_t hook)
{
    spi_state_1.hook = hook;
 226:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_start+0xc>
 22a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__data_start+0xb>
 22e:	08 95       	ret

00000230 <__vector_17>:
}

ISR(SPI0_STC_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
    _spi_isr(&spi_state_0);
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 93 01 	call	0x326	; 0x326 <_spi_isr>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_39>:

ISR(SPI1_STC_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
    _spi_isr(&spi_state_1);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 93 01 	call	0x326	; 0x326 <_spi_isr>
}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state, const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
 2c8:	0f 93       	push	r16
 2ca:	fc 01       	movw	r30, r24
    if (state->running)
 2cc:	80 85       	ldd	r24, Z+8	; 0x08
 2ce:	81 fd       	sbrc	r24, 1
 2d0:	25 c0       	rjmp	.+74     	; 0x31c <_spi_tranceive+0x54>
        //if (state->hook)
            //state->hook(state);
    //}
    //else
    {
        state->tran_buf = tran_buf;
 2d2:	71 83       	std	Z+1, r23	; 0x01
 2d4:	60 83       	st	Z, r22
        state->tran_len = tran_len;
 2d6:	44 83       	std	Z+4, r20	; 0x04
        state->recv_buf = recv_buf;
 2d8:	33 83       	std	Z+3, r19	; 0x03
 2da:	22 83       	std	Z+2, r18	; 0x02
        state->recv_len = recv_len;
 2dc:	05 83       	std	Z+5, r16	; 0x05
        state->len = MAX(tran_len, recv_len);
 2de:	84 2f       	mov	r24, r20
 2e0:	40 17       	cp	r20, r16
 2e2:	08 f4       	brcc	.+2      	; 0x2e6 <_spi_tranceive+0x1e>
 2e4:	80 2f       	mov	r24, r16
 2e6:	86 83       	std	Z+6, r24	; 0x06

        state->index = 0;
 2e8:	17 82       	std	Z+7, r1	; 0x07
        state->running = 1;
 2ea:	80 85       	ldd	r24, Z+8	; 0x08
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 87       	std	Z+8, r24	; 0x08
    
        if (tran_buf && tran_len > 0)
 2f0:	61 15       	cp	r22, r1
 2f2:	71 05       	cpc	r23, r1
 2f4:	51 f0       	breq	.+20     	; 0x30a <_spi_tranceive+0x42>
 2f6:	44 23       	and	r20, r20
 2f8:	41 f0       	breq	.+16     	; 0x30a <_spi_tranceive+0x42>
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
 2fa:	01 84       	ldd	r0, Z+9	; 0x09
 2fc:	f2 85       	ldd	r31, Z+10	; 0x0a
 2fe:	e0 2d       	mov	r30, r0
 300:	db 01       	movw	r26, r22
 302:	8c 91       	ld	r24, X
 304:	80 83       	st	Z, r24
        else if (state->mode == SPI_MASTER)
            *state->spdr = 0xFF;
    }

    return SPI_OK;
 306:	8f ef       	ldi	r24, 0xFF	; 255

        state->index = 0;
        state->running = 1;
    
        if (tran_buf && tran_len > 0)
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
 308:	0c c0       	rjmp	.+24     	; 0x322 <_spi_tranceive+0x5a>
        else if (state->mode == SPI_MASTER)
 30a:	80 85       	ldd	r24, Z+8	; 0x08
 30c:	80 fd       	sbrc	r24, 0
 30e:	08 c0       	rjmp	.+16     	; 0x320 <_spi_tranceive+0x58>
            *state->spdr = 0xFF;
 310:	01 84       	ldd	r0, Z+9	; 0x09
 312:	f2 85       	ldd	r31, Z+10	; 0x0a
 314:	e0 2d       	mov	r30, r0
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	80 83       	st	Z, r24
 31a:	03 c0       	rjmp	.+6      	; 0x322 <_spi_tranceive+0x5a>
#endif

int8_t _spi_tranceive(spi_state_t* state, const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
    if (state->running)
        return SPI_ALREADY_STARTED;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	01 c0       	rjmp	.+2      	; 0x322 <_spi_tranceive+0x5a>
            *state->spdr = tran_buf[0];    // start  by transmitting the first byte
        else if (state->mode == SPI_MASTER)
            *state->spdr = 0xFF;
    }

    return SPI_OK;
 320:	8f ef       	ldi	r24, 0xFF	; 255
}   
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <_spi_isr>:

void _spi_isr(spi_state_t* state)
{
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
    //PORTA |= 1 << 3;
    if (!state->running)
 32c:	fc 01       	movw	r30, r24
 32e:	20 85       	ldd	r18, Z+8	; 0x08
 330:	21 ff       	sbrs	r18, 1
 332:	36 c0       	rjmp	.+108    	; 0x3a0 <_spi_isr+0x7a>
 334:	ec 01       	movw	r28, r24
        return;

    uint8_t recv = *state->spdr;               // read the received byte
 336:	01 84       	ldd	r0, Z+9	; 0x09
 338:	f2 85       	ldd	r31, Z+10	; 0x0a
 33a:	e0 2d       	mov	r30, r0
 33c:	10 81       	ld	r17, Z

    if (++state->index >= state->len)       // completed
 33e:	8f 81       	ldd	r24, Y+7	; 0x07
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	8f 83       	std	Y+7, r24	; 0x07
 344:	9e 81       	ldd	r25, Y+6	; 0x06
 346:	89 17       	cp	r24, r25
 348:	50 f0       	brcs	.+20     	; 0x35e <_spi_isr+0x38>
    {
        state->running = 0;
 34a:	88 85       	ldd	r24, Y+8	; 0x08
 34c:	8d 7f       	andi	r24, 0xFD	; 253
 34e:	88 87       	std	Y+8, r24	; 0x08
            
        if (state->hook)
 350:	eb 85       	ldd	r30, Y+11	; 0x0b
 352:	fc 85       	ldd	r31, Y+12	; 0x0c
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	c1 f0       	breq	.+48     	; 0x388 <_spi_isr+0x62>
            state->hook(state);
 358:	ce 01       	movw	r24, r28
 35a:	09 95       	icall
 35c:	15 c0       	rjmp	.+42     	; 0x388 <_spi_isr+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	87 ec       	ldi	r24, 0xC7	; 199
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <_spi_isr+0x3c>
 366:	00 c0       	rjmp	.+0      	; 0x368 <_spi_isr+0x42>
 368:	00 00       	nop
    }
    else
    {
        _delay_us(50);
        *state->spdr = state->index < state->tran_len ? state->tran_buf[state->index] : 0xFF;    // transmit next byte
 36a:	e9 85       	ldd	r30, Y+9	; 0x09
 36c:	fa 85       	ldd	r31, Y+10	; 0x0a
 36e:	9f 81       	ldd	r25, Y+7	; 0x07
 370:	8c 81       	ldd	r24, Y+4	; 0x04
 372:	98 17       	cp	r25, r24
 374:	38 f4       	brcc	.+14     	; 0x384 <_spi_isr+0x5e>
 376:	8f 81       	ldd	r24, Y+7	; 0x07
 378:	a8 81       	ld	r26, Y
 37a:	b9 81       	ldd	r27, Y+1	; 0x01
 37c:	a8 0f       	add	r26, r24
 37e:	b1 1d       	adc	r27, r1
 380:	8c 91       	ld	r24, X
 382:	01 c0       	rjmp	.+2      	; 0x386 <_spi_isr+0x60>
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	80 83       	st	Z, r24
    }
        
    if (state->index < state->recv_len)
 388:	9f 81       	ldd	r25, Y+7	; 0x07
 38a:	8d 81       	ldd	r24, Y+5	; 0x05
 38c:	98 17       	cp	r25, r24
 38e:	40 f4       	brcc	.+16     	; 0x3a0 <_spi_isr+0x7a>
        state->recv_buf[state->index - 1] = recv;       // store the received byte
 390:	ef 81       	ldd	r30, Y+7	; 0x07
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	9b 81       	ldd	r25, Y+3	; 0x03
 39a:	e8 0f       	add	r30, r24
 39c:	f9 1f       	adc	r31, r25
 39e:	10 83       	st	Z, r17

    //PORTA &= ~(1 << 3);
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	08 95       	ret

000003a8 <completed>:
{
    state.running = 0;
}

static void completed(const uint8_t* buf, uint8_t len)
{
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <completed+0xa>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
    switch (state.status)
 3b6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <state>
 3ba:	23 70       	andi	r18, 0x03	; 3
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	21 30       	cpi	r18, 0x01	; 1
 3c0:	31 05       	cpc	r19, r1
 3c2:	49 f1       	breq	.+82     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 3c4:	22 30       	cpi	r18, 0x02	; 2
 3c6:	31 05       	cpc	r19, r1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <completed+0x24>
 3ca:	40 c0       	rjmp	.+128    	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 3cc:	23 2b       	or	r18, r19
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <completed+0x2a>
 3d0:	42 c0       	rjmp	.+132    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
    return crc;
}

static void handle_header(const uint8_t* buf, uint8_t len)
{
    volatile uint8_t packet_id = buf[0];
 3d2:	dc 01       	movw	r26, r24
 3d4:	2c 91       	ld	r18, X
 3d6:	2a 83       	std	Y+2, r18	; 0x02
    volatile uint8_t packet_len = buf[1];
 3d8:	11 96       	adiw	r26, 0x01	; 1
 3da:	8c 91       	ld	r24, X
 3dc:	89 83       	std	Y+1, r24	; 0x01
    
    state.tranceive(state.transmit->payload, state.transmit->len, state.receive->payload, state.receive->len);
 3de:	0c e1       	ldi	r16, 0x1C	; 28
 3e0:	11 e0       	ldi	r17, 0x01	; 1
 3e2:	d8 01       	movw	r26, r16
 3e4:	13 96       	adiw	r26, 0x03	; 3
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
 3ea:	14 97       	sbiw	r26, 0x04	; 4
 3ec:	21 81       	ldd	r18, Z+1	; 0x01
 3ee:	42 81       	ldd	r20, Z+2	; 0x02
 3f0:	53 81       	ldd	r21, Z+3	; 0x03
 3f2:	11 96       	adiw	r26, 0x01	; 1
 3f4:	ed 91       	ld	r30, X+
 3f6:	fc 91       	ld	r31, X
 3f8:	12 97       	sbiw	r26, 0x02	; 2
 3fa:	61 81       	ldd	r22, Z+1	; 0x01
 3fc:	82 81       	ldd	r24, Z+2	; 0x02
 3fe:	93 81       	ldd	r25, Z+3	; 0x03
 400:	15 96       	adiw	r26, 0x05	; 5
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	16 97       	sbiw	r26, 0x06	; 6
 408:	09 95       	icall
    
    state.status = PAYLOAD;
 40a:	f8 01       	movw	r30, r16
 40c:	80 81       	ld	r24, Z
 40e:	8c 7f       	andi	r24, 0xFC	; 252
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
 414:	20 c0       	rjmp	.+64     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
}

static void handle_payload(const uint8_t* buf, uint8_t len)
{
    state.tranceive((uint8_t*)&state.transmit->crc, sizeof(uint16_t), (uint8_t*)&state.receive->crc, sizeof(uint16_t));
 416:	0c e1       	ldi	r16, 0x1C	; 28
 418:	11 e0       	ldi	r17, 0x01	; 1
 41a:	d8 01       	movw	r26, r16
 41c:	13 96       	adiw	r26, 0x03	; 3
 41e:	4d 91       	ld	r20, X+
 420:	5c 91       	ld	r21, X
 422:	14 97       	sbiw	r26, 0x04	; 4
 424:	4c 5f       	subi	r20, 0xFC	; 252
 426:	5f 4f       	sbci	r21, 0xFF	; 255
 428:	11 96       	adiw	r26, 0x01	; 1
 42a:	8d 91       	ld	r24, X+
 42c:	9c 91       	ld	r25, X
 42e:	12 97       	sbiw	r26, 0x02	; 2
 430:	15 96       	adiw	r26, 0x05	; 5
 432:	ed 91       	ld	r30, X+
 434:	fc 91       	ld	r31, X
 436:	16 97       	sbiw	r26, 0x06	; 6
 438:	22 e0       	ldi	r18, 0x02	; 2
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	04 96       	adiw	r24, 0x04	; 4
 43e:	09 95       	icall
    state.status = FOOTER;
 440:	f8 01       	movw	r30, r16
 442:	80 81       	ld	r24, Z
 444:	8c 7f       	andi	r24, 0xFC	; 252
 446:	82 60       	ori	r24, 0x02	; 2
 448:	80 83       	st	Z, r24
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
}

static void handle_footer(const uint8_t* buf, uint8_t len)
{
    state.running = 0;
 44c:	ec e1       	ldi	r30, 0x1C	; 28
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	80 81       	ld	r24, Z
 452:	8b 7f       	andi	r24, 0xFB	; 251
 454:	80 83       	st	Z, r24
            return;

        default:
            return;
    }
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <proto_init>:

state_t state;

void proto_init(completed_t* pcompleted, tranceive_t tranceive)
{
    *pcompleted = completed;
 464:	24 ed       	ldi	r18, 0xD4	; 212
 466:	31 e0       	ldi	r19, 0x01	; 1
 468:	fc 01       	movw	r30, r24
 46a:	31 83       	std	Z+1, r19	; 0x01
 46c:	20 83       	st	Z, r18
    state.tranceive = tranceive;
 46e:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <state+0x6>
 472:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <state+0x5>
 476:	08 95       	ret

00000478 <proto_wait>:
}

void proto_wait(void)
{
    while (state.running) ;
 478:	ec e1       	ldi	r30, 0x1C	; 28
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	80 81       	ld	r24, Z
 47e:	82 fd       	sbrc	r24, 2
 480:	fd cf       	rjmp	.-6      	; 0x47c <proto_wait+0x4>
}
 482:	08 95       	ret

00000484 <proto_create>:

proto_packet_t proto_create(uint8_t id, const uint8_t* payload, uint8_t len)
{
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	00 d0       	rcall	.+0      	; 0x48e <proto_create+0xa>
 48e:	00 d0       	rcall	.+0      	; 0x490 <proto_create+0xc>
 490:	00 d0       	rcall	.+0      	; 0x492 <proto_create+0xe>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	34 2f       	mov	r19, r20
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 498:	af ef       	ldi	r26, 0xFF	; 255
 49a:	bf ef       	ldi	r27, 0xFF	; 255
 49c:	a8 27       	eor	r26, r24
 49e:	0a 2e       	mov	r0, r26
 4a0:	a2 95       	swap	r26
 4a2:	a0 7f       	andi	r26, 0xF0	; 240
 4a4:	a0 25       	eor	r26, r0
 4a6:	0b 2e       	mov	r0, r27
 4a8:	ba 2f       	mov	r27, r26
 4aa:	a2 95       	swap	r26
 4ac:	af 70       	andi	r26, 0x0F	; 15
 4ae:	0a 26       	eor	r0, r26
 4b0:	a6 95       	lsr	r26
 4b2:	ba 27       	eor	r27, r26
 4b4:	ab 27       	eor	r26, r27
 4b6:	aa 0f       	add	r26, r26
 4b8:	aa 0f       	add	r26, r26
 4ba:	aa 0f       	add	r26, r26
 4bc:	a0 25       	eor	r26, r0
 4be:	a4 27       	eor	r26, r20
 4c0:	0a 2e       	mov	r0, r26
 4c2:	a2 95       	swap	r26
 4c4:	a0 7f       	andi	r26, 0xF0	; 240
 4c6:	a0 25       	eor	r26, r0
 4c8:	0b 2e       	mov	r0, r27
 4ca:	ba 2f       	mov	r27, r26
 4cc:	a2 95       	swap	r26
 4ce:	af 70       	andi	r26, 0x0F	; 15
 4d0:	0a 26       	eor	r0, r26
 4d2:	a6 95       	lsr	r26
 4d4:	ba 27       	eor	r27, r26
 4d6:	ab 27       	eor	r26, r27
 4d8:	aa 0f       	add	r26, r26
 4da:	aa 0f       	add	r26, r26
 4dc:	aa 0f       	add	r26, r26
 4de:	a0 25       	eor	r26, r0
{
    uint16_t crc = 0xFFFF;
    crc = _crc_ccitt_update(crc, packet->id);
    crc = _crc_ccitt_update(crc, packet->len);

    for (uint8_t i = 0; i < packet->len; ++i)
 4e0:	44 23       	and	r20, r20
 4e2:	e9 f0       	breq	.+58     	; 0x51e <proto_create+0x9a>
 4e4:	fb 01       	movw	r30, r22
 4e6:	0f ef       	ldi	r16, 0xFF	; 255
 4e8:	04 0f       	add	r16, r20
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	0f 5f       	subi	r16, 0xFF	; 255
 4ee:	1f 4f       	sbci	r17, 0xFF	; 255
 4f0:	06 0f       	add	r16, r22
 4f2:	17 1f       	adc	r17, r23
        crc = _crc_ccitt_update(crc, packet->payload[i]);
 4f4:	91 91       	ld	r25, Z+
 4f6:	a9 27       	eor	r26, r25
 4f8:	0a 2e       	mov	r0, r26
 4fa:	a2 95       	swap	r26
 4fc:	a0 7f       	andi	r26, 0xF0	; 240
 4fe:	a0 25       	eor	r26, r0
 500:	0b 2e       	mov	r0, r27
 502:	ba 2f       	mov	r27, r26
 504:	a2 95       	swap	r26
 506:	af 70       	andi	r26, 0x0F	; 15
 508:	0a 26       	eor	r0, r26
 50a:	a6 95       	lsr	r26
 50c:	ba 27       	eor	r27, r26
 50e:	ab 27       	eor	r26, r27
 510:	aa 0f       	add	r26, r26
 512:	aa 0f       	add	r26, r26
 514:	aa 0f       	add	r26, r26
 516:	a0 25       	eor	r26, r0
{
    uint16_t crc = 0xFFFF;
    crc = _crc_ccitt_update(crc, packet->id);
    crc = _crc_ccitt_update(crc, packet->len);

    for (uint8_t i = 0; i < packet->len; ++i)
 518:	e0 17       	cp	r30, r16
 51a:	f1 07       	cpc	r31, r17
 51c:	59 f7       	brne	.-42     	; 0x4f4 <proto_create+0x70>
        .len = len,
        .payload = payload
    };

    packet.crc = calculate_crc(&packet);
    return packet;
 51e:	7c 83       	std	Y+4, r23	; 0x04
 520:	6b 83       	std	Y+3, r22	; 0x03
 522:	be 83       	std	Y+6, r27	; 0x06
 524:	ad 83       	std	Y+5, r26	; 0x05
 526:	46 2f       	mov	r20, r22
 528:	5c 81       	ldd	r21, Y+4	; 0x04
 52a:	6a 2f       	mov	r22, r26
 52c:	7e 81       	ldd	r23, Y+6	; 0x06
}
 52e:	28 2f       	mov	r18, r24
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	26 96       	adiw	r28, 0x06	; 6
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	08 95       	ret

0000054a <proto_tranceive>:

void proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
    if (state.running)
 54a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <state>
 54e:	22 fd       	sbrc	r18, 2
 550:	13 c0       	rjmp	.+38     	; 0x578 <proto_tranceive+0x2e>
 552:	ab 01       	movw	r20, r22
        return;

    // start by transmitting the header
    state.status = HEADER;
 554:	ec e1       	ldi	r30, 0x1C	; 28
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	20 81       	ld	r18, Z
 55a:	2c 7f       	andi	r18, 0xFC	; 252
 55c:	20 83       	st	Z, r18
    state.running = 1;
 55e:	20 81       	ld	r18, Z
 560:	24 60       	ori	r18, 0x04	; 4
 562:	20 83       	st	Z, r18
    state.transmit = transmit;
 564:	92 83       	std	Z+2, r25	; 0x02
 566:	81 83       	std	Z+1, r24	; 0x01
    state.receive = receive;
 568:	74 83       	std	Z+4, r23	; 0x04
 56a:	63 83       	std	Z+3, r22	; 0x03

    state.tranceive((uint8_t*)&state.transmit->id, PROTO_HEADER, (uint8_t*)state.receive, PROTO_HEADER);    
 56c:	05 80       	ldd	r0, Z+5	; 0x05
 56e:	f6 81       	ldd	r31, Z+6	; 0x06
 570:	e0 2d       	mov	r30, r0
 572:	22 e0       	ldi	r18, 0x02	; 2
 574:	62 e0       	ldi	r22, 0x02	; 2
 576:	09 95       	icall
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
