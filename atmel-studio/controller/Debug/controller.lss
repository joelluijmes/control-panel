
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019af  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a2  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa4  00000000  00000000  000026f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000725  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a19  00000000  00000000  00003b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004586  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e5       	ldi	r30, 0x54	; 84
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  ea:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main_back>:
}

void main_back(void)
{

    spi_init_0(SPI_MASTER, SPI_128X);
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 ab 00 	call	0x156	; 0x156 <spi_init_0>

    mcp23_init(spi_tranceive_0);
  fa:	85 ec       	ldi	r24, 0xC5	; 197
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 6f 01 	call	0x2de	; 0x2de <mcp23_init>

    mcp23_ddr(1, 0xFFFF);
 102:	6f ef       	ldi	r22, 0xFF	; 255
 104:	7f ef       	ldi	r23, 0xFF	; 255
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 9c 01 	call	0x338	; 0x338 <mcp23_ddr>

    while (1)
    {   
        mcp23_output(1, 0xFFFF);
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	7f ef       	ldi	r23, 0xFF	; 255
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 a3 01 	call	0x346	; 0x346 <mcp23_output>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	89 e6       	ldi	r24, 0x69	; 105
 11a:	98 e1       	ldi	r25, 0x18	; 24
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main_back+0x2a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main_back+0x34>
 126:	00 00       	nop
        _delay_ms(500);
        mcp23_output(1, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 a3 01 	call	0x346	; 0x346 <mcp23_output>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main_back+0x46>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main_back+0x50>
 142:	00 00       	nop
 144:	e3 cf       	rjmp	.-58     	; 0x10c <main_back+0x1a>

00000146 <main>:
    }
}

int main(void)
 {
    main_back();
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <main_back>

0000014a <spi_tranceive_byte_0>:
}

uint8_t spi_completed_1(void)
{
    return !spi_state_1.running;
}
 14a:	8e bd       	out	0x2e, r24	; 46
 14c:	0d b4       	in	r0, 0x2d	; 45
 14e:	07 fe       	sbrs	r0, 7
 150:	fd cf       	rjmp	.-6      	; 0x14c <spi_tranceive_byte_0+0x2>
 152:	8e b5       	in	r24, 0x2e	; 46
 154:	08 95       	ret

00000156 <spi_init_0>:
 156:	28 2f       	mov	r18, r24
 158:	23 70       	andi	r18, 0x03	; 3
 15a:	e8 e0       	ldi	r30, 0x08	; 8
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	90 81       	ld	r25, Z
 160:	9c 7f       	andi	r25, 0xFC	; 252
 162:	92 2b       	or	r25, r18
 164:	90 83       	st	Z, r25
 166:	96 2f       	mov	r25, r22
 168:	93 70       	andi	r25, 0x03	; 3
 16a:	90 64       	ori	r25, 0x40	; 64
 16c:	9c bd       	out	0x2c, r25	; 44
 16e:	81 11       	cpse	r24, r1
 170:	06 c0       	rjmp	.+12     	; 0x17e <spi_init_0+0x28>
 172:	23 9a       	sbi	0x04, 3	; 4
 174:	25 9a       	sbi	0x04, 5	; 4
 176:	22 9a       	sbi	0x04, 2	; 4
 178:	8c b5       	in	r24, 0x2c	; 44
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	8c bd       	out	0x2c, r24	; 44
 17e:	62 ff       	sbrs	r22, 2
 180:	03 c0       	rjmp	.+6      	; 0x188 <spi_init_0+0x32>
 182:	8d b5       	in	r24, 0x2d	; 45
 184:	81 60       	ori	r24, 0x01	; 1
 186:	8d bd       	out	0x2d, r24	; 45
 188:	08 95       	ret

0000018a <spi_tranceive_0>:

int8_t spi_tranceive_0(const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
    spi_state_0.tran_buf = tran_buf;
 18a:	e0 e0       	ldi	r30, 0x00	; 0
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	91 83       	std	Z+1, r25	; 0x01
 190:	80 83       	st	Z, r24
    spi_state_0.tran_len = tran_len;
 192:	64 83       	std	Z+4, r22	; 0x04
    spi_state_0.recv_buf = recv_buf;
 194:	53 83       	std	Z+3, r21	; 0x03
 196:	42 83       	std	Z+2, r20	; 0x02
    spi_state_0.recv_len = recv_len;
 198:	25 83       	std	Z+5, r18	; 0x05

    return _spi_tranceive(&spi_state_0);
 19a:	cf 01       	movw	r24, r30
 19c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_spi_tranceive>
}
 1a0:	08 95       	ret

000001a2 <_spi_tranceive>:
    #error 'Unsupported device'
#endif


int8_t _spi_tranceive(spi_state_t* state)
{
 1a2:	9f 92       	push	r9
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	fc 01       	movw	r30, r24
    uint8_t tran_len = state->tran_len;
 1ba:	a4 80       	ldd	r10, Z+4	; 0x04
    uint8_t* tran_buf = state->tran_buf;
 1bc:	e0 80       	ld	r14, Z
 1be:	f1 80       	ldd	r15, Z+1	; 0x01
    uint8_t recv_len = state->recv_len;
 1c0:	b5 80       	ldd	r11, Z+5	; 0x05
    uint8_t* recv_buf = state->recv_buf;
 1c2:	c2 80       	ldd	r12, Z+2	; 0x02
 1c4:	d3 80       	ldd	r13, Z+3	; 0x03

    uint8_t len = MAX(tran_len, recv_len);
 1c6:	db 2d       	mov	r29, r11
 1c8:	ba 14       	cp	r11, r10
 1ca:	08 f4       	brcc	.+2      	; 0x1ce <_spi_tranceive+0x2c>
 1cc:	da 2d       	mov	r29, r10
    if (!len)
 1ce:	dd 23       	and	r29, r29
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <_spi_tranceive+0x32>
 1d2:	4f c0       	rjmp	.+158    	; 0x272 <_spi_tranceive+0xd0>
        return SPI_OK;

    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 1d4:	80 85       	ldd	r24, Z+8	; 0x08
 1d6:	83 70       	andi	r24, 0x03	; 3
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	d9 f4       	brne	.+54     	; 0x212 <_spi_tranceive+0x70>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 1dc:	a5 85       	ldd	r26, Z+13	; 0x0d
 1de:	b6 85       	ldd	r27, Z+14	; 0x0e
 1e0:	8c 91       	ld	r24, X
 1e2:	88 23       	and	r24, r24
 1e4:	8c f0       	brlt	.+34     	; 0x208 <_spi_tranceive+0x66>
        {
            *state->spdr = tran_len ? tran_buf[0] : 0xFF;
 1e6:	a1 85       	ldd	r26, Z+9	; 0x09
 1e8:	b2 85       	ldd	r27, Z+10	; 0x0a
 1ea:	aa 20       	and	r10, r10
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <_spi_tranceive+0x52>
 1ee:	e7 01       	movw	r28, r14
 1f0:	88 81       	ld	r24, Y
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <_spi_tranceive+0x54>
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 1f8:	05 84       	ldd	r0, Z+13	; 0x0d
 1fa:	f6 85       	ldd	r31, Z+14	; 0x0e
 1fc:	e0 2d       	mov	r30, r0
 1fe:	80 81       	ld	r24, Z
 200:	80 68       	ori	r24, 0x80	; 128
 202:	80 83       	st	Z, r24

            return SPI_PENDING;
 204:	8e ef       	ldi	r24, 0xFE	; 254
 206:	38 c0       	rjmp	.+112    	; 0x278 <_spi_tranceive+0xd6>
        }

        *state->spcr &= ~(1 << SPIF);
 208:	8c 91       	ld	r24, X
 20a:	8f 77       	andi	r24, 0x7F	; 127
 20c:	8c 93       	st	X, r24
        ++i;
 20e:	c1 e0       	ldi	r28, 0x01	; 1
 210:	01 c0       	rjmp	.+2      	; 0x214 <_spi_tranceive+0x72>

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;

    uint8_t i = 0;
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 216:	cd 17       	cp	r28, r29
 218:	18 f5       	brcc	.+70     	; 0x260 <_spi_tranceive+0xbe>
	{
		if (state->mode == SPI_MASTER)
		    _delay_us(75);
		
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 21a:	99 24       	eor	r9, r9
 21c:	9a 94       	dec	r9
        ++i;
    }
	
	for (; i < len; ++i)
	{
		if (state->mode == SPI_MASTER)
 21e:	f8 01       	movw	r30, r16
 220:	90 85       	ldd	r25, Z+8	; 0x08
 222:	93 70       	andi	r25, 0x03	; 3
 224:	31 f4       	brne	.+12     	; 0x232 <_spi_tranceive+0x90>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8b e2       	ldi	r24, 0x2B	; 43
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <_spi_tranceive+0x88>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <_spi_tranceive+0x8e>
 230:	00 00       	nop
		    _delay_us(75);
		
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 232:	ca 15       	cp	r28, r10
 234:	28 f4       	brcc	.+10     	; 0x240 <_spi_tranceive+0x9e>
 236:	f7 01       	movw	r30, r14
 238:	ec 0f       	add	r30, r28
 23a:	f1 1d       	adc	r31, r1
 23c:	80 81       	ld	r24, Z
 23e:	01 c0       	rjmp	.+2      	; 0x242 <_spi_tranceive+0xa0>
 240:	89 2d       	mov	r24, r9
	    uint8_t recv = state->tranceive_byte(tran);	
 242:	d8 01       	movw	r26, r16
 244:	51 96       	adiw	r26, 0x11	; 17
 246:	ed 91       	ld	r30, X+
 248:	fc 91       	ld	r31, X
 24a:	52 97       	sbiw	r26, 0x12	; 18
 24c:	09 95       	icall
		
		if (i < recv_len)
 24e:	cb 15       	cp	r28, r11
 250:	20 f4       	brcc	.+8      	; 0x25a <_spi_tranceive+0xb8>
		    recv_buf[i] = recv;
 252:	f6 01       	movw	r30, r12
 254:	ec 0f       	add	r30, r28
 256:	f1 1d       	adc	r31, r1
 258:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	cd 17       	cp	r28, r29
 25e:	f8 f2       	brcs	.-66     	; 0x21e <_spi_tranceive+0x7c>
		
		if (i < recv_len)
		    recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 260:	e8 01       	movw	r28, r16
 262:	ef 85       	ldd	r30, Y+15	; 0x0f
 264:	f8 89       	ldd	r31, Y+16	; 0x10
 266:	30 97       	sbiw	r30, 0x00	; 0
 268:	31 f0       	breq	.+12     	; 0x276 <_spi_tranceive+0xd4>
        state->on_completed(state);
 26a:	c8 01       	movw	r24, r16
 26c:	09 95       	icall

    return SPI_OK;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	03 c0       	rjmp	.+6      	; 0x278 <_spi_tranceive+0xd6>
    uint8_t recv_len = state->recv_len;
    uint8_t* recv_buf = state->recv_buf;

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	01 c0       	rjmp	.+2      	; 0x278 <_spi_tranceive+0xd6>
	}
	
    if (state->on_completed)
        state->on_completed(state);

    return SPI_OK;
 276:	80 e0       	ldi	r24, 0x00	; 0
}   
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	08 95       	ret

00000290 <write_pair>:
    write_pair(addr, GPPUA, mask);
}

void mcp23_invert_input(uint8_t addr, uint16_t mask)
{
    write_pair(addr, IPOLA, mask);
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <write_pair+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <write_pair+0x8>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	95 b1       	in	r25, 0x05	; 5
 29e:	9a 7f       	andi	r25, 0xFA	; 250
 2a0:	95 b9       	out	0x05, r25	; 5
 2a2:	44 98       	cbi	0x08, 4	; 8
 2a4:	83 70       	andi	r24, 0x03	; 3
 2a6:	88 0f       	add	r24, r24
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	6a 83       	std	Y+2, r22	; 0x02
 2ae:	4b 83       	std	Y+3, r20	; 0x03
 2b0:	1c 82       	std	Y+4, r1	; 0x04
 2b2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 2b6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	09 95       	icall
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	44 9a       	sbi	0x08, 4	; 8
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <mcp23_init>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <mcp23_init+0x6>
 2e4:	1f 92       	push	r1
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	24 b1       	in	r18, 0x04	; 4
 2ec:	25 60       	ori	r18, 0x05	; 5
 2ee:	24 b9       	out	0x04, r18	; 4
 2f0:	3c 9a       	sbi	0x07, 4	; 7
 2f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 2f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	8a 7f       	andi	r24, 0xFA	; 250
 2fe:	85 b9       	out	0x05, r24	; 5
 300:	44 98       	cbi	0x08, 4	; 8
 302:	80 e4       	ldi	r24, 0x40	; 64
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	8a 83       	std	Y+2, r24	; 0x02
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	8b 83       	std	Y+3, r24	; 0x03
 30e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 312:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	09 95       	icall
 324:	85 b1       	in	r24, 0x05	; 5
 326:	85 60       	ori	r24, 0x05	; 5
 328:	85 b9       	out	0x05, r24	; 5
 32a:	44 9a       	sbi	0x08, 4	; 8
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <mcp23_ddr>:
 338:	ab 01       	movw	r20, r22
 33a:	40 95       	com	r20
 33c:	50 95       	com	r21
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	0e 94 48 01 	call	0x290	; 0x290 <write_pair>
 344:	08 95       	ret

00000346 <mcp23_output>:
}

void mcp23_output(uint8_t addr, uint16_t mask)
{
 346:	ab 01       	movw	r20, r22
    write_pair(addr, GPIOA, mask);
 348:	62 e1       	ldi	r22, 0x12	; 18
 34a:	0e 94 48 01 	call	0x290	; 0x290 <write_pair>
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
