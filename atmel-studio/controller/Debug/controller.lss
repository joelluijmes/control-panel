
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000006ae  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800124  00800124  00000766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ea  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b0  00000000  00000000  00002212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c07  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000633  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ade  00000000  00000000  00003fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ea       	ldi	r30, 0xAE	; 174
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 32       	cpi	r26, 0x24	; 36
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e2       	ldi	r26, 0x24	; 36
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 33       	cpi	r26, 0x36	; 54
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    frontend_init();    
  f2:	0e 94 8d 00 	call	0x11a	; 0x11a <frontend_init>

    while (1) 
    {
        frontend_update();
  f6:	0e 94 a4 00 	call	0x148	; 0x148 <frontend_update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9c e9       	ldi	r25, 0x9C	; 156
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0xc>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x12>
 104:	00 00       	nop
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <main+0x4>

00000108 <delayed_tranceive_byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	ef ea       	ldi	r30, 0xAF	; 175
 10a:	f4 e0       	ldi	r31, 0x04	; 4
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <delayed_tranceive_byte+0x4>
 110:	00 c0       	rjmp	.+0      	; 0x112 <delayed_tranceive_byte+0xa>
 112:	00 00       	nop
static uint8_t delayed_tranceive_byte(uint8_t tran)
{
    // we have to delay quite a bit, otherwise the ATtinies can't keep up with us..
    _delay_us(300);

    return spi1_tranceive_byte(tran);
 114:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi1_tranceive_byte>
}
 118:	08 95       	ret

0000011a <frontend_init>:

// ------ PUBLIC ------
void frontend_init(void)
{
    // init the Slave Selects pins
    FRONT_SS1_DDR |= FRONT_SS1_MASK;
 11a:	6a 9a       	sbi	0x0d, 2	; 13
    FRONT_SS2_DDR |= FRONT_SS2_MASK;
 11c:	3a 9a       	sbi	0x07, 2	; 7
    FRONT_SS3_DDR |= FRONT_SS3_MASK;
 11e:	3b 9a       	sbi	0x07, 3	; 7

    DISABLE_FRONT1();
 120:	72 9a       	sbi	0x0e, 2	; 14
    DISABLE_FRONT2();
 122:	42 9a       	sbi	0x08, 2	; 8
    DISABLE_FRONT3();
 124:	43 9a       	sbi	0x08, 3	; 8

    // boards are connected on the SPI1 bus
    spi1_init(SPI_MASTER, SPI_128X);
 126:	63 e0       	ldi	r22, 0x03	; 3
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 5f 01 	call	0x2be	; 0x2be <spi1_init>
    // hook into the SPI to delay the master
    spi1_state.tranceive_byte = delayed_tranceive_byte;
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <spi1_state+0x12>
 136:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <spi1_state+0x11>
    proto_init(spi1_tranceive, &spi1_state.on_completed);
 13a:	68 e1       	ldi	r22, 0x18	; 24
 13c:	71 e0       	ldi	r23, 0x01	; 1
 13e:	81 e8       	ldi	r24, 0x81	; 129
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 c7 02 	call	0x58e	; 0x58e <proto_init>
 146:	08 95       	ret

00000148 <frontend_update>:
}

void frontend_update(void)
{
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	61 97       	sbiw	r28, 0x11	; 17
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
{
    // placeholder
    status_state_t recv_state;

    // Assert the CS to speak to the right board
    ASSERT_FRONT2();
 162:	42 98       	cbi	0x08, 2	; 8
    ASSERT_FRONT3();
 164:	43 98       	cbi	0x08, 3	; 8

    // create the packets to tranceive
    proto_packet_t transmit = proto_create(1, (uint8_t*)&status_display, sizeof(status_display_t));
 166:	44 e0       	ldi	r20, 0x04	; 4
 168:	64 e2       	ldi	r22, 0x24	; 36
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <proto_create>
 172:	28 87       	std	Y+8, r18	; 0x08
 174:	39 87       	std	Y+9, r19	; 0x09
 176:	4a 87       	std	Y+10, r20	; 0x0a
 178:	5b 87       	std	Y+11, r21	; 0x0b
 17a:	6c 87       	std	Y+12, r22	; 0x0c
 17c:	7d 87       	std	Y+13, r23	; 0x0d
 17e:	8e 87       	std	Y+14, r24	; 0x0e
    proto_packet_t receive = proto_create_empty((uint8_t*)&recv_state, sizeof(status_state_t));
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	ce 01       	movw	r24, r28
 184:	0f 96       	adiw	r24, 0x0f	; 15
 186:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <proto_create_empty>
 18a:	29 83       	std	Y+1, r18	; 0x01
 18c:	3a 83       	std	Y+2, r19	; 0x02
 18e:	4b 83       	std	Y+3, r20	; 0x03
 190:	5c 83       	std	Y+4, r21	; 0x04
 192:	6d 83       	std	Y+5, r22	; 0x05
 194:	7e 83       	std	Y+6, r23	; 0x06
 196:	8f 83       	std	Y+7, r24	; 0x07

    // do the tranceive (blocking)
    proto_tranceive(&transmit, &receive);
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	ce 01       	movw	r24, r28
 1a0:	08 96       	adiw	r24, 0x08	; 8
 1a2:	0e 94 36 03 	call	0x66c	; 0x66c <proto_tranceive>

    // done communicating
    DISABLE_FRONT2();
 1a6:	42 9a       	sbi	0x08, 2	; 8
    DISABLE_FRONT3();
 1a8:	43 9a       	sbi	0x08, 3	; 8

    // get the status of the tranceivement (IDLE -> success; FAILED -> incorrect CRC)
    proto_status_t status = proto_status();
 1aa:	0e 94 ce 02 	call	0x59c	; 0x59c <proto_status>

    // update with the received state
    if (status == IDLE && recv_state.selected < 4)
 1ae:	81 11       	cpse	r24, r1
 1b0:	15 c0       	rjmp	.+42     	; 0x1dc <frontend_update+0x94>
 1b2:	89 89       	ldd	r24, Y+17	; 0x11
 1b4:	86 95       	lsr	r24
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	04 97       	sbiw	r24, 0x04	; 4
 1bc:	7c f4       	brge	.+30     	; 0x1dc <frontend_update+0x94>
    {
        status_display.clock = recv_state.clock;
 1be:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c0:	98 89       	ldd	r25, Y+16	; 0x10
 1c2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x3>
 1c6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end+0x2>
        status_state = recv_state;
 1ca:	8f 85       	ldd	r24, Y+15	; 0x0f
 1cc:	98 89       	ldd	r25, Y+16	; 0x10
 1ce:	a9 89       	ldd	r26, Y+17	; 0x11
 1d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <status_state>
 1d4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <status_state+0x1>
 1d8:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <status_state+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <frontend_update+0x98>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <frontend_update+0x9e>
 1e6:	00 00       	nop

void frontend_update(void)
{
    update_status();
    _delay_ms(1);
    update_register(status_state.selected);
 1e8:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <status_state+0x2>
 1ec:	16 95       	lsr	r17
 1ee:	1f 70       	andi	r17, 0x0F	; 15
{
    static uint8_t prev_selected = -1;
    static register_display_t* registers[] = { &r1, &r2, &r3, &r4 } ;

    register_display_t tmp;
    register_display_t* reg = registers[selected];
 1f0:	e1 2f       	mov	r30, r17
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e4 5e       	subi	r30, 0xE4	; 228
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	e0 80       	ld	r14, Z
 1fe:	f1 80       	ldd	r15, Z+1	; 0x01
    reg->updated = prev_selected != selected;
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 206:	18 13       	cpse	r17, r24
 208:	01 c0       	rjmp	.+2      	; 0x20c <frontend_update+0xc4>
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	f7 01       	movw	r30, r14
 20e:	81 81       	ldd	r24, Z+1	; 0x01
 210:	90 fb       	bst	r25, 0
 212:	84 f9       	bld	r24, 4
 214:	81 83       	std	Z+1, r24	; 0x01

    // Assert the CS to speak to the right board
    ASSERT_FRONT1();
 216:	72 98       	cbi	0x0e, 2	; 14
    ASSERT_FRONT2();
 218:	42 98       	cbi	0x08, 2	; 8

    // create the packets to tranceive
    proto_packet_t transmit = proto_create(2, (uint8_t*)reg, sizeof(register_display_t));
 21a:	42 e0       	ldi	r20, 0x02	; 2
 21c:	b7 01       	movw	r22, r14
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 fe 02 	call	0x5fc	; 0x5fc <proto_create>
 224:	28 87       	std	Y+8, r18	; 0x08
 226:	39 87       	std	Y+9, r19	; 0x09
 228:	4a 87       	std	Y+10, r20	; 0x0a
 22a:	5b 87       	std	Y+11, r21	; 0x0b
 22c:	6c 87       	std	Y+12, r22	; 0x0c
 22e:	7d 87       	std	Y+13, r23	; 0x0d
 230:	8e 87       	std	Y+14, r24	; 0x0e
    proto_packet_t receive = proto_create_empty((uint8_t*)&tmp, sizeof(register_display_t));
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	ce 01       	movw	r24, r28
 236:	0f 96       	adiw	r24, 0x0f	; 15
 238:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <proto_create_empty>
 23c:	29 83       	std	Y+1, r18	; 0x01
 23e:	3a 83       	std	Y+2, r19	; 0x02
 240:	4b 83       	std	Y+3, r20	; 0x03
 242:	5c 83       	std	Y+4, r21	; 0x04
 244:	6d 83       	std	Y+5, r22	; 0x05
 246:	7e 83       	std	Y+6, r23	; 0x06
 248:	8f 83       	std	Y+7, r24	; 0x07

    // do the tranceive (blocking)
    proto_tranceive(&transmit, &receive);
 24a:	be 01       	movw	r22, r28
 24c:	6f 5f       	subi	r22, 0xFF	; 255
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	ce 01       	movw	r24, r28
 252:	08 96       	adiw	r24, 0x08	; 8
 254:	0e 94 36 03 	call	0x66c	; 0x66c <proto_tranceive>
    
    // done communicating
    DISABLE_FRONT1();
 258:	72 9a       	sbi	0x0e, 2	; 14
    DISABLE_FRONT2();
 25a:	42 9a       	sbi	0x08, 2	; 8
    
    // get the status of the tranceivement (IDLE -> success; FAILED -> incorrect CRC)
    proto_status_t status = proto_status();
 25c:	0e 94 ce 02 	call	0x59c	; 0x59c <proto_status>
    if (status == IDLE)
 260:	81 11       	cpse	r24, r1
 262:	11 c0       	rjmp	.+34     	; 0x286 <frontend_update+0x13e>
    {
        // if the register board pressed the button, update the register
        reg->updated = 0;
 264:	f7 01       	movw	r30, r14
 266:	81 81       	ldd	r24, Z+1	; 0x01
 268:	8f 7e       	andi	r24, 0xEF	; 239
 26a:	81 83       	std	Z+1, r24	; 0x01
        if (tmp.updated)
 26c:	88 89       	ldd	r24, Y+16	; 0x10
 26e:	84 ff       	sbrs	r24, 4
 270:	08 c0       	rjmp	.+16     	; 0x282 <frontend_update+0x13a>
            reg->value = tmp.value;
 272:	2f 85       	ldd	r18, Y+15	; 0x0f
 274:	98 2f       	mov	r25, r24
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	20 83       	st	Z, r18
 27a:	81 81       	ldd	r24, Z+1	; 0x01
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	89 2b       	or	r24, r25
 280:	81 83       	std	Z+1, r24	; 0x01

        prev_selected = selected;
 282:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__data_start>
 286:	8f e9       	ldi	r24, 0x9F	; 159
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <frontend_update+0x142>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <frontend_update+0x148>
 290:	00 00       	nop
{
    update_status();
    _delay_ms(1);
    update_register(status_state.selected);
    _delay_ms(1);
}
 292:	61 96       	adiw	r28, 0x11	; 17
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

000002aa <spi1_tranceive_byte>:
}

int8_t spi0_transmit(const uint8_t* buffer, uint8_t len)
{
    return spi0_tranceive(buffer, len, NULL, 0);
}
 2aa:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 2ae:	ed ea       	ldi	r30, 0xAD	; 173
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	ec f7       	brge	.-6      	; 0x2b2 <spi1_tranceive_byte+0x8>
 2b8:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 2bc:	08 95       	ret

000002be <spi1_init>:
 2be:	28 2f       	mov	r18, r24
 2c0:	23 70       	andi	r18, 0x03	; 3
 2c2:	e1 e1       	ldi	r30, 0x11	; 17
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	90 81       	ld	r25, Z
 2c8:	9c 7f       	andi	r25, 0xFC	; 252
 2ca:	92 2b       	or	r25, r18
 2cc:	90 83       	st	Z, r25
 2ce:	81 11       	cpse	r24, r1
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <spi1_init+0x26>
 2d2:	6b 9a       	sbi	0x0d, 3	; 13
 2d4:	39 9a       	sbi	0x07, 1	; 7
 2d6:	6a 9a       	sbi	0x0d, 2	; 13
 2d8:	72 9a       	sbi	0x0e, 2	; 14
 2da:	ec ea       	ldi	r30, 0xAC	; 172
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 61       	ori	r24, 0x10	; 16
 2e2:	80 83       	st	Z, r24
 2e4:	62 ff       	sbrs	r22, 2
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <spi1_init+0x34>
 2e8:	ed ea       	ldi	r30, 0xAD	; 173
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
 2f2:	ec ea       	ldi	r30, 0xAC	; 172
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	63 70       	andi	r22, 0x03	; 3
 2fc:	68 2b       	or	r22, r24
 2fe:	60 83       	st	Z, r22
 300:	08 95       	ret

00000302 <spi1_tranceive>:

int8_t spi1_tranceive(const uint8_t* tran_buf, uint8_t tran_len, uint8_t* recv_buf, uint8_t recv_len)
{
    spi1_state.tran_buf = tran_buf;
 302:	e9 e0       	ldi	r30, 0x09	; 9
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	80 83       	st	Z, r24
    spi1_state.tran_len = tran_len;
 30a:	64 83       	std	Z+4, r22	; 0x04
    spi1_state.recv_buf = recv_buf;
 30c:	53 83       	std	Z+3, r21	; 0x03
 30e:	42 83       	std	Z+2, r20	; 0x02
    spi1_state.recv_len = recv_len;
 310:	25 83       	std	Z+5, r18	; 0x05

    return _spi_tranceive(&spi1_state);
 312:	cf 01       	movw	r24, r30
 314:	0e 94 8d 01 	call	0x31a	; 0x31a <_spi_tranceive>
}
 318:	08 95       	ret

0000031a <_spi_tranceive>:
    #error 'Unsupported device'
#endif


int8_t _spi_tranceive(spi_state_t* state)
{
 31a:	9f 92       	push	r9
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	fc 01       	movw	r30, r24
    uint8_t tran_len = state->tran_len;
 332:	a4 80       	ldd	r10, Z+4	; 0x04
    uint8_t* tran_buf = state->tran_buf;
 334:	e0 80       	ld	r14, Z
 336:	f1 80       	ldd	r15, Z+1	; 0x01
    uint8_t recv_len = state->recv_len;
 338:	b5 80       	ldd	r11, Z+5	; 0x05
    uint8_t* recv_buf = state->recv_buf;
 33a:	c2 80       	ldd	r12, Z+2	; 0x02
 33c:	d3 80       	ldd	r13, Z+3	; 0x03

    uint8_t len = MAX(tran_len, recv_len);
 33e:	db 2d       	mov	r29, r11
 340:	ba 14       	cp	r11, r10
 342:	08 f4       	brcc	.+2      	; 0x346 <_spi_tranceive+0x2c>
 344:	da 2d       	mov	r29, r10
    if (!len)
 346:	dd 23       	and	r29, r29
 348:	09 f4       	brne	.+2      	; 0x34c <_spi_tranceive+0x32>
 34a:	45 c0       	rjmp	.+138    	; 0x3d6 <_spi_tranceive+0xbc>
        return SPI_OK;

    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 34c:	80 85       	ldd	r24, Z+8	; 0x08
 34e:	83 70       	andi	r24, 0x03	; 3
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	d9 f4       	brne	.+54     	; 0x38a <_spi_tranceive+0x70>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 354:	a5 85       	ldd	r26, Z+13	; 0x0d
 356:	b6 85       	ldd	r27, Z+14	; 0x0e
 358:	8c 91       	ld	r24, X
 35a:	88 23       	and	r24, r24
 35c:	8c f0       	brlt	.+34     	; 0x380 <_spi_tranceive+0x66>
        {
            *state->spdr = tran_len ? tran_buf[0] : 0xFF;
 35e:	a1 85       	ldd	r26, Z+9	; 0x09
 360:	b2 85       	ldd	r27, Z+10	; 0x0a
 362:	aa 20       	and	r10, r10
 364:	19 f0       	breq	.+6      	; 0x36c <_spi_tranceive+0x52>
 366:	e7 01       	movw	r28, r14
 368:	88 81       	ld	r24, Y
 36a:	01 c0       	rjmp	.+2      	; 0x36e <_spi_tranceive+0x54>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 370:	05 84       	ldd	r0, Z+13	; 0x0d
 372:	f6 85       	ldd	r31, Z+14	; 0x0e
 374:	e0 2d       	mov	r30, r0
 376:	80 81       	ld	r24, Z
 378:	80 68       	ori	r24, 0x80	; 128
 37a:	80 83       	st	Z, r24

            return SPI_PENDING;
 37c:	8e ef       	ldi	r24, 0xFE	; 254
 37e:	2e c0       	rjmp	.+92     	; 0x3dc <_spi_tranceive+0xc2>
        }

        *state->spcr &= ~(1 << SPIF);
 380:	8c 91       	ld	r24, X
 382:	8f 77       	andi	r24, 0x7F	; 127
 384:	8c 93       	st	X, r24
        ++i;
 386:	c1 e0       	ldi	r28, 0x01	; 1
 388:	01 c0       	rjmp	.+2      	; 0x38c <_spi_tranceive+0x72>

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;

    uint8_t i = 0;
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 38e:	cd 17       	cp	r28, r29
 390:	c8 f4       	brcc	.+50     	; 0x3c4 <_spi_tranceive+0xaa>
	{
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 392:	99 24       	eor	r9, r9
 394:	9a 94       	dec	r9
 396:	ca 15       	cp	r28, r10
 398:	28 f4       	brcc	.+10     	; 0x3a4 <_spi_tranceive+0x8a>
 39a:	f7 01       	movw	r30, r14
 39c:	ec 0f       	add	r30, r28
 39e:	f1 1d       	adc	r31, r1
 3a0:	80 81       	ld	r24, Z
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <_spi_tranceive+0x8c>
 3a4:	89 2d       	mov	r24, r9
	    uint8_t recv = state->tranceive_byte(tran);	
 3a6:	d8 01       	movw	r26, r16
 3a8:	51 96       	adiw	r26, 0x11	; 17
 3aa:	ed 91       	ld	r30, X+
 3ac:	fc 91       	ld	r31, X
 3ae:	52 97       	sbiw	r26, 0x12	; 18
 3b0:	09 95       	icall
		
		if (i < recv_len)
 3b2:	cb 15       	cp	r28, r11
 3b4:	20 f4       	brcc	.+8      	; 0x3be <_spi_tranceive+0xa4>
		    recv_buf[i] = recv;
 3b6:	f6 01       	movw	r30, r12
 3b8:	ec 0f       	add	r30, r28
 3ba:	f1 1d       	adc	r31, r1
 3bc:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 3be:	cf 5f       	subi	r28, 0xFF	; 255
 3c0:	cd 17       	cp	r28, r29
 3c2:	48 f3       	brcs	.-46     	; 0x396 <_spi_tranceive+0x7c>
		
		if (i < recv_len)
		    recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 3c4:	e8 01       	movw	r28, r16
 3c6:	ef 85       	ldd	r30, Y+15	; 0x0f
 3c8:	f8 89       	ldd	r31, Y+16	; 0x10
 3ca:	30 97       	sbiw	r30, 0x00	; 0
 3cc:	31 f0       	breq	.+12     	; 0x3da <_spi_tranceive+0xc0>
        state->on_completed(state);
 3ce:	c8 01       	movw	r24, r16
 3d0:	09 95       	icall

    return SPI_OK;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <_spi_tranceive+0xc2>
    uint8_t recv_len = state->recv_len;
    uint8_t* recv_buf = state->recv_buf;

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <_spi_tranceive+0xc2>
	}
	
    if (state->on_completed)
        state->on_completed(state);

    return SPI_OK;
 3da:	80 e0       	ldi	r24, 0x00	; 0
}   
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	08 95       	ret

000003f4 <calculate_crc>:
}

int8_t proto_completed()
{
    return state.status == IDLE;
}
 3f4:	fc 01       	movw	r30, r24
 3f6:	80 81       	ld	r24, Z
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	3f ef       	ldi	r19, 0xFF	; 255
 3fc:	28 27       	eor	r18, r24
 3fe:	02 2e       	mov	r0, r18
 400:	22 95       	swap	r18
 402:	20 7f       	andi	r18, 0xF0	; 240
 404:	20 25       	eor	r18, r0
 406:	03 2e       	mov	r0, r19
 408:	32 2f       	mov	r19, r18
 40a:	22 95       	swap	r18
 40c:	2f 70       	andi	r18, 0x0F	; 15
 40e:	02 26       	eor	r0, r18
 410:	26 95       	lsr	r18
 412:	32 27       	eor	r19, r18
 414:	23 27       	eor	r18, r19
 416:	22 0f       	add	r18, r18
 418:	22 0f       	add	r18, r18
 41a:	22 0f       	add	r18, r18
 41c:	20 25       	eor	r18, r0
 41e:	41 81       	ldd	r20, Z+1	; 0x01
 420:	c9 01       	movw	r24, r18
 422:	84 27       	eor	r24, r20
 424:	08 2e       	mov	r0, r24
 426:	82 95       	swap	r24
 428:	80 7f       	andi	r24, 0xF0	; 240
 42a:	80 25       	eor	r24, r0
 42c:	09 2e       	mov	r0, r25
 42e:	98 2f       	mov	r25, r24
 430:	82 95       	swap	r24
 432:	8f 70       	andi	r24, 0x0F	; 15
 434:	08 26       	eor	r0, r24
 436:	86 95       	lsr	r24
 438:	98 27       	eor	r25, r24
 43a:	89 27       	eor	r24, r25
 43c:	88 0f       	add	r24, r24
 43e:	88 0f       	add	r24, r24
 440:	88 0f       	add	r24, r24
 442:	80 25       	eor	r24, r0
 444:	44 23       	and	r20, r20
 446:	f9 f0       	breq	.+62     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 448:	02 80       	ldd	r0, Z+2	; 0x02
 44a:	f3 81       	ldd	r31, Z+3	; 0x03
 44c:	e0 2d       	mov	r30, r0
 44e:	41 50       	subi	r20, 0x01	; 1
 450:	24 2f       	mov	r18, r20
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	2e 0f       	add	r18, r30
 45a:	3f 1f       	adc	r19, r31
 45c:	41 91       	ld	r20, Z+
 45e:	84 27       	eor	r24, r20
 460:	08 2e       	mov	r0, r24
 462:	82 95       	swap	r24
 464:	80 7f       	andi	r24, 0xF0	; 240
 466:	80 25       	eor	r24, r0
 468:	09 2e       	mov	r0, r25
 46a:	98 2f       	mov	r25, r24
 46c:	82 95       	swap	r24
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	08 26       	eor	r0, r24
 472:	86 95       	lsr	r24
 474:	98 27       	eor	r25, r24
 476:	89 27       	eor	r24, r25
 478:	88 0f       	add	r24, r24
 47a:	88 0f       	add	r24, r24
 47c:	88 0f       	add	r24, r24
 47e:	80 25       	eor	r24, r0
 480:	e2 17       	cp	r30, r18
 482:	f3 07       	cpc	r31, r19
 484:	59 f7       	brne	.-42     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 486:	08 95       	ret

00000488 <completed>:
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	eb e2       	ldi	r30, 0x2B	; 43
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	c3 81       	ldd	r28, Z+3	; 0x03
 492:	d4 81       	ldd	r29, Z+4	; 0x04
 494:	a5 81       	ldd	r26, Z+5	; 0x05
 496:	b6 81       	ldd	r27, Z+6	; 0x06
 498:	20 81       	ld	r18, Z
 49a:	27 70       	andi	r18, 0x07	; 7
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	23 30       	cpi	r18, 0x03	; 3
 4a0:	31 05       	cpc	r19, r1
 4a2:	c9 f1       	breq	.+114    	; 0x516 <completed+0x8e>
 4a4:	24 f4       	brge	.+8      	; 0x4ae <completed+0x26>
 4a6:	22 30       	cpi	r18, 0x02	; 2
 4a8:	31 05       	cpc	r19, r1
 4aa:	51 f0       	breq	.+20     	; 0x4c0 <completed+0x38>
 4ac:	6d c0       	rjmp	.+218    	; 0x588 <completed+0x100>
 4ae:	24 30       	cpi	r18, 0x04	; 4
 4b0:	31 05       	cpc	r19, r1
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <completed+0x2e>
 4b4:	42 c0       	rjmp	.+132    	; 0x53a <completed+0xb2>
 4b6:	25 30       	cpi	r18, 0x05	; 5
 4b8:	31 05       	cpc	r19, r1
 4ba:	09 f4       	brne	.+2      	; 0x4be <completed+0x36>
 4bc:	54 c0       	rjmp	.+168    	; 0x566 <completed+0xde>
 4be:	64 c0       	rjmp	.+200    	; 0x588 <completed+0x100>
 4c0:	eb e2       	ldi	r30, 0x2B	; 43
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	81 81       	ldd	r24, Z+1	; 0x01
 4c6:	8c 93       	st	X, r24
 4c8:	82 81       	ldd	r24, Z+2	; 0x02
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	9c 91       	ld	r25, X
 4ce:	11 97       	sbiw	r26, 0x01	; 1
 4d0:	98 17       	cp	r25, r24
 4d2:	40 f4       	brcc	.+16     	; 0x4e4 <completed+0x5c>
 4d4:	16 96       	adiw	r26, 0x06	; 6
 4d6:	8c 91       	ld	r24, X
 4d8:	16 97       	sbiw	r26, 0x06	; 6
 4da:	81 60       	ori	r24, 0x01	; 1
 4dc:	16 96       	adiw	r26, 0x06	; 6
 4de:	8c 93       	st	X, r24
 4e0:	16 97       	sbiw	r26, 0x06	; 6
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <completed+0x66>
 4e4:	89 17       	cp	r24, r25
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <completed+0x66>
 4e8:	11 96       	adiw	r26, 0x01	; 1
 4ea:	8c 93       	st	X, r24
 4ec:	11 97       	sbiw	r26, 0x01	; 1
 4ee:	eb e2       	ldi	r30, 0x2B	; 43
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	80 81       	ld	r24, Z
 4f4:	88 7f       	andi	r24, 0xF8	; 248
 4f6:	83 60       	ori	r24, 0x03	; 3
 4f8:	80 83       	st	Z, r24
 4fa:	12 96       	adiw	r26, 0x02	; 2
 4fc:	4d 91       	ld	r20, X+
 4fe:	5c 91       	ld	r21, X
 500:	13 97       	sbiw	r26, 0x03	; 3
 502:	07 80       	ldd	r0, Z+7	; 0x07
 504:	f0 85       	ldd	r31, Z+8	; 0x08
 506:	e0 2d       	mov	r30, r0
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	2c 91       	ld	r18, X
 50c:	69 81       	ldd	r22, Y+1	; 0x01
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	9b 81       	ldd	r25, Y+3	; 0x03
 512:	09 95       	icall
 514:	39 c0       	rjmp	.+114    	; 0x588 <completed+0x100>
 516:	eb e2       	ldi	r30, 0x2B	; 43
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	80 81       	ld	r24, Z
 51c:	88 7f       	andi	r24, 0xF8	; 248
 51e:	84 60       	ori	r24, 0x04	; 4
 520:	80 83       	st	Z, r24
 522:	ad 01       	movw	r20, r26
 524:	4c 5f       	subi	r20, 0xFC	; 252
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	07 80       	ldd	r0, Z+7	; 0x07
 52a:	f0 85       	ldd	r31, Z+8	; 0x08
 52c:	e0 2d       	mov	r30, r0
 52e:	22 e0       	ldi	r18, 0x02	; 2
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	ce 01       	movw	r24, r28
 534:	04 96       	adiw	r24, 0x04	; 4
 536:	09 95       	icall
 538:	27 c0       	rjmp	.+78     	; 0x588 <completed+0x100>
 53a:	00 00       	nop
 53c:	cd 01       	movw	r24, r26
 53e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <calculate_crc>
 542:	eb e2       	ldi	r30, 0x2B	; 43
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	92 83       	std	Z+2, r25	; 0x02
 548:	81 83       	std	Z+1, r24	; 0x01
 54a:	80 81       	ld	r24, Z
 54c:	88 7f       	andi	r24, 0xF8	; 248
 54e:	85 60       	ori	r24, 0x05	; 5
 550:	80 83       	st	Z, r24
 552:	07 80       	ldd	r0, Z+7	; 0x07
 554:	f0 85       	ldd	r31, Z+8	; 0x08
 556:	e0 2d       	mov	r30, r0
 558:	22 e0       	ldi	r18, 0x02	; 2
 55a:	4c e2       	ldi	r20, 0x2C	; 44
 55c:	51 e0       	ldi	r21, 0x01	; 1
 55e:	62 e0       	ldi	r22, 0x02	; 2
 560:	ca 01       	movw	r24, r20
 562:	09 95       	icall
 564:	11 c0       	rjmp	.+34     	; 0x588 <completed+0x100>
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <state+0x1>
 56c:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <state+0x2>
 570:	2c 81       	ldd	r18, Y+4	; 0x04
 572:	3d 81       	ldd	r19, Y+5	; 0x05
 574:	42 17       	cp	r20, r18
 576:	53 07       	cpc	r21, r19
 578:	09 f4       	brne	.+2      	; 0x57c <completed+0xf4>
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	eb e2       	ldi	r30, 0x2B	; 43
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	80 81       	ld	r24, Z
 582:	88 7f       	andi	r24, 0xF8	; 248
 584:	89 2b       	or	r24, r25
 586:	80 83       	st	Z, r24
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <proto_init>:
 58e:	eb e2       	ldi	r30, 0x2B	; 43
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	90 87       	std	Z+8, r25	; 0x08
 594:	87 83       	std	Z+7, r24	; 0x07
 596:	72 87       	std	Z+10, r23	; 0x0a
 598:	61 87       	std	Z+9, r22	; 0x09
 59a:	08 95       	ret

0000059c <proto_status>:

proto_status_t proto_status()
{
    return state.status;
 59c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <state>
}
 5a0:	87 70       	andi	r24, 0x07	; 7
 5a2:	08 95       	ret

000005a4 <proto_create_empty>:

    return packet;
}

proto_packet_t proto_create_empty(const uint8_t* payload, uint8_t len)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	2e 97       	sbiw	r28, 0x0e	; 14
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	cd bf       	out	0x3d, r28	; 61
    proto_packet_t packet =
 5b8:	fe 01       	movw	r30, r28
 5ba:	38 96       	adiw	r30, 0x08	; 8
 5bc:	27 e0       	ldi	r18, 0x07	; 7
 5be:	df 01       	movw	r26, r30
 5c0:	1d 92       	st	X+, r1
 5c2:	2a 95       	dec	r18
 5c4:	e9 f7       	brne	.-6      	; 0x5c0 <proto_create_empty+0x1c>
    {
        .len = len,
        .payload = (uint8_t*)payload
    };

    return packet;
 5c6:	69 87       	std	Y+9, r22	; 0x09
 5c8:	9b 87       	std	Y+11, r25	; 0x0b
 5ca:	8a 87       	std	Y+10, r24	; 0x0a
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	de 01       	movw	r26, r28
 5d0:	11 96       	adiw	r26, 0x01	; 1
 5d2:	01 90       	ld	r0, Z+
 5d4:	0d 92       	st	X+, r0
 5d6:	8a 95       	dec	r24
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <proto_create_empty+0x2e>
 5da:	29 81       	ldd	r18, Y+1	; 0x01
 5dc:	3a 81       	ldd	r19, Y+2	; 0x02
 5de:	4b 81       	ldd	r20, Y+3	; 0x03
 5e0:	5c 81       	ldd	r21, Y+4	; 0x04
 5e2:	6d 81       	ldd	r22, Y+5	; 0x05
 5e4:	7e 81       	ldd	r23, Y+6	; 0x06
}
 5e6:	8f 81       	ldd	r24, Y+7	; 0x07
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	2e 96       	adiw	r28, 0x0e	; 14
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <proto_create>:
{
    return state.status;
}

proto_packet_t proto_create(uint8_t id, const uint8_t* payload, uint8_t len)
{
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	2e 97       	sbiw	r28, 0x0e	; 14
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	18 2f       	mov	r17, r24
 614:	cb 01       	movw	r24, r22
    proto_packet_t packet = proto_create_empty(payload, len);
 616:	64 2f       	mov	r22, r20
 618:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <proto_create_empty>
 61c:	39 87       	std	Y+9, r19	; 0x09
 61e:	4a 87       	std	Y+10, r20	; 0x0a
 620:	5b 87       	std	Y+11, r21	; 0x0b
 622:	6c 87       	std	Y+12, r22	; 0x0c
 624:	7d 87       	std	Y+13, r23	; 0x0d
 626:	8e 87       	std	Y+14, r24	; 0x0e
    packet.id = id;
 628:	18 87       	std	Y+8, r17	; 0x08
    packet.crc = calculate_crc(&packet);
 62a:	ce 01       	movw	r24, r28
 62c:	08 96       	adiw	r24, 0x08	; 8
 62e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <calculate_crc>
 632:	9d 87       	std	Y+13, r25	; 0x0d
 634:	8c 87       	std	Y+12, r24	; 0x0c

    return packet;
 636:	87 e0       	ldi	r24, 0x07	; 7
 638:	fe 01       	movw	r30, r28
 63a:	38 96       	adiw	r30, 0x08	; 8
 63c:	de 01       	movw	r26, r28
 63e:	11 96       	adiw	r26, 0x01	; 1
 640:	01 90       	ld	r0, Z+
 642:	0d 92       	st	X+, r0
 644:	8a 95       	dec	r24
 646:	e1 f7       	brne	.-8      	; 0x640 <proto_create+0x44>
 648:	29 81       	ldd	r18, Y+1	; 0x01
 64a:	3a 81       	ldd	r19, Y+2	; 0x02
 64c:	4b 81       	ldd	r20, Y+3	; 0x03
 64e:	5c 81       	ldd	r21, Y+4	; 0x04
 650:	6d 81       	ldd	r22, Y+5	; 0x05
 652:	7e 81       	ldd	r23, Y+6	; 0x06
}
 654:	8f 81       	ldd	r24, Y+7	; 0x07
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	2e 96       	adiw	r28, 0x0e	; 14
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	08 95       	ret

0000066c <proto_tranceive>:
        }
    }
}

int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	dc 01       	movw	r26, r24
	//if (state.status != IDLE)
	    //return PROTO_BUSY;

    *state.on_completed = completed;
 672:	eb e2       	ldi	r30, 0x2B	; 43
 674:	f1 e0       	ldi	r31, 0x01	; 1
 676:	c1 85       	ldd	r28, Z+9	; 0x09
 678:	d2 85       	ldd	r29, Z+10	; 0x0a
 67a:	84 e4       	ldi	r24, 0x44	; 68
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	99 83       	std	Y+1, r25	; 0x01
 680:	88 83       	st	Y, r24
    state.transmit = transmit;
 682:	b4 83       	std	Z+4, r27	; 0x04
 684:	a3 83       	std	Z+3, r26	; 0x03
    state.receive = receive;
 686:	76 83       	std	Z+6, r23	; 0x06
 688:	65 83       	std	Z+5, r22	; 0x05

    state.status = HEADER;
 68a:	90 81       	ld	r25, Z
 68c:	98 7f       	andi	r25, 0xF8	; 248
 68e:	92 60       	ori	r25, 0x02	; 2
 690:	90 83       	st	Z, r25
    return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 692:	07 80       	ldd	r0, Z+7	; 0x07
 694:	f0 85       	ldd	r31, Z+8	; 0x08
 696:	e0 2d       	mov	r30, r0
 698:	22 e0       	ldi	r18, 0x02	; 2
 69a:	4c e2       	ldi	r20, 0x2C	; 44
 69c:	51 e0       	ldi	r21, 0x01	; 1
 69e:	62 e0       	ldi	r22, 0x02	; 2
 6a0:	cd 01       	movw	r24, r26
 6a2:	09 95       	icall
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
