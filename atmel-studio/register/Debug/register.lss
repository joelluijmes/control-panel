
register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000008bc  00000950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800124  00800124  00000974  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017cb  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab3  00000000  00000000  0000232b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8f  00000000  00000000  00002dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d10  00000000  00000000  000045e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000052f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	6c c0       	rjmp	.+216    	; 0xe4 <__vector_5>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	6d c1       	rjmp	.+730    	; 0x2fa <__vector_15>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ec eb       	ldi	r30, 0xBC	; 188
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a4 32       	cpi	r26, 0x24	; 36
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a4 e2       	ldi	r26, 0x24	; 36
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a7 33       	cpi	r26, 0x37	; 55
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	55 d0       	rcall	.+170    	; 0x106 <main>
  5c:	2d c4       	rjmp	.+2138   	; 0x8b8 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <display_update>:
    max7221_write(0, MAX7221_DIGIT2, display_left);
    max7221_write(0, MAX7221_DIGIT3, display_right);
}

void display_update(uint16_t reg)
{
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	ec 01       	movw	r28, r24
#define BIT_4 (1 << 4)
#define BIT_5 (1 << 3)

static void inline print_hex(uint16_t value)
{
    max7221_display(0, MAX7221_DIGIT0, value%0x10);
  68:	48 2f       	mov	r20, r24
  6a:	4f 70       	andi	r20, 0x0F	; 15
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	71 d2       	rcall	.+1250   	; 0x554 <max7221_display>
    max7221_display(0, MAX7221_DIGIT4, (value/0x10)%0x10);
  72:	ae 01       	movw	r20, r28
  74:	52 95       	swap	r21
  76:	42 95       	swap	r20
  78:	4f 70       	andi	r20, 0x0F	; 15
  7a:	45 27       	eor	r20, r21
  7c:	5f 70       	andi	r21, 0x0F	; 15
  7e:	45 27       	eor	r20, r21
  80:	4f 70       	andi	r20, 0x0F	; 15
  82:	65 e0       	ldi	r22, 0x05	; 5
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	66 d2       	rcall	.+1228   	; 0x554 <max7221_display>
    max7221_display(0, MAX7221_DIGIT6, (value/0x100)%0x10);
  88:	4d 2f       	mov	r20, r29
  8a:	4f 70       	andi	r20, 0x0F	; 15
  8c:	67 e0       	ldi	r22, 0x07	; 7
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	61 d2       	rcall	.+1218   	; 0x554 <max7221_display>
    // The binary LEDs are alternated between two digits (2 and 3)
    // decoding it to binary representation takes ugly if statements

    uint8_t display_left = 0, display_right = 0;

    if (value & (1 << 0))
  92:	c0 ff       	sbrs	r28, 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <display_update+0x3a>
        display_right |= BIT_0;
  96:	10 e4       	ldi	r17, 0x40	; 64
  98:	01 c0       	rjmp	.+2      	; 0x9c <display_update+0x3c>
static void inline print_binary(uint16_t value)
{
    // The binary LEDs are alternated between two digits (2 and 3)
    // decoding it to binary representation takes ugly if statements

    uint8_t display_left = 0, display_right = 0;
  9a:	10 e0       	ldi	r17, 0x00	; 0

    if (value & (1 << 0))
        display_right |= BIT_0;
    if (value & (1 << 1))
  9c:	c1 ff       	sbrs	r28, 1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <display_update+0x44>
        display_left |= BIT_0;
  a0:	40 e4       	ldi	r20, 0x40	; 64
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <display_update+0x46>
static void inline print_binary(uint16_t value)
{
    // The binary LEDs are alternated between two digits (2 and 3)
    // decoding it to binary representation takes ugly if statements

    uint8_t display_left = 0, display_right = 0;
  a4:	40 e0       	ldi	r20, 0x00	; 0

    if (value & (1 << 0))
        display_right |= BIT_0;
    if (value & (1 << 1))
        display_left |= BIT_0;
    if (value & (1 << 2))
  a6:	c2 fd       	sbrc	r28, 2
        display_right |= BIT_1;
  a8:	12 60       	ori	r17, 0x02	; 2
    if (value & (1 << 3))
  aa:	c3 fd       	sbrc	r28, 3
        display_left |= BIT_1;
  ac:	42 60       	ori	r20, 0x02	; 2
    if (value & (1 << 4))
  ae:	c4 fd       	sbrc	r28, 4
        display_right |= BIT_2;
  b0:	10 62       	ori	r17, 0x20	; 32
    if (value & (1 << 5))
  b2:	c5 fd       	sbrc	r28, 5
        display_left |= BIT_2;
  b4:	40 62       	ori	r20, 0x20	; 32
    if (value & (1 << 6))
  b6:	c6 fd       	sbrc	r28, 6
        display_right |= BIT_3;
  b8:	14 60       	ori	r17, 0x04	; 4
    if (value & (1 << 7))
  ba:	c7 fd       	sbrc	r28, 7
        display_left |= BIT_3;
  bc:	44 60       	ori	r20, 0x04	; 4
    if (value & (1 << 8))
  be:	d0 fd       	sbrc	r29, 0
        display_right |= BIT_4;
  c0:	10 61       	ori	r17, 0x10	; 16
    if (value & (1 << 9))
  c2:	d1 fd       	sbrc	r29, 1
        display_left |= BIT_4;
  c4:	40 61       	ori	r20, 0x10	; 16
    if (value & (1 << 10))
  c6:	d2 fd       	sbrc	r29, 2
        display_right |= BIT_5;
  c8:	18 60       	ori	r17, 0x08	; 8
    if (value & (1 << 11))
  ca:	d3 fd       	sbrc	r29, 3
        display_left |= BIT_5;
  cc:	48 60       	ori	r20, 0x08	; 8
            
    max7221_write(0, MAX7221_DIGIT2, display_left);
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	e2 d1       	rcall	.+964    	; 0x498 <max7221_write>
    max7221_write(0, MAX7221_DIGIT3, display_right);
  d4:	41 2f       	mov	r20, r17
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	de d1       	rcall	.+956    	; 0x498 <max7221_write>

void display_update(uint16_t reg)
{
    print_hex(reg);
    print_binary(reg);
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	08 95       	ret

000000e4 <__vector_5>:
    return value;
}

static volatile uint8_t updated = 0;
ISR(PCINT2_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
    if (BUTTON_PIN & BUTTON_MASK)
  f0:	48 9b       	sbis	0x09, 0	; 9
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__vector_5+0x16>
        updated = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <updated>
}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	2e 97       	sbiw	r28, 0x0e	; 14
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
    // make sure WDT is disabled after a reset 
    MCUSR &= ~(1 << WDRF);
 11a:	84 b7       	in	r24, 0x34	; 52
 11c:	87 7f       	andi	r24, 0xF7	; 247
 11e:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1 << WDCE) | (1 << WDE);
 120:	e0 e6       	ldi	r30, 0x60	; 96
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 61       	ori	r24, 0x18	; 24
 128:	80 83       	st	Z, r24
    WDTCSR = 0x00;
 12a:	10 82       	st	Z, r1

    //wdt_enable(WDTO_30MS);

    // enable pin change interrupt for the button 
    PCICR = 1 << PCIE2;
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
    PCMSK2 = 1 << PCINT16;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__EEPROM_REGION_LENGTH__+0x7f006d>
        
    // initialize the display driver
    max7221_init();
 138:	ec d1       	rcall	.+984    	; 0x512 <max7221_init>
    // initialize the mux for the switches
    mux4067_init();
 13a:	80 d1       	rcall	.+768    	; 0x43c <mux4067_init>

    // initialize the SPI, note that the slave is nonblocking for the first byte, meaning
    // that continues until the interrupt is called. The rest of the SPI transmission is 
    // blocking. 
    spi_init(SPI_SLAVE | SPI_NONBLOCKING, SPI_64X);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	ae d0       	rcall	.+348    	; 0x29e <spi_init>
    proto_init(spi_tranceive, &spi_state.on_completed);
 142:	6f e0       	ldi	r22, 0x0F	; 15
 144:	71 e0       	ldi	r23, 0x01	; 1
 146:	82 e7       	ldi	r24, 0x72	; 114
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	30 d3       	rcall	.+1632   	; 0x7ac <proto_init>
    sei();
 14c:	78 94       	sei

        // update the display on successful transmission :)
        if (status == IDLE)
        {
            __asm("nop");
            if (tmp_display.updated)
 14e:	0f 2e       	mov	r0, r31
 150:	f9 e2       	ldi	r31, 0x29	; 41
 152:	4f 2e       	mov	r4, r31
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	5f 2e       	mov	r5, r31
 158:	f0 2d       	mov	r31, r0
                value = tmp_display.value;

            // do the user inteface processing
            display.value = read_mux(value);
 15a:	21 2c       	mov	r2, r1
 15c:	0f 2e       	mov	r0, r31
 15e:	fb e0       	ldi	r31, 0x0B	; 11
 160:	3f 2e       	mov	r3, r31
 162:	f0 2d       	mov	r31, r0
        // ADC returns 0 - 1023: > 750 it is in UP; < 250 is DOWN; 250 - 750 is MIDDLE
        // MIDDLE means the original value, if it is forced to be up or down, force that bit:
        if (val > 750)
            value |= (1 << i);
        else if (val < 250)
            value &= ~(1 << i);
 164:	cc 24       	eor	r12, r12
 166:	c3 94       	inc	r12
 168:	d1 2c       	mov	r13, r1
            __asm("nop");
            if (tmp_display.updated)
                value = tmp_display.value;

            // do the user inteface processing
            display.value = read_mux(value);
 16a:	0f 2e       	mov	r0, r31
 16c:	f4 e2       	ldi	r31, 0x24	; 36
 16e:	af 2e       	mov	r10, r31
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	bf 2e       	mov	r11, r31
 174:	f0 2d       	mov	r31, r0
 176:	0f 2e       	mov	r0, r31
 178:	f5 e2       	ldi	r31, 0x25	; 37
 17a:	8f 2e       	mov	r8, r31
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	9f 2e       	mov	r9, r31
 180:	f0 2d       	mov	r31, r0
        // update the display on successful transmission :)
        if (status == IDLE)
        {
            __asm("nop");
            if (tmp_display.updated)
                value = tmp_display.value;
 182:	0f 2e       	mov	r0, r31
 184:	f8 e2       	ldi	r31, 0x28	; 40
 186:	6f 2e       	mov	r6, r31
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	7f 2e       	mov	r7, r31
 18c:	f0 2d       	mov	r31, r0
    static uint16_t value;
    static proto_status_t status;

    while (1) 
    {
        wdt_reset();
 18e:	a8 95       	wdr
        status = proto_status();
 190:	14 d3       	rcall	.+1576   	; 0x7ba <proto_status>
 192:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <status.1745>

        // while the transmission hasn't completed, process user interaction
        while (status != IDLE && status != FAILED)
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	28 f0       	brcs	.+10     	; 0x1a4 <main+0x9e>
            status = proto_status();
 19a:	0f d3       	rcall	.+1566   	; 0x7ba <proto_status>
 19c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <status.1745>
    {
        wdt_reset();
        status = proto_status();

        // while the transmission hasn't completed, process user interaction
        while (status != IDLE && status != FAILED)
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	d8 f7       	brcc	.-10     	; 0x19a <main+0x94>
            status = proto_status();

        // debug
        if (status == FAILED)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	11 f4       	brne	.+4      	; 0x1ac <main+0xa6>
            __asm("nop");
 1a8:	00 00       	nop
 1aa:	4b c0       	rjmp	.+150    	; 0x242 <main+0x13c>

        // update the display on successful transmission :)
        if (status == IDLE)
 1ac:	81 11       	cpse	r24, r1
 1ae:	49 c0       	rjmp	.+146    	; 0x242 <main+0x13c>
        {
            __asm("nop");
 1b0:	00 00       	nop
            if (tmp_display.updated)
 1b2:	f2 01       	movw	r30, r4
 1b4:	80 81       	ld	r24, Z
 1b6:	84 ff       	sbrs	r24, 4
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <main+0xc2>
                value = tmp_display.value;
 1ba:	f3 01       	movw	r30, r6
 1bc:	90 81       	ld	r25, Z
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <value.1744>
 1c4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <value.1744+0x1>

            // do the user inteface processing
            display.value = read_mux(value);
 1c8:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <value.1744>
 1cc:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <value.1744+0x1>
 1d0:	02 2d       	mov	r16, r2
 1d2:	10 e0       	ldi	r17, 0x00	; 0
    // the hardware features a mux that feeds the switch into an ADC to read the position of the tumble switch
    // we iterate through all 12 switches
    for (uint8_t i = 0; i < 12; ++i)
    {
        // read the value of that switch (note that the MSB is on the left)
        uint16_t val = mux4067_read(11 - i);
 1d4:	83 2d       	mov	r24, r3
 1d6:	80 1b       	sub	r24, r16
 1d8:	3e d1       	rcall	.+636    	; 0x456 <mux4067_read>

        // ADC returns 0 - 1023: > 750 it is in UP; < 250 is DOWN; 250 - 750 is MIDDLE
        // MIDDLE means the original value, if it is forced to be up or down, force that bit:
        if (val > 750)
 1da:	8f 3e       	cpi	r24, 0xEF	; 239
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	9f 07       	cpc	r25, r31
 1e0:	50 f0       	brcs	.+20     	; 0x1f6 <main+0xf0>
            value |= (1 << i);
 1e2:	c6 01       	movw	r24, r12
 1e4:	00 2e       	mov	r0, r16
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <main+0xe6>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <main+0xe2>
 1f0:	e8 2a       	or	r14, r24
 1f2:	f9 2a       	or	r15, r25
 1f4:	0e c0       	rjmp	.+28     	; 0x212 <main+0x10c>
        else if (val < 250)
 1f6:	8a 3f       	cpi	r24, 0xFA	; 250
 1f8:	91 05       	cpc	r25, r1
 1fa:	58 f4       	brcc	.+22     	; 0x212 <main+0x10c>
            value &= ~(1 << i);
 1fc:	c6 01       	movw	r24, r12
 1fe:	00 2e       	mov	r0, r16
 200:	02 c0       	rjmp	.+4      	; 0x206 <main+0x100>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <main+0xfc>
 20a:	80 95       	com	r24
 20c:	90 95       	com	r25
 20e:	e8 22       	and	r14, r24
 210:	f9 22       	and	r15, r25
 212:	0f 5f       	subi	r16, 0xFF	; 255
 214:	1f 4f       	sbci	r17, 0xFF	; 255

static uint16_t read_mux(uint16_t value)
{
    // the hardware features a mux that feeds the switch into an ADC to read the position of the tumble switch
    // we iterate through all 12 switches
    for (uint8_t i = 0; i < 12; ++i)
 216:	0c 30       	cpi	r16, 0x0C	; 12
 218:	11 05       	cpc	r17, r1
 21a:	e1 f6       	brne	.-72     	; 0x1d4 <main+0xce>
            __asm("nop");
            if (tmp_display.updated)
                value = tmp_display.value;

            // do the user inteface processing
            display.value = read_mux(value);
 21c:	f5 01       	movw	r30, r10
 21e:	e0 82       	st	Z, r14
 220:	9f 2d       	mov	r25, r15
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	f4 01       	movw	r30, r8
 226:	80 81       	ld	r24, Z
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	89 2b       	or	r24, r25
 22c:	80 83       	st	Z, r24
            display.updated = updated;
 22e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <updated>
 232:	90 fb       	bst	r25, 0
 234:	84 f9       	bld	r24, 4
 236:	80 83       	st	Z, r24
            display_update(display.value);
 238:	c7 01       	movw	r24, r14
 23a:	9f 70       	andi	r25, 0x0F	; 15
 23c:	11 df       	rcall	.-478    	; 0x60 <display_update>

            updated = 0;
 23e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <updated>
        }

        tmp_display = display;
 242:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 246:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 24a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <tmp_display.1743+0x1>
 24e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <tmp_display.1743>

        // create the packets
        proto_packet_t transmit = proto_create(1, (uint8_t*)&display, sizeof(register_display_t));
 252:	42 e0       	ldi	r20, 0x02	; 2
 254:	b5 01       	movw	r22, r10
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	b4 d2       	rcall	.+1384   	; 0x7c2 <proto_create>
 25a:	28 87       	std	Y+8, r18	; 0x08
 25c:	39 87       	std	Y+9, r19	; 0x09
 25e:	4a 87       	std	Y+10, r20	; 0x0a
 260:	5b 87       	std	Y+11, r21	; 0x0b
 262:	6c 87       	std	Y+12, r22	; 0x0c
 264:	7d 87       	std	Y+13, r23	; 0x0d
 266:	8e 87       	std	Y+14, r24	; 0x0e
        proto_update_crc(&transmit);
 268:	ce 01       	movw	r24, r28
 26a:	08 96       	adiw	r24, 0x08	; 8
 26c:	d7 d2       	rcall	.+1454   	; 0x81c <proto_update_crc>

        proto_packet_t receive = proto_create(10, (uint8_t*)&tmp_display, sizeof(register_display_t));
 26e:	42 e0       	ldi	r20, 0x02	; 2
 270:	b3 01       	movw	r22, r6
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	a6 d2       	rcall	.+1356   	; 0x7c2 <proto_create>
 276:	29 83       	std	Y+1, r18	; 0x01
 278:	3a 83       	std	Y+2, r19	; 0x02
 27a:	4b 83       	std	Y+3, r20	; 0x03
 27c:	5c 83       	std	Y+4, r21	; 0x04
 27e:	6d 83       	std	Y+5, r22	; 0x05
 280:	7e 83       	std	Y+6, r23	; 0x06
 282:	8f 83       	std	Y+7, r24	; 0x07
        // set the packets to be tranceived
        proto_tranceive(&transmit, &receive);
 284:	be 01       	movw	r22, r28
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	ce 01       	movw	r24, r28
 28c:	08 96       	adiw	r24, 0x08	; 8
 28e:	cf d2       	rcall	.+1438   	; 0x82e <proto_tranceive>
    }
 290:	7e cf       	rjmp	.-260    	; 0x18e <main+0x88>

00000292 <spi_tranceive_byte>:
}

int8_t spi_transmit(uint8_t* buffer, uint8_t len)
{
    return spi_tranceive(buffer, len, NULL, len);
}
 292:	8e bd       	out	0x2e, r24	; 46
 294:	0d b4       	in	r0, 0x2d	; 45
 296:	07 fe       	sbrs	r0, 7
 298:	fd cf       	rjmp	.-6      	; 0x294 <spi_tranceive_byte+0x2>
 29a:	8e b5       	in	r24, 0x2e	; 46
 29c:	08 95       	ret

0000029e <spi_init>:
 29e:	28 2f       	mov	r18, r24
 2a0:	23 70       	andi	r18, 0x03	; 3
 2a2:	e8 e0       	ldi	r30, 0x08	; 8
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	90 81       	ld	r25, Z
 2a8:	9c 7f       	andi	r25, 0xFC	; 252
 2aa:	92 2b       	or	r25, r18
 2ac:	90 83       	st	Z, r25
 2ae:	96 2f       	mov	r25, r22
 2b0:	93 70       	andi	r25, 0x03	; 3
 2b2:	90 64       	ori	r25, 0x40	; 64
 2b4:	9c bd       	out	0x2c, r25	; 44
 2b6:	81 11       	cpse	r24, r1
 2b8:	09 c0       	rjmp	.+18     	; 0x2cc <spi_init+0x2e>
 2ba:	24 98       	cbi	0x04, 4	; 4
 2bc:	23 9a       	sbi	0x04, 3	; 4
 2be:	25 9a       	sbi	0x04, 5	; 4
 2c0:	22 9a       	sbi	0x04, 2	; 4
 2c2:	2a 9a       	sbi	0x05, 2	; 5
 2c4:	8c b5       	in	r24, 0x2c	; 44
 2c6:	80 61       	ori	r24, 0x10	; 16
 2c8:	8c bd       	out	0x2c, r24	; 44
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <spi_init+0x3a>
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <spi_init+0x3a>
 2d0:	24 9a       	sbi	0x04, 4	; 4
 2d2:	23 98       	cbi	0x04, 3	; 4
 2d4:	25 98       	cbi	0x04, 5	; 4
 2d6:	22 98       	cbi	0x04, 2	; 4
 2d8:	62 ff       	sbrs	r22, 2
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <spi_init+0x44>
 2dc:	8d b5       	in	r24, 0x2d	; 45
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	8d bd       	out	0x2d, r24	; 45
 2e2:	08 95       	ret

000002e4 <spi_tranceive>:
 2e4:	e0 e0       	ldi	r30, 0x00	; 0
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	91 83       	std	Z+1, r25	; 0x01
 2ea:	80 83       	st	Z, r24
 2ec:	64 83       	std	Z+4, r22	; 0x04
 2ee:	53 83       	std	Z+3, r21	; 0x03
 2f0:	42 83       	std	Z+2, r20	; 0x02
 2f2:	25 83       	std	Z+5, r18	; 0x05
 2f4:	cf 01       	movw	r24, r30
 2f6:	26 d0       	rcall	.+76     	; 0x344 <_spi_tranceive>
 2f8:	08 95       	ret

000002fa <__vector_15>:
    
    return SPDR;
}

ISR(SPI_STC_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
    _spi_isr(&spi_state);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	77 d0       	rcall	.+238    	; 0x410 <_spi_isr>
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	fc 01       	movw	r30, r24
    uint8_t len = MAX(state->tran_len, state->recv_len);
 350:	94 81       	ldd	r25, Z+4	; 0x04
 352:	85 81       	ldd	r24, Z+5	; 0x05
 354:	89 17       	cp	r24, r25
 356:	10 f4       	brcc	.+4      	; 0x35c <_spi_tranceive+0x18>
 358:	d4 81       	ldd	r29, Z+4	; 0x04
 35a:	01 c0       	rjmp	.+2      	; 0x35e <_spi_tranceive+0x1a>
 35c:	d5 81       	ldd	r29, Z+5	; 0x05
    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 35e:	80 85       	ldd	r24, Z+8	; 0x08
 360:	83 70       	andi	r24, 0x03	; 3
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	e9 f4       	brne	.+58     	; 0x3a0 <_spi_tranceive+0x5c>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 366:	a5 85       	ldd	r26, Z+13	; 0x0d
 368:	b6 85       	ldd	r27, Z+14	; 0x0e
 36a:	8c 91       	ld	r24, X
 36c:	88 23       	and	r24, r24
 36e:	9c f0       	brlt	.+38     	; 0x396 <_spi_tranceive+0x52>
        {
            *state->spdr = state->tran_len ? state->tran_buf[0] : 0xFF;
 370:	a1 85       	ldd	r26, Z+9	; 0x09
 372:	b2 85       	ldd	r27, Z+10	; 0x0a
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	88 23       	and	r24, r24
 378:	21 f0       	breq	.+8      	; 0x382 <_spi_tranceive+0x3e>
 37a:	c0 81       	ld	r28, Z
 37c:	d1 81       	ldd	r29, Z+1	; 0x01
 37e:	88 81       	ld	r24, Y
 380:	01 c0       	rjmp	.+2      	; 0x384 <_spi_tranceive+0x40>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 386:	05 84       	ldd	r0, Z+13	; 0x0d
 388:	f6 85       	ldd	r31, Z+14	; 0x0e
 38a:	e0 2d       	mov	r30, r0
 38c:	80 81       	ld	r24, Z
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	80 83       	st	Z, r24

            return SPI_PENDING;
 392:	8e ef       	ldi	r24, 0xFE	; 254
 394:	37 c0       	rjmp	.+110    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
        }

        *state->spcr &= ~(1 << SPIF);
 396:	8c 91       	ld	r24, X
 398:	8f 77       	andi	r24, 0x7F	; 127
 39a:	8c 93       	st	X, r24
        ++i;
 39c:	c1 e0       	ldi	r28, 0x01	; 1
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <_spi_tranceive+0x5e>
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
    uint8_t len = MAX(state->tran_len, state->recv_len);
    uint8_t i = 0;
 3a0:	c0 e0       	ldi	r28, 0x00	; 0
 3a2:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 3a4:	cd 17       	cp	r28, r29
 3a6:	10 f5       	brcc	.+68     	; 0x3ec <_spi_tranceive+0xa8>
	{
		uint8_t tran = i < state->tran_len ? state->tran_buf[i] : 0xFF;
 3a8:	ff 24       	eor	r15, r15
 3aa:	fa 94       	dec	r15
 3ac:	d8 01       	movw	r26, r16
 3ae:	14 96       	adiw	r26, 0x04	; 4
 3b0:	8c 91       	ld	r24, X
 3b2:	14 97       	sbiw	r26, 0x04	; 4
 3b4:	c8 17       	cp	r28, r24
 3b6:	30 f4       	brcc	.+12     	; 0x3c4 <_spi_tranceive+0x80>
 3b8:	ed 91       	ld	r30, X+
 3ba:	fc 91       	ld	r31, X
 3bc:	ec 0f       	add	r30, r28
 3be:	f1 1d       	adc	r31, r1
 3c0:	80 81       	ld	r24, Z
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <_spi_tranceive+0x82>
 3c4:	8f 2d       	mov	r24, r15
	    uint8_t recv = state->tranceive_byte(tran);	
 3c6:	d8 01       	movw	r26, r16
 3c8:	51 96       	adiw	r26, 0x11	; 17
 3ca:	ed 91       	ld	r30, X+
 3cc:	fc 91       	ld	r31, X
 3ce:	52 97       	sbiw	r26, 0x12	; 18
 3d0:	09 95       	icall
		
		if (i < state->recv_len)
 3d2:	f8 01       	movw	r30, r16
 3d4:	95 81       	ldd	r25, Z+5	; 0x05
 3d6:	c9 17       	cp	r28, r25
 3d8:	30 f4       	brcc	.+12     	; 0x3e6 <_spi_tranceive+0xa2>
		    state->recv_buf[i] = recv;
 3da:	02 80       	ldd	r0, Z+2	; 0x02
 3dc:	f3 81       	ldd	r31, Z+3	; 0x03
 3de:	e0 2d       	mov	r30, r0
 3e0:	ec 0f       	add	r30, r28
 3e2:	f1 1d       	adc	r31, r1
 3e4:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 3e6:	cf 5f       	subi	r28, 0xFF	; 255
 3e8:	cd 17       	cp	r28, r29
 3ea:	00 f3       	brcs	.-64     	; 0x3ac <_spi_tranceive+0x68>
		
		if (i < state->recv_len)
		    state->recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 3ec:	d8 01       	movw	r26, r16
 3ee:	1f 96       	adiw	r26, 0x0f	; 15
 3f0:	ed 91       	ld	r30, X+
 3f2:	fc 91       	ld	r31, X
 3f4:	50 97       	sbiw	r26, 0x10	; 16
 3f6:	30 97       	sbiw	r30, 0x00	; 0
 3f8:	21 f0       	breq	.+8      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
        state->on_completed(state);
 3fa:	c8 01       	movw	r24, r16
 3fc:	09 95       	icall

    return SPI_OK;
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	01 c0       	rjmp	.+2      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 402:	80 e0       	ldi	r24, 0x00	; 0
}   
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	08 95       	ret

00000410 <_spi_isr>:

void _spi_isr(spi_state_t* state)
{  
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
    if (state->recv_len)
 414:	dc 01       	movw	r26, r24
 416:	15 96       	adiw	r26, 0x05	; 5
 418:	2c 91       	ld	r18, X
 41a:	15 97       	sbiw	r26, 0x05	; 5
 41c:	22 23       	and	r18, r18
 41e:	51 f0       	breq	.+20     	; 0x434 <_spi_isr+0x24>
        state->recv_buf[0] = *state->spdr;
 420:	12 96       	adiw	r26, 0x02	; 2
 422:	ed 91       	ld	r30, X+
 424:	fc 91       	ld	r31, X
 426:	13 97       	sbiw	r26, 0x03	; 3
 428:	19 96       	adiw	r26, 0x09	; 9
 42a:	0d 90       	ld	r0, X+
 42c:	bc 91       	ld	r27, X
 42e:	a0 2d       	mov	r26, r0
 430:	2c 91       	ld	r18, X
 432:	20 83       	st	Z, r18

    _spi_tranceive(state);
 434:	87 df       	rcall	.-242    	; 0x344 <_spi_tranceive>
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <mux4067_init>:
#define DISABLE_EN() (MUX4067_EN_PORT |= MUX4067_EN_MASK)

void mux4067_init(void)
{
    //Starts AD in Free Running mode with prescaler of 128
    ADMUX = 1 << REFS0 | MUX4067_ADC_MASK;			// AVCC as reference | ADC0
 43c:	82 e4       	ldi	r24, 0x42	; 66
 43e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    ADCSRA = 1 << ADEN | 1 << ADPS2;            // 16x prescaler (ADC clock must < 1MHz)
 442:	84 e8       	ldi	r24, 0x84	; 132
 444:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
    
    MUX4067_S1_DDR |= MUX4067_S1_MASK;
 448:	56 9a       	sbi	0x0a, 6	; 10
    MUX4067_S2_DDR |= MUX4067_S2_MASK;
 44a:	55 9a       	sbi	0x0a, 5	; 10
    MUX4067_S3_DDR |= MUX4067_S3_MASK;
 44c:	52 9a       	sbi	0x0a, 2	; 10
    MUX4067_S4_DDR |= MUX4067_S4_MASK;
 44e:	53 9a       	sbi	0x0a, 3	; 10
    MUX4067_EN_DDR |= MUX4067_EN_MASK;
 450:	51 9a       	sbi	0x0a, 1	; 10

    ASSERT_EN();
 452:	59 98       	cbi	0x0b, 1	; 11
 454:	08 95       	ret

00000456 <mux4067_read>:
}

uint16_t mux4067_read(uint8_t selection)
{
    if (selection & (1 << 0))
 456:	80 ff       	sbrs	r24, 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <mux4067_read+0x8>
        ASSERT_S1();
 45a:	5e 9a       	sbi	0x0b, 6	; 11
 45c:	01 c0       	rjmp	.+2      	; 0x460 <mux4067_read+0xa>
    else
        DISABLE_S1();
 45e:	5e 98       	cbi	0x0b, 6	; 11
    
    if (selection & (1 << 1))
 460:	81 ff       	sbrs	r24, 1
 462:	02 c0       	rjmp	.+4      	; 0x468 <mux4067_read+0x12>
        ASSERT_S2();
 464:	5d 9a       	sbi	0x0b, 5	; 11
 466:	01 c0       	rjmp	.+2      	; 0x46a <mux4067_read+0x14>
    else
        DISABLE_S2();
 468:	5d 98       	cbi	0x0b, 5	; 11
    
    if (selection & (1 << 2))
 46a:	82 ff       	sbrs	r24, 2
 46c:	02 c0       	rjmp	.+4      	; 0x472 <mux4067_read+0x1c>
        ASSERT_S3();
 46e:	5a 9a       	sbi	0x0b, 2	; 11
 470:	01 c0       	rjmp	.+2      	; 0x474 <mux4067_read+0x1e>
    else
        DISABLE_S3();
 472:	5a 98       	cbi	0x0b, 2	; 11
    
    if (selection & (1 << 3))
 474:	83 ff       	sbrs	r24, 3
 476:	02 c0       	rjmp	.+4      	; 0x47c <mux4067_read+0x26>
        ASSERT_S4();
 478:	5b 9a       	sbi	0x0b, 3	; 11
 47a:	01 c0       	rjmp	.+2      	; 0x47e <mux4067_read+0x28>
    else
        DISABLE_S4();
 47c:	5b 98       	cbi	0x0b, 3	; 11

    ADCSRA |= 1 << ADSC;    // start adc
 47e:	ea e7       	ldi	r30, 0x7A	; 122
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 64       	ori	r24, 0x40	; 64
 486:	80 83       	st	Z, r24
    while (ADCSRA & (1 << ADSC)) ; // = 1 as long conversion is in progress
 488:	80 81       	ld	r24, Z
 48a:	86 fd       	sbrc	r24, 6
 48c:	fd cf       	rjmp	.-6      	; 0x488 <mux4067_read+0x32>
    return ADC;
 48e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 492:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
}
 496:	08 95       	ret

00000498 <max7221_write>:
            max7221_write(i, j, 0);
    }    
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <max7221_write+0x6>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 4a2:	1a 82       	std	Y+2, r1	; 0x02
 4a4:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	e8 0f       	add	r30, r24
 4b6:	f9 1f       	adc	r31, r25
 4b8:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 4ba:	fe 01       	movw	r30, r28
 4bc:	e8 0f       	add	r30, r24
 4be:	f9 1f       	adc	r31, r25
 4c0:	42 83       	std	Z+2, r20	; 0x02
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 4c2:	28 98       	cbi	0x05, 0	; 5
 4c4:	fe 01       	movw	r30, r28
 4c6:	31 96       	adiw	r30, 0x01	; 1
 4c8:	be 01       	movw	r22, r28
 4ca:	6d 5f       	subi	r22, 0xFD	; 253
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
            max7221_write(i, j, 0);
    }    
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 4ce:	57 e0       	ldi	r21, 0x07	; 7
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	16 c0       	rjmp	.+44     	; 0x500 <max7221_write+0x68>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 4d4:	80 81       	ld	r24, Z
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 2e       	mov	r0, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <max7221_write+0x48>
 4dc:	95 95       	asr	r25
 4de:	87 95       	ror	r24
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <max7221_write+0x44>
 4e4:	80 ff       	sbrs	r24, 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <max7221_write+0x54>
                DATA_ASSERT();
 4e8:	29 9a       	sbi	0x05, 1	; 5
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <max7221_write+0x56>
            else
                DATA_DISABLE();
 4ec:	29 98       	cbi	0x05, 1	; 5

            SCK_ASSERT();
 4ee:	5f 9a       	sbi	0x0b, 7	; 11
            SCK_DISABLE();
 4f0:	5f 98       	cbi	0x0b, 7	; 11
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	31 09       	sbc	r19, r1
 4f6:	70 f7       	brcc	.-36     	; 0x4d4 <max7221_write+0x3c>
 4f8:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 4fa:	e6 17       	cp	r30, r22
 4fc:	f7 07       	cpc	r31, r23
 4fe:	19 f0       	breq	.+6      	; 0x506 <max7221_write+0x6e>
            max7221_write(i, j, 0);
    }    
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 500:	25 2f       	mov	r18, r21
 502:	34 2f       	mov	r19, r20
 504:	e7 cf       	rjmp	.-50     	; 0x4d4 <max7221_write+0x3c>
            SCK_ASSERT();
            SCK_DISABLE();
        }
    }

    CS_DISABLE();
 506:	28 9a       	sbi	0x05, 0	; 5
    // store the command in the buffer
    arr[device*2] = address;
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
}
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <max7221_init>:
#define SCK_DISABLE()   (MAX7221_SCK_PORT   &= ~MAX7221_SCK_MASK)

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
 512:	cf 93       	push	r28
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 514:	20 9a       	sbi	0x04, 0	; 4
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 516:	57 9a       	sbi	0x0a, 7	; 10
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 518:	21 9a       	sbi	0x04, 1	; 4

    CS_ASSERT();
 51a:	28 98       	cbi	0x05, 0	; 5
    SCK_ASSERT();
 51c:	5f 9a       	sbi	0x0b, 7	; 11
    DATA_ASSERT();
 51e:	29 9a       	sbi	0x05, 1	; 5

    for (uint8_t i = 0; i < MAX7221_DEVICES; ++i)
    {
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
 520:	47 e0       	ldi	r20, 0x07	; 7
 522:	6b e0       	ldi	r22, 0x0B	; 11
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	b8 df       	rcall	.-144    	; 0x498 <max7221_write>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	69 e0       	ldi	r22, 0x09	; 9
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	b4 df       	rcall	.-152    	; 0x498 <max7221_write>
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	6c e0       	ldi	r22, 0x0C	; 12
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	b0 df       	rcall	.-160    	; 0x498 <max7221_write>
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
 538:	48 e0       	ldi	r20, 0x08	; 8
 53a:	6a e0       	ldi	r22, 0x0A	; 10
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	ac df       	rcall	.-168    	; 0x498 <max7221_write>

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
 540:	c1 e0       	ldi	r28, 0x01	; 1
            max7221_write(i, j, 0);
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	6c 2f       	mov	r22, r28
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	a7 df       	rcall	.-178    	; 0x498 <max7221_write>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
 54a:	cf 5f       	subi	r28, 0xFF	; 255
 54c:	c9 30       	cpi	r28, 0x09	; 9
 54e:	c9 f7       	brne	.-14     	; 0x542 <max7221_init+0x30>
            max7221_write(i, j, 0);
    }    
}
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <max7221_display>:
    spi_write(arr, MAX7221_DEVICES*2);
}

void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
    if (c >= '0' && c <= '9')
 554:	e0 ed       	ldi	r30, 0xD0	; 208
 556:	e4 0f       	add	r30, r20
 558:	ea 30       	cpi	r30, 0x0A	; 10
 55a:	98 f0       	brcs	.+38     	; 0x582 <max7221_display+0x2e>
        c -= '0';
    else if (c >= 'a' && c <= 'z')
 55c:	9f e9       	ldi	r25, 0x9F	; 159
 55e:	94 0f       	add	r25, r20
 560:	9a 31       	cpi	r25, 0x1A	; 26
 562:	18 f4       	brcc	.+6      	; 0x56a <max7221_display+0x16>
        c -= 'a' - 10;
 564:	e9 ea       	ldi	r30, 0xA9	; 169
 566:	e4 0f       	add	r30, r20
 568:	0c c0       	rjmp	.+24     	; 0x582 <max7221_display+0x2e>
    else if (c >= 'A' && c <= 'Z')
 56a:	9f eb       	ldi	r25, 0xBF	; 191
 56c:	94 0f       	add	r25, r20
 56e:	9a 31       	cpi	r25, 0x1A	; 26
 570:	18 f4       	brcc	.+6      	; 0x578 <max7221_display+0x24>
        c -= 'A' - 10;
 572:	e9 ec       	ldi	r30, 0xC9	; 201
 574:	e4 0f       	add	r30, r20
 576:	05 c0       	rjmp	.+10     	; 0x582 <max7221_display+0x2e>
    else if (c > 0x0F)
 578:	40 31       	cpi	r20, 0x10	; 16
 57a:	10 f0       	brcs	.+4      	; 0x580 <max7221_display+0x2c>
        c = 0;
 57c:	e0 e0       	ldi	r30, 0x00	; 0
 57e:	01 c0       	rjmp	.+2      	; 0x582 <max7221_display+0x2e>
 580:	e4 2f       	mov	r30, r20
    {
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ed 5e       	subi	r30, 0xED	; 237
 586:	fe 4f       	sbci	r31, 0xFE	; 254
 588:	40 81       	ld	r20, Z
 58a:	86 df       	rcall	.-244    	; 0x498 <max7221_write>
 58c:	08 95       	ret

0000058e <calculate_crc>:
}

int8_t proto_completed()
{
    return state.status == IDLE;
}
 58e:	fc 01       	movw	r30, r24
 590:	80 81       	ld	r24, Z
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	3f ef       	ldi	r19, 0xFF	; 255
 596:	28 27       	eor	r18, r24
 598:	02 2e       	mov	r0, r18
 59a:	22 95       	swap	r18
 59c:	20 7f       	andi	r18, 0xF0	; 240
 59e:	20 25       	eor	r18, r0
 5a0:	03 2e       	mov	r0, r19
 5a2:	32 2f       	mov	r19, r18
 5a4:	22 95       	swap	r18
 5a6:	2f 70       	andi	r18, 0x0F	; 15
 5a8:	02 26       	eor	r0, r18
 5aa:	26 95       	lsr	r18
 5ac:	32 27       	eor	r19, r18
 5ae:	23 27       	eor	r18, r19
 5b0:	22 0f       	add	r18, r18
 5b2:	22 0f       	add	r18, r18
 5b4:	22 0f       	add	r18, r18
 5b6:	20 25       	eor	r18, r0
 5b8:	41 81       	ldd	r20, Z+1	; 0x01
 5ba:	c9 01       	movw	r24, r18
 5bc:	84 27       	eor	r24, r20
 5be:	08 2e       	mov	r0, r24
 5c0:	82 95       	swap	r24
 5c2:	80 7f       	andi	r24, 0xF0	; 240
 5c4:	80 25       	eor	r24, r0
 5c6:	09 2e       	mov	r0, r25
 5c8:	98 2f       	mov	r25, r24
 5ca:	82 95       	swap	r24
 5cc:	8f 70       	andi	r24, 0x0F	; 15
 5ce:	08 26       	eor	r0, r24
 5d0:	86 95       	lsr	r24
 5d2:	98 27       	eor	r25, r24
 5d4:	89 27       	eor	r24, r25
 5d6:	88 0f       	add	r24, r24
 5d8:	88 0f       	add	r24, r24
 5da:	88 0f       	add	r24, r24
 5dc:	80 25       	eor	r24, r0
 5de:	44 23       	and	r20, r20
 5e0:	f9 f0       	breq	.+62     	; 0x620 <calculate_crc+0x92>
 5e2:	02 80       	ldd	r0, Z+2	; 0x02
 5e4:	f3 81       	ldd	r31, Z+3	; 0x03
 5e6:	e0 2d       	mov	r30, r0
 5e8:	41 50       	subi	r20, 0x01	; 1
 5ea:	24 2f       	mov	r18, r20
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	2f 5f       	subi	r18, 0xFF	; 255
 5f0:	3f 4f       	sbci	r19, 0xFF	; 255
 5f2:	2e 0f       	add	r18, r30
 5f4:	3f 1f       	adc	r19, r31
 5f6:	41 91       	ld	r20, Z+
 5f8:	84 27       	eor	r24, r20
 5fa:	08 2e       	mov	r0, r24
 5fc:	82 95       	swap	r24
 5fe:	80 7f       	andi	r24, 0xF0	; 240
 600:	80 25       	eor	r24, r0
 602:	09 2e       	mov	r0, r25
 604:	98 2f       	mov	r25, r24
 606:	82 95       	swap	r24
 608:	8f 70       	andi	r24, 0x0F	; 15
 60a:	08 26       	eor	r0, r24
 60c:	86 95       	lsr	r24
 60e:	98 27       	eor	r25, r24
 610:	89 27       	eor	r24, r25
 612:	88 0f       	add	r24, r24
 614:	88 0f       	add	r24, r24
 616:	88 0f       	add	r24, r24
 618:	80 25       	eor	r24, r0
 61a:	e2 17       	cp	r30, r18
 61c:	f3 07       	cpc	r31, r19
 61e:	59 f7       	brne	.-42     	; 0x5f6 <calculate_crc+0x68>
 620:	08 95       	ret

00000622 <completed>:
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	ec e2       	ldi	r30, 0x2C	; 44
 628:	f1 e0       	ldi	r31, 0x01	; 1
 62a:	c3 81       	ldd	r28, Z+3	; 0x03
 62c:	d4 81       	ldd	r29, Z+4	; 0x04
 62e:	a5 81       	ldd	r26, Z+5	; 0x05
 630:	b6 81       	ldd	r27, Z+6	; 0x06
 632:	20 81       	ld	r18, Z
 634:	27 70       	andi	r18, 0x07	; 7
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	23 30       	cpi	r18, 0x03	; 3
 63a:	31 05       	cpc	r19, r1
 63c:	09 f4       	brne	.+2      	; 0x640 <completed+0x1e>
 63e:	4e c0       	rjmp	.+156    	; 0x6dc <completed+0xba>
 640:	24 30       	cpi	r18, 0x04	; 4
 642:	31 05       	cpc	r19, r1
 644:	09 f4       	brne	.+2      	; 0x648 <completed+0x26>
 646:	7d c0       	rjmp	.+250    	; 0x742 <completed+0x120>
 648:	22 30       	cpi	r18, 0x02	; 2
 64a:	31 05       	cpc	r19, r1
 64c:	09 f0       	breq	.+2      	; 0x650 <completed+0x2e>
 64e:	ab c0       	rjmp	.+342    	; 0x7a6 <completed+0x184>
 650:	10 97       	sbiw	r26, 0x00	; 0
 652:	01 f1       	breq	.+64     	; 0x694 <completed+0x72>
 654:	9c 91       	ld	r25, X
 656:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <state+0x1>
 65a:	98 17       	cp	r25, r24
 65c:	29 f0       	breq	.+10     	; 0x668 <completed+0x46>
 65e:	80 81       	ld	r24, Z
 660:	88 7f       	andi	r24, 0xF8	; 248
 662:	81 60       	ori	r24, 0x01	; 1
 664:	80 83       	st	Z, r24
 666:	9f c0       	rjmp	.+318    	; 0x7a6 <completed+0x184>
 668:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <state+0x2>
 66c:	11 96       	adiw	r26, 0x01	; 1
 66e:	9c 91       	ld	r25, X
 670:	11 97       	sbiw	r26, 0x01	; 1
 672:	98 17       	cp	r25, r24
 674:	40 f4       	brcc	.+16     	; 0x686 <completed+0x64>
 676:	16 96       	adiw	r26, 0x06	; 6
 678:	8c 91       	ld	r24, X
 67a:	16 97       	sbiw	r26, 0x06	; 6
 67c:	81 60       	ori	r24, 0x01	; 1
 67e:	16 96       	adiw	r26, 0x06	; 6
 680:	8c 93       	st	X, r24
 682:	16 97       	sbiw	r26, 0x06	; 6
 684:	79 c0       	rjmp	.+242    	; 0x778 <completed+0x156>
 686:	89 17       	cp	r24, r25
 688:	08 f0       	brcs	.+2      	; 0x68c <completed+0x6a>
 68a:	76 c0       	rjmp	.+236    	; 0x778 <completed+0x156>
 68c:	11 96       	adiw	r26, 0x01	; 1
 68e:	8c 93       	st	X, r24
 690:	11 97       	sbiw	r26, 0x01	; 1
 692:	72 c0       	rjmp	.+228    	; 0x778 <completed+0x156>
 694:	ec e2       	ldi	r30, 0x2C	; 44
 696:	f1 e0       	ldi	r31, 0x01	; 1
 698:	80 81       	ld	r24, Z
 69a:	88 7f       	andi	r24, 0xF8	; 248
 69c:	83 60       	ori	r24, 0x03	; 3
 69e:	80 83       	st	Z, r24
 6a0:	20 97       	sbiw	r28, 0x00	; 0
 6a2:	81 f4       	brne	.+32     	; 0x6c4 <completed+0xa2>
 6a4:	80 c0       	rjmp	.+256    	; 0x7a6 <completed+0x184>
 6a6:	12 96       	adiw	r26, 0x02	; 2
 6a8:	4d 91       	ld	r20, X+
 6aa:	5c 91       	ld	r21, X
 6ac:	13 97       	sbiw	r26, 0x03	; 3
 6ae:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 6b2:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 6b6:	11 96       	adiw	r26, 0x01	; 1
 6b8:	2c 91       	ld	r18, X
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	9b 81       	ldd	r25, Y+3	; 0x03
 6c0:	09 95       	icall
 6c2:	71 c0       	rjmp	.+226    	; 0x7a6 <completed+0x184>
 6c4:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 6c8:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	69 81       	ldd	r22, Y+1	; 0x01
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	9b 81       	ldd	r25, Y+3	; 0x03
 6d8:	09 95       	icall
 6da:	65 c0       	rjmp	.+202    	; 0x7a6 <completed+0x184>
 6dc:	ec e2       	ldi	r30, 0x2C	; 44
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	80 81       	ld	r24, Z
 6e2:	88 7f       	andi	r24, 0xF8	; 248
 6e4:	84 60       	ori	r24, 0x04	; 4
 6e6:	80 83       	st	Z, r24
 6e8:	20 97       	sbiw	r28, 0x00	; 0
 6ea:	79 f0       	breq	.+30     	; 0x70a <completed+0xe8>
 6ec:	10 97       	sbiw	r26, 0x00	; 0
 6ee:	e9 f0       	breq	.+58     	; 0x72a <completed+0x108>
 6f0:	ad 01       	movw	r20, r26
 6f2:	4c 5f       	subi	r20, 0xFC	; 252
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 6fa:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 6fe:	22 e0       	ldi	r18, 0x02	; 2
 700:	62 e0       	ldi	r22, 0x02	; 2
 702:	ce 01       	movw	r24, r28
 704:	04 96       	adiw	r24, 0x04	; 4
 706:	09 95       	icall
 708:	4e c0       	rjmp	.+156    	; 0x7a6 <completed+0x184>
 70a:	10 97       	sbiw	r26, 0x00	; 0
 70c:	09 f4       	brne	.+2      	; 0x710 <completed+0xee>
 70e:	4b c0       	rjmp	.+150    	; 0x7a6 <completed+0x184>
 710:	ad 01       	movw	r20, r26
 712:	4c 5f       	subi	r20, 0xFC	; 252
 714:	5f 4f       	sbci	r21, 0xFF	; 255
 716:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 71a:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 71e:	22 e0       	ldi	r18, 0x02	; 2
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	09 95       	icall
 728:	3e c0       	rjmp	.+124    	; 0x7a6 <completed+0x184>
 72a:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 72e:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	40 e0       	ldi	r20, 0x00	; 0
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	62 e0       	ldi	r22, 0x02	; 2
 73a:	ce 01       	movw	r24, r28
 73c:	04 96       	adiw	r24, 0x04	; 4
 73e:	09 95       	icall
 740:	32 c0       	rjmp	.+100    	; 0x7a6 <completed+0x184>
 742:	00 00       	nop
 744:	ec e2       	ldi	r30, 0x2C	; 44
 746:	f1 e0       	ldi	r31, 0x01	; 1
 748:	80 81       	ld	r24, Z
 74a:	88 7f       	andi	r24, 0xF8	; 248
 74c:	80 83       	st	Z, r24
 74e:	10 97       	sbiw	r26, 0x00	; 0
 750:	89 f0       	breq	.+34     	; 0x774 <completed+0x152>
 752:	14 96       	adiw	r26, 0x04	; 4
 754:	cd 91       	ld	r28, X+
 756:	dc 91       	ld	r29, X
 758:	15 97       	sbiw	r26, 0x05	; 5
 75a:	cd 01       	movw	r24, r26
 75c:	18 df       	rcall	.-464    	; 0x58e <calculate_crc>
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	c8 17       	cp	r28, r24
 762:	d9 07       	cpc	r29, r25
 764:	09 f4       	brne	.+2      	; 0x768 <completed+0x146>
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	ec e2       	ldi	r30, 0x2C	; 44
 76a:	f1 e0       	ldi	r31, 0x01	; 1
 76c:	80 81       	ld	r24, Z
 76e:	88 7f       	andi	r24, 0xF8	; 248
 770:	82 2b       	or	r24, r18
 772:	80 83       	st	Z, r24
 774:	00 00       	nop
 776:	17 c0       	rjmp	.+46     	; 0x7a6 <completed+0x184>
 778:	ec e2       	ldi	r30, 0x2C	; 44
 77a:	f1 e0       	ldi	r31, 0x01	; 1
 77c:	80 81       	ld	r24, Z
 77e:	88 7f       	andi	r24, 0xF8	; 248
 780:	83 60       	ori	r24, 0x03	; 3
 782:	80 83       	st	Z, r24
 784:	20 97       	sbiw	r28, 0x00	; 0
 786:	09 f0       	breq	.+2      	; 0x78a <completed+0x168>
 788:	8e cf       	rjmp	.-228    	; 0x6a6 <completed+0x84>
 78a:	12 96       	adiw	r26, 0x02	; 2
 78c:	4d 91       	ld	r20, X+
 78e:	5c 91       	ld	r21, X
 790:	13 97       	sbiw	r26, 0x03	; 3
 792:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 796:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 79a:	11 96       	adiw	r26, 0x01	; 1
 79c:	2c 91       	ld	r18, X
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	09 95       	icall
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	08 95       	ret

000007ac <proto_init>:
 7ac:	ec e2       	ldi	r30, 0x2C	; 44
 7ae:	f1 e0       	ldi	r31, 0x01	; 1
 7b0:	90 87       	std	Z+8, r25	; 0x08
 7b2:	87 83       	std	Z+7, r24	; 0x07
 7b4:	72 87       	std	Z+10, r23	; 0x0a
 7b6:	61 87       	std	Z+9, r22	; 0x09
 7b8:	08 95       	ret

000007ba <proto_status>:

proto_status_t proto_status()
{
    return state.status;
 7ba:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state>
}
 7be:	87 70       	andi	r24, 0x07	; 7
 7c0:	08 95       	ret

000007c2 <proto_create>:

proto_packet_t proto_create(uint8_t id, uint8_t* payload, uint8_t len)
{
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	2e 97       	sbiw	r28, 0x0e	; 14
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	f8 94       	cli
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	cd bf       	out	0x3d, r28	; 61
    proto_packet_t packet =
 7d6:	fe 01       	movw	r30, r28
 7d8:	38 96       	adiw	r30, 0x08	; 8
 7da:	97 e0       	ldi	r25, 0x07	; 7
 7dc:	df 01       	movw	r26, r30
 7de:	1d 92       	st	X+, r1
 7e0:	9a 95       	dec	r25
 7e2:	e9 f7       	brne	.-6      	; 0x7de <proto_create+0x1c>
        .id = id,
        .payload = payload,
        .len = len
    };

    return packet;
 7e4:	88 87       	std	Y+8, r24	; 0x08
 7e6:	49 87       	std	Y+9, r20	; 0x09
 7e8:	7b 87       	std	Y+11, r23	; 0x0b
 7ea:	6a 87       	std	Y+10, r22	; 0x0a
 7ec:	87 e0       	ldi	r24, 0x07	; 7
 7ee:	de 01       	movw	r26, r28
 7f0:	11 96       	adiw	r26, 0x01	; 1
 7f2:	01 90       	ld	r0, Z+
 7f4:	0d 92       	st	X+, r0
 7f6:	8a 95       	dec	r24
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <proto_create+0x30>
 7fa:	29 81       	ldd	r18, Y+1	; 0x01
 7fc:	3a 81       	ldd	r19, Y+2	; 0x02
 7fe:	4b 81       	ldd	r20, Y+3	; 0x03
 800:	5c 81       	ldd	r21, Y+4	; 0x04
 802:	6d 81       	ldd	r22, Y+5	; 0x05
 804:	7e 81       	ldd	r23, Y+6	; 0x06
}
 806:	8f 81       	ldd	r24, Y+7	; 0x07
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	2e 96       	adiw	r28, 0x0e	; 14
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	de bf       	out	0x3e, r29	; 62
 812:	0f be       	out	0x3f, r0	; 63
 814:	cd bf       	out	0x3d, r28	; 61
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	08 95       	ret

0000081c <proto_update_crc>:

void proto_update_crc(proto_packet_t* packet)
{
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	ec 01       	movw	r28, r24
    packet->crc = calculate_crc(packet);
 822:	b5 de       	rcall	.-662    	; 0x58e <calculate_crc>
 824:	9d 83       	std	Y+5, r25	; 0x05
 826:	8c 83       	std	Y+4, r24	; 0x04
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <proto_tranceive>:

int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	dc 01       	movw	r26, r24
    //if (state.status != IDLE)
    //return PROTO_BUSY;

    *state.on_completed = completed;
 834:	ec e2       	ldi	r30, 0x2C	; 44
 836:	f1 e0       	ldi	r31, 0x01	; 1
 838:	c1 85       	ldd	r28, Z+9	; 0x09
 83a:	d2 85       	ldd	r29, Z+10	; 0x0a
 83c:	81 e1       	ldi	r24, 0x11	; 17
 83e:	93 e0       	ldi	r25, 0x03	; 3
 840:	99 83       	std	Y+1, r25	; 0x01
 842:	88 83       	st	Y, r24
    state.transmit = transmit;
 844:	b4 83       	std	Z+4, r27	; 0x04
 846:	a3 83       	std	Z+3, r26	; 0x03
    state.receive = receive;
 848:	76 83       	std	Z+6, r23	; 0x06
 84a:	65 83       	std	Z+5, r22	; 0x05

    state.status = HEADER;
 84c:	90 81       	ld	r25, Z
 84e:	98 7f       	andi	r25, 0xF8	; 248
 850:	92 60       	ori	r25, 0x02	; 2
 852:	90 83       	st	Z, r25

    // tranceive
    if (transmit != 0 && receive != 0)
 854:	10 97       	sbiw	r26, 0x00	; 0
 856:	69 f0       	breq	.+26     	; 0x872 <proto_tranceive+0x44>
 858:	67 2b       	or	r22, r23
 85a:	c9 f0       	breq	.+50     	; 0x88e <proto_tranceive+0x60>
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 85c:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 860:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 864:	22 e0       	ldi	r18, 0x02	; 2
 866:	4d e2       	ldi	r20, 0x2D	; 45
 868:	51 e0       	ldi	r21, 0x01	; 1
 86a:	62 e0       	ldi	r22, 0x02	; 2
 86c:	cd 01       	movw	r24, r26
 86e:	09 95       	icall
 870:	20 c0       	rjmp	.+64     	; 0x8b2 <proto_tranceive+0x84>
    // receive only
    if (transmit == 0 && receive != 0)
 872:	67 2b       	or	r22, r23
 874:	b9 f0       	breq	.+46     	; 0x8a4 <proto_tranceive+0x76>
        return state.tranceive(0, 0, state.buf, PROTO_HEADER);
 876:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 87a:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 87e:	22 e0       	ldi	r18, 0x02	; 2
 880:	4d e2       	ldi	r20, 0x2D	; 45
 882:	51 e0       	ldi	r21, 0x01	; 1
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	09 95       	icall
 88c:	12 c0       	rjmp	.+36     	; 0x8b2 <proto_tranceive+0x84>
    // transmit only
    if (transmit != 0 && receive == 0)
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, 0, 0);
 88e:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <state+0x7>
 892:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <state+0x8>
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	50 e0       	ldi	r21, 0x00	; 0
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	cd 01       	movw	r24, r26
 8a0:	09 95       	icall
 8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <proto_tranceive+0x84>

    state.status = FAILED;
 8a4:	ec e2       	ldi	r30, 0x2C	; 44
 8a6:	f1 e0       	ldi	r31, 0x01	; 1
 8a8:	80 81       	ld	r24, Z
 8aa:	88 7f       	andi	r24, 0xF8	; 248
 8ac:	81 60       	ori	r24, 0x01	; 1
 8ae:	80 83       	st	Z, r24
    return PROTO_INV_ARG;
 8b0:	8b ef       	ldi	r24, 0xFB	; 251
}
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
