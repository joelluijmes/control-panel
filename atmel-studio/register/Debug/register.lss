
register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800124  00800124  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f21  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  000014f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b15  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab1  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000039a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	6e c0       	rjmp	.+220    	; 0xe4 <__vector_3>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	76 c0       	rjmp	.+236    	; 0xf8 <__vector_5>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	95 c0       	rjmp	.+298    	; 0x14a <__vector_15>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e6 ea       	ldi	r30, 0xA6	; 166
  3c:	f3 e0       	ldi	r31, 0x03	; 3
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a4 32       	cpi	r26, 0x24	; 36
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a4 e2       	ldi	r26, 0x24	; 36
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a5 32       	cpi	r26, 0x25	; 37
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	5f d0       	rcall	.+190    	; 0x11a <main>
  5c:	a2 c1       	rjmp	.+836    	; 0x3a2 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <display_update>:
    max7221_write(0, MAX7221_DIGIT2, display_left);
    max7221_write(0, MAX7221_DIGIT3, display_right);
}

void display_update(uint16_t reg)
{
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	ec 01       	movw	r28, r24
#define BIT_4 (1 << 4)
#define BIT_5 (1 << 3)

static void inline print_hex(uint16_t value)
{
    max7221_display(0, MAX7221_DIGIT0, value%0x10);
  68:	48 2f       	mov	r20, r24
  6a:	4f 70       	andi	r20, 0x0F	; 15
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	7b d1       	rcall	.+758    	; 0x368 <max7221_display>
    max7221_display(0, MAX7221_DIGIT4, (value/0x10)%0x10);
  72:	ae 01       	movw	r20, r28
  74:	52 95       	swap	r21
  76:	42 95       	swap	r20
  78:	4f 70       	andi	r20, 0x0F	; 15
  7a:	45 27       	eor	r20, r21
  7c:	5f 70       	andi	r21, 0x0F	; 15
  7e:	45 27       	eor	r20, r21
  80:	4f 70       	andi	r20, 0x0F	; 15
  82:	65 e0       	ldi	r22, 0x05	; 5
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	70 d1       	rcall	.+736    	; 0x368 <max7221_display>
    max7221_display(0, MAX7221_DIGIT6, (value/0x100)%0x10);
  88:	4d 2f       	mov	r20, r29
  8a:	4f 70       	andi	r20, 0x0F	; 15
  8c:	67 e0       	ldi	r22, 0x07	; 7
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	6b d1       	rcall	.+726    	; 0x368 <max7221_display>
    // The binary LEDs are alternated between two digits (2 and 3)
    // decoding it to binary representation takes ugly if statements

    uint8_t display_left = 0, display_right = 0;

    if (value & (1 << 0))
  92:	c0 ff       	sbrs	r28, 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <display_update+0x3a>
        display_right |= BIT_0;
  96:	10 e4       	ldi	r17, 0x40	; 64
  98:	01 c0       	rjmp	.+2      	; 0x9c <display_update+0x3c>
static void inline print_binary(uint16_t value)
{
    // The binary LEDs are alternated between two digits (2 and 3)
    // decoding it to binary representation takes ugly if statements

    uint8_t display_left = 0, display_right = 0;
  9a:	10 e0       	ldi	r17, 0x00	; 0

    if (value & (1 << 0))
        display_right |= BIT_0;
    if (value & (1 << 1))
  9c:	c1 ff       	sbrs	r28, 1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <display_update+0x44>
        display_left |= BIT_0;
  a0:	40 e4       	ldi	r20, 0x40	; 64
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <display_update+0x46>
static void inline print_binary(uint16_t value)
{
    // The binary LEDs are alternated between two digits (2 and 3)
    // decoding it to binary representation takes ugly if statements

    uint8_t display_left = 0, display_right = 0;
  a4:	40 e0       	ldi	r20, 0x00	; 0

    if (value & (1 << 0))
        display_right |= BIT_0;
    if (value & (1 << 1))
        display_left |= BIT_0;
    if (value & (1 << 2))
  a6:	c2 fd       	sbrc	r28, 2
        display_right |= BIT_1;
  a8:	12 60       	ori	r17, 0x02	; 2
    if (value & (1 << 3))
  aa:	c3 fd       	sbrc	r28, 3
        display_left |= BIT_1;
  ac:	42 60       	ori	r20, 0x02	; 2
    if (value & (1 << 4))
  ae:	c4 fd       	sbrc	r28, 4
        display_right |= BIT_2;
  b0:	10 62       	ori	r17, 0x20	; 32
    if (value & (1 << 5))
  b2:	c5 fd       	sbrc	r28, 5
        display_left |= BIT_2;
  b4:	40 62       	ori	r20, 0x20	; 32
    if (value & (1 << 6))
  b6:	c6 fd       	sbrc	r28, 6
        display_right |= BIT_3;
  b8:	14 60       	ori	r17, 0x04	; 4
    if (value & (1 << 7))
  ba:	c7 fd       	sbrc	r28, 7
        display_left |= BIT_3;
  bc:	44 60       	ori	r20, 0x04	; 4
    if (value & (1 << 8))
  be:	d0 fd       	sbrc	r29, 0
        display_right |= BIT_4;
  c0:	10 61       	ori	r17, 0x10	; 16
    if (value & (1 << 9))
  c2:	d1 fd       	sbrc	r29, 1
        display_left |= BIT_4;
  c4:	40 61       	ori	r20, 0x10	; 16
    if (value & (1 << 10))
  c6:	d2 fd       	sbrc	r29, 2
        display_right |= BIT_5;
  c8:	18 60       	ori	r17, 0x08	; 8
    if (value & (1 << 11))
  ca:	d3 fd       	sbrc	r29, 3
        display_left |= BIT_5;
  cc:	48 60       	ori	r20, 0x08	; 8
            
    max7221_write(0, MAX7221_DIGIT2, display_left);
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	ea d0       	rcall	.+468    	; 0x2a8 <max7221_write>
    max7221_write(0, MAX7221_DIGIT3, display_right);
  d4:	41 2f       	mov	r20, r17
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	e6 d0       	rcall	.+460    	; 0x2a8 <max7221_write>

void display_update(uint16_t reg)
{
    print_hex(reg);
    print_binary(reg);
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	08 95       	ret

000000e4 <__vector_3>:

    return value;
}

ISR(PCINT0_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
        //return;
//
    //volatile proto_status_t status = proto_status();
//
        //spi_reset();
}
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_5>:

static volatile uint8_t updated = 0;
ISR(PCINT2_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
    if (BUTTON_PIN & BUTTON_MASK)
 104:	48 9b       	sbis	0x09, 0	; 9
 106:	03 c0       	rjmp	.+6      	; 0x10e <__vector_5+0x16>
        updated = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main(void)
{
    BUTTON_DDR |= BUTTON_MASK;
 11a:	50 9a       	sbi	0x0a, 0	; 10

    // PCINT16
    PCICR = 1 << PCIE0 | 1 << PCIE2;
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
    //PCMSK0 = 1 << PCINT2;
    PCMSK2 = 1 << PCINT16;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__EEPROM_REGION_LENGTH__+0x7f006d>

    max7221_init();
 128:	08 d1       	rcall	.+528    	; 0x33a <max7221_init>
//
    //proto_init(spi_tranceive, &spi_state.on_completed);
    
    register_display_t tmp = { 0 };
    register_display_t reg = { 0 };
    uint16_t value = 0;
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0

    while (1) 
    {
        PORT_MISO |= MASK_MISO;
 12e:	2c 9a       	sbi	0x05, 4	; 5

        //reg.value = read_mux(value);
        
        
        display_update(value);
 130:	ce 01       	movw	r24, r28
 132:	96 df       	rcall	.-212    	; 0x60 <display_update>
        //{
            //if (tmp.updated)
                //value = tmp.value;
        //}

        PORT_MISO &= ~MASK_MISO;
 134:	2c 98       	cbi	0x05, 4	; 5

        ++value;
 136:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x22>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x28>
 142:	00 00       	nop
            //spi_reset();
//
            //proto_tranceive(&transmit, &receive);
        //} 

        updated = 0;        
 144:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
    }
 148:	f2 cf       	rjmp	.-28     	; 0x12e <main+0x14>

0000014a <__vector_15>:
    
    return SPDR;
}

ISR(SPI_STC_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
    _spi_isr(&spi_state);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	85 d0       	rcall	.+266    	; 0x27c <_spi_isr>
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <_spi_tranceive>:
    #error 'Unsupported device'
#endif


int8_t _spi_tranceive(spi_state_t* state)
{
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	fc 01       	movw	r30, r24
    uint8_t tran_len = state->tran_len;
 1ac:	a4 80       	ldd	r10, Z+4	; 0x04
    uint8_t* tran_buf = state->tran_buf;
 1ae:	e0 80       	ld	r14, Z
 1b0:	f1 80       	ldd	r15, Z+1	; 0x01
    uint8_t recv_len = state->recv_len;
 1b2:	b5 80       	ldd	r11, Z+5	; 0x05
    uint8_t* recv_buf = state->recv_buf;
 1b4:	c2 80       	ldd	r12, Z+2	; 0x02
 1b6:	d3 80       	ldd	r13, Z+3	; 0x03

    uint8_t len = MAX(tran_len, recv_len);
 1b8:	db 2d       	mov	r29, r11
 1ba:	ba 14       	cp	r11, r10
 1bc:	08 f4       	brcc	.+2      	; 0x1c0 <_spi_tranceive+0x2c>
 1be:	da 2d       	mov	r29, r10
    if (!len)
 1c0:	dd 23       	and	r29, r29
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <_spi_tranceive+0x32>
 1c4:	4c c0       	rjmp	.+152    	; 0x25e <_spi_tranceive+0xca>
        return SPI_OK;

    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 1c6:	80 85       	ldd	r24, Z+8	; 0x08
 1c8:	83 70       	andi	r24, 0x03	; 3
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	d9 f4       	brne	.+54     	; 0x204 <_spi_tranceive+0x70>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 1ce:	a5 85       	ldd	r26, Z+13	; 0x0d
 1d0:	b6 85       	ldd	r27, Z+14	; 0x0e
 1d2:	8c 91       	ld	r24, X
 1d4:	88 23       	and	r24, r24
 1d6:	8c f0       	brlt	.+34     	; 0x1fa <_spi_tranceive+0x66>
        {
            *state->spdr = tran_len ? tran_buf[0] : 0xFF;
 1d8:	a1 85       	ldd	r26, Z+9	; 0x09
 1da:	b2 85       	ldd	r27, Z+10	; 0x0a
 1dc:	aa 20       	and	r10, r10
 1de:	19 f0       	breq	.+6      	; 0x1e6 <_spi_tranceive+0x52>
 1e0:	e7 01       	movw	r28, r14
 1e2:	88 81       	ld	r24, Y
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <_spi_tranceive+0x54>
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 1ea:	05 84       	ldd	r0, Z+13	; 0x0d
 1ec:	f6 85       	ldd	r31, Z+14	; 0x0e
 1ee:	e0 2d       	mov	r30, r0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	80 83       	st	Z, r24

            return SPI_PENDING;
 1f6:	8e ef       	ldi	r24, 0xFE	; 254
 1f8:	35 c0       	rjmp	.+106    	; 0x264 <_spi_tranceive+0xd0>
        }

        *state->spcr &= ~(1 << SPIF);
 1fa:	8c 91       	ld	r24, X
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	8c 93       	st	X, r24
        ++i;
 200:	c1 e0       	ldi	r28, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <_spi_tranceive+0x72>

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;

    uint8_t i = 0;
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 208:	cd 17       	cp	r28, r29
 20a:	00 f5       	brcc	.+64     	; 0x24c <_spi_tranceive+0xb8>
	{
		if (state->mode == SPI_MASTER)
		    _delay_us(75);
		
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 20c:	99 24       	eor	r9, r9
 20e:	9a 94       	dec	r9
        ++i;
    }
	
	for (; i < len; ++i)
	{
		if (state->mode == SPI_MASTER)
 210:	f8 01       	movw	r30, r16
 212:	90 85       	ldd	r25, Z+8	; 0x08
 214:	93 70       	andi	r25, 0x03	; 3
 216:	19 f4       	brne	.+6      	; 0x21e <_spi_tranceive+0x8a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	f8 ec       	ldi	r31, 0xC8	; 200
 21a:	fa 95       	dec	r31
 21c:	f1 f7       	brne	.-4      	; 0x21a <_spi_tranceive+0x86>
		    _delay_us(75);
		
		uint8_t tran = i < tran_len ? tran_buf[i] : 0xFF;
 21e:	ca 15       	cp	r28, r10
 220:	28 f4       	brcc	.+10     	; 0x22c <_spi_tranceive+0x98>
 222:	f7 01       	movw	r30, r14
 224:	ec 0f       	add	r30, r28
 226:	f1 1d       	adc	r31, r1
 228:	80 81       	ld	r24, Z
 22a:	01 c0       	rjmp	.+2      	; 0x22e <_spi_tranceive+0x9a>
 22c:	89 2d       	mov	r24, r9
	    uint8_t recv = state->tranceive_byte(tran);	
 22e:	d8 01       	movw	r26, r16
 230:	51 96       	adiw	r26, 0x11	; 17
 232:	ed 91       	ld	r30, X+
 234:	fc 91       	ld	r31, X
 236:	52 97       	sbiw	r26, 0x12	; 18
 238:	09 95       	icall
		
		if (i < recv_len)
 23a:	cb 15       	cp	r28, r11
 23c:	20 f4       	brcc	.+8      	; 0x246 <_spi_tranceive+0xb2>
		    recv_buf[i] = recv;
 23e:	f6 01       	movw	r30, r12
 240:	ec 0f       	add	r30, r28
 242:	f1 1d       	adc	r31, r1
 244:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	cd 17       	cp	r28, r29
 24a:	10 f3       	brcs	.-60     	; 0x210 <_spi_tranceive+0x7c>
		
		if (i < recv_len)
		    recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 24c:	e8 01       	movw	r28, r16
 24e:	ef 85       	ldd	r30, Y+15	; 0x0f
 250:	f8 89       	ldd	r31, Y+16	; 0x10
 252:	30 97       	sbiw	r30, 0x00	; 0
 254:	31 f0       	breq	.+12     	; 0x262 <_spi_tranceive+0xce>
        state->on_completed(state);
 256:	c8 01       	movw	r24, r16
 258:	09 95       	icall

    return SPI_OK;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	03 c0       	rjmp	.+6      	; 0x264 <_spi_tranceive+0xd0>
    uint8_t recv_len = state->recv_len;
    uint8_t* recv_buf = state->recv_buf;

    uint8_t len = MAX(tran_len, recv_len);
    if (!len)
        return SPI_OK;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	01 c0       	rjmp	.+2      	; 0x264 <_spi_tranceive+0xd0>
	}
	
    if (state->on_completed)
        state->on_completed(state);

    return SPI_OK;
 262:	80 e0       	ldi	r24, 0x00	; 0
}   
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	bf 90       	pop	r11
 276:	af 90       	pop	r10
 278:	9f 90       	pop	r9
 27a:	08 95       	ret

0000027c <_spi_isr>:

void _spi_isr(spi_state_t* state)
{  
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
    if (state->recv_len)
 280:	dc 01       	movw	r26, r24
 282:	15 96       	adiw	r26, 0x05	; 5
 284:	2c 91       	ld	r18, X
 286:	15 97       	sbiw	r26, 0x05	; 5
 288:	22 23       	and	r18, r18
 28a:	51 f0       	breq	.+20     	; 0x2a0 <_spi_isr+0x24>
        state->recv_buf[0] = *state->spdr;
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	ed 91       	ld	r30, X+
 290:	fc 91       	ld	r31, X
 292:	13 97       	sbiw	r26, 0x03	; 3
 294:	19 96       	adiw	r26, 0x09	; 9
 296:	0d 90       	ld	r0, X+
 298:	bc 91       	ld	r27, X
 29a:	a0 2d       	mov	r26, r0
 29c:	2c 91       	ld	r18, X
 29e:	20 83       	st	Z, r18

    _spi_tranceive(state);
 2a0:	79 df       	rcall	.-270    	; 0x194 <_spi_tranceive>
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <max7221_write>:
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <max7221_write+0x6>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 2b2:	1a 82       	std	Y+2, r1	; 0x02
 2b4:	19 82       	std	Y+1, r1	; 0x01

    // store the command in the buffer
    arr[device*2] = address;
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	e1 e0       	ldi	r30, 0x01	; 1
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ec 0f       	add	r30, r28
 2c2:	fd 1f       	adc	r31, r29
 2c4:	e8 0f       	add	r30, r24
 2c6:	f9 1f       	adc	r31, r25
 2c8:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 2ca:	fe 01       	movw	r30, r28
 2cc:	e8 0f       	add	r30, r24
 2ce:	f9 1f       	adc	r31, r25
 2d0:	42 83       	std	Z+2, r20	; 0x02
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 2d2:	28 98       	cbi	0x05, 0	; 5
 2d4:	fe 01       	movw	r30, r28
 2d6:	31 96       	adiw	r30, 0x01	; 1
 2d8:	be 01       	movw	r22, r28
 2da:	6d 5f       	subi	r22, 0xFD	; 253
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 2de:	57 e0       	ldi	r21, 0x07	; 7
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	22 c0       	rjmp	.+68     	; 0x328 <__stack+0x29>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 2e4:	80 81       	ld	r24, Z
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <max7221_write+0x48>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <max7221_write+0x44>
 2f4:	80 ff       	sbrs	r24, 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <max7221_write+0x54>
                DATA_ASSERT();
 2f8:	29 9a       	sbi	0x05, 1	; 5
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <max7221_write+0x56>
            else
                DATA_DISABLE();
 2fc:	29 98       	cbi	0x05, 1	; 5
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <__stack+0x1>
 304:	00 00       	nop

            _delay_us(5);
            SCK_ASSERT();
 306:	5f 9a       	sbi	0x0b, 7	; 11
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <__stack+0xb>
 30e:	00 00       	nop
            _delay_us(5);
            SCK_DISABLE();
 310:	5f 98       	cbi	0x0b, 7	; 11
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	8a 95       	dec	r24
 316:	f1 f7       	brne	.-4      	; 0x314 <__stack+0x15>
 318:	00 00       	nop
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	31 09       	sbc	r19, r1
 31e:	10 f7       	brcc	.-60     	; 0x2e4 <max7221_write+0x3c>
 320:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 322:	e6 17       	cp	r30, r22
 324:	f7 07       	cpc	r31, r23
 326:	19 f0       	breq	.+6      	; 0x32e <__stack+0x2f>
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 328:	25 2f       	mov	r18, r21
 32a:	34 2f       	mov	r19, r20
 32c:	db cf       	rjmp	.-74     	; 0x2e4 <max7221_write+0x3c>
            SCK_DISABLE();
            _delay_us(5);
        }
    }

    CS_DISABLE();
 32e:	28 9a       	sbi	0x05, 0	; 5
    // store the command in the buffer
    arr[device*2] = address;
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
}
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <max7221_init>:

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 33a:	20 9a       	sbi	0x04, 0	; 4
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 33c:	57 9a       	sbi	0x0a, 7	; 10
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 33e:	21 9a       	sbi	0x04, 1	; 4

    CS_ASSERT();
 340:	28 98       	cbi	0x05, 0	; 5
    SCK_ASSERT();
 342:	5f 9a       	sbi	0x0b, 7	; 11
    DATA_ASSERT();
 344:	29 9a       	sbi	0x05, 1	; 5

    for (uint8_t i = 0; i < MAX7221_DEVICES; ++i)
    {
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
 346:	47 e0       	ldi	r20, 0x07	; 7
 348:	6b e0       	ldi	r22, 0x0B	; 11
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	ad df       	rcall	.-166    	; 0x2a8 <max7221_write>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	69 e0       	ldi	r22, 0x09	; 9
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	a9 df       	rcall	.-174    	; 0x2a8 <max7221_write>
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	6c e0       	ldi	r22, 0x0C	; 12
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	a5 df       	rcall	.-182    	; 0x2a8 <max7221_write>
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
 35e:	48 e0       	ldi	r20, 0x08	; 8
 360:	6a e0       	ldi	r22, 0x0A	; 10
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	a1 df       	rcall	.-190    	; 0x2a8 <max7221_write>
 366:	08 95       	ret

00000368 <max7221_display>:
    spi_write(arr, MAX7221_DEVICES*2);
}

void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
    if (c >= '0' && c <= '9')
 368:	e0 ed       	ldi	r30, 0xD0	; 208
 36a:	e4 0f       	add	r30, r20
 36c:	ea 30       	cpi	r30, 0x0A	; 10
 36e:	98 f0       	brcs	.+38     	; 0x396 <max7221_display+0x2e>
        c -= '0';
    else if (c >= 'a' && c <= 'z')
 370:	9f e9       	ldi	r25, 0x9F	; 159
 372:	94 0f       	add	r25, r20
 374:	9a 31       	cpi	r25, 0x1A	; 26
 376:	18 f4       	brcc	.+6      	; 0x37e <max7221_display+0x16>
        c -= 'a' - 10;
 378:	e9 ea       	ldi	r30, 0xA9	; 169
 37a:	e4 0f       	add	r30, r20
 37c:	0c c0       	rjmp	.+24     	; 0x396 <max7221_display+0x2e>
    else if (c >= 'A' && c <= 'Z')
 37e:	9f eb       	ldi	r25, 0xBF	; 191
 380:	94 0f       	add	r25, r20
 382:	9a 31       	cpi	r25, 0x1A	; 26
 384:	18 f4       	brcc	.+6      	; 0x38c <max7221_display+0x24>
        c -= 'A' - 10;
 386:	e9 ec       	ldi	r30, 0xC9	; 201
 388:	e4 0f       	add	r30, r20
 38a:	05 c0       	rjmp	.+10     	; 0x396 <max7221_display+0x2e>
    else if (c > 0x0F)
 38c:	40 31       	cpi	r20, 0x10	; 16
 38e:	10 f0       	brcs	.+4      	; 0x394 <max7221_display+0x2c>
        c = 0;
 390:	e0 e0       	ldi	r30, 0x00	; 0
 392:	01 c0       	rjmp	.+2      	; 0x396 <max7221_display+0x2e>
 394:	e4 2f       	mov	r30, r20
    {
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ed 5e       	subi	r30, 0xED	; 237
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	40 81       	ld	r20, Z
 39e:	84 df       	rcall	.-248    	; 0x2a8 <max7221_write>
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
