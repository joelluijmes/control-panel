
instruction.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800124  00800124  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb6  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b14  00000000  00000000  0000258e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eed  00000000  00000000  000030a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00003f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065d  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3e  00000000  00000000  00004909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	e3 c2       	rjmp	.+1478   	; 0x5e6 <__vector_15>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ec e2       	ldi	r30, 0x2C	; 44
  3c:	f7 e0       	ldi	r31, 0x07	; 7
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a4 32       	cpi	r26, 0x24	; 36
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a4 e2       	ldi	r26, 0x24	; 36
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a8 35       	cpi	r26, 0x58	; 88
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	0f d0       	rcall	.+30     	; 0x7a <main>
  5c:	65 c3       	rjmp	.+1738   	; 0x728 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <display_update>:
    max7221_display(0, MAX7221_DIGIT5, (val/0x100)%0x10);
}

static inline void print_address(uint16_t val)
{
    max7221_display(1, MAX7221_DIGIT5, val%0x10);
  60:	43 e0       	ldi	r20, 0x03	; 3
  62:	66 e0       	ldi	r22, 0x06	; 6
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	61 d2       	rcall	.+1218   	; 0x52a <max7221_display>
    max7221_display(1, MAX7221_DIGIT7, (val/0x10)%0x10);
  68:	42 e0       	ldi	r20, 0x02	; 2
  6a:	68 e0       	ldi	r22, 0x08	; 8
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	5d d2       	rcall	.+1210   	; 0x52a <max7221_display>
    max7221_display(1, MAX7221_DIGIT3, (val/0x100)%0x10);
  70:	41 e0       	ldi	r20, 0x01	; 1
  72:	64 e0       	ldi	r22, 0x04	; 4
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	59 d2       	rcall	.+1202   	; 0x52a <max7221_display>
  78:	08 95       	ret

0000007a <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/wdt.h>

int main(void)
{
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
  82:	27 97       	sbiw	r28, 0x07	; 7
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	f8 94       	cli
  88:	de bf       	out	0x3e, r29	; 62
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	cd bf       	out	0x3d, r28	; 61
    // make sure WDT is disabled after a reset
    MCUSR &= ~(1 << WDRF);
  8e:	84 b7       	in	r24, 0x34	; 52
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1 << WDCE) | (1 << WDE);
  94:	e0 e6       	ldi	r30, 0x60	; 96
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	80 83       	st	Z, r24
    WDTCSR = 0x00;
  9e:	10 82       	st	Z, r1

    //wdt_enable(WDTO_30MS);

    // initialize the ADC with prescaler of 16x (ADC clock must < 1MHz)
    ADMUX = 1 << REFS0;
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    ADCSRA = 1 << ADEN | 1 << ADPS2;
  a6:	84 e8       	ldi	r24, 0x84	; 132
  a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>

    // initialize single LED driver (just a fancy shift register)
    stp16_init();
  ac:	5b d2       	rcall	.+1206   	; 0x564 <stp16_init>
    stp16_output(1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	5e d2       	rcall	.+1212   	; 0x56e <stp16_output>
    // initialize the displays driver
    max7221_init();
  b2:	10 d2       	rcall	.+1056   	; 0x4d4 <max7221_init>
    
    // initialize the SPI, note that the slave is nonblocking for the first byte, meaning
    // that continues until the interrupt is called. The rest of the SPI transmission is
    // blocking.
    spi_init(SPI_SLAVE | SPI_NONBLOCKING, SPI_64X);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	68 d2       	rcall	.+1232   	; 0x58a <spi_init>
    proto_init(spi_tranceive, &spi_state.on_completed);
  ba:	6f e0       	ldi	r22, 0x0F	; 15
  bc:	71 e0       	ldi	r23, 0x01	; 1
  be:	88 ee       	ldi	r24, 0xE8	; 232
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	41 d1       	rcall	.+642    	; 0x346 <proto_init>
    sei();
  c4:	78 94       	sei
        if (status == FAILED)
            __asm("nop");

        // update the display on successful transmission :)
        if (status == IDLE)
            instruction = tmp_instruction;
  c6:	14 e1       	ldi	r17, 0x14	; 20
    static proto_status_t status;
    
    while (1) 
    {
        // reset the watchdog
        wdt_reset();
  c8:	a8 95       	wdr

        status = proto_status();
  ca:	44 d1       	rcall	.+648    	; 0x354 <proto_status>
  cc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <status.1848>

        // while the transmission hasn't completed, process user interaction
        while (status != IDLE && status != FAILED)
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	40 f0       	brcs	.+16     	; 0xe4 <main+0x6a>
        {
            // always update the display, it also handles the switch position (locally)
            display_update(&instruction);
  d4:	88 e3       	ldi	r24, 0x38	; 56
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	c3 df       	rcall	.-122    	; 0x60 <display_update>
            status = proto_status();            
  da:	3c d1       	rcall	.+632    	; 0x354 <proto_status>
  dc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <status.1848>
        wdt_reset();

        status = proto_status();

        // while the transmission hasn't completed, process user interaction
        while (status != IDLE && status != FAILED)
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	c0 f7       	brcc	.-16     	; 0xd4 <main+0x5a>
            display_update(&instruction);
            status = proto_status();            
        }

        // debug
        if (status == FAILED)
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x72>
            __asm("nop");
  e8:	00 00       	nop
  ea:	0b c0       	rjmp	.+22     	; 0x102 <main+0x88>

        // update the display on successful transmission :)
        if (status == IDLE)
  ec:	81 11       	cpse	r24, r1
  ee:	09 c0       	rjmp	.+18     	; 0x102 <main+0x88>
            instruction = tmp_instruction;
  f0:	e4 e2       	ldi	r30, 0x24	; 36
  f2:	f1 e0       	ldi	r31, 0x01	; 1
  f4:	a8 e3       	ldi	r26, 0x38	; 56
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	81 2f       	mov	r24, r17
  fa:	01 90       	ld	r0, Z+
  fc:	0d 92       	st	X+, r0
  fe:	8a 95       	dec	r24
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x80>

        // create the packet
        proto_packet_t receive = proto_create(2, (uint8_t*)&tmp_instruction, sizeof(instruction_t));
 102:	41 2f       	mov	r20, r17
 104:	64 e2       	ldi	r22, 0x24	; 36
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	28 d1       	rcall	.+592    	; 0x35c <proto_create>
 10c:	29 83       	std	Y+1, r18	; 0x01
 10e:	3a 83       	std	Y+2, r19	; 0x02
 110:	4b 83       	std	Y+3, r20	; 0x03
 112:	5c 83       	std	Y+4, r21	; 0x04
 114:	6d 83       	std	Y+5, r22	; 0x05
 116:	7e 83       	std	Y+6, r23	; 0x06
 118:	8f 83       	std	Y+7, r24	; 0x07
int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive);
void proto_update_crc(proto_packet_t* packet);

static inline int8_t proto_receive(proto_packet_t* receive)
{
    return proto_tranceive(0, receive);
 11a:	be 01       	movw	r22, r28
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	48 d1       	rcall	.+656    	; 0x3b6 <proto_tranceive>
        // start the receivement of the packet
        proto_receive(&receive);
    }
 126:	d0 cf       	rjmp	.-96     	; 0xc8 <main+0x4e>

00000128 <calculate_crc>:
}

void proto_update_crc(proto_packet_t* packet)
{
    packet->crc = calculate_crc(packet);
}
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	3f ef       	ldi	r19, 0xFF	; 255
 130:	28 27       	eor	r18, r24
 132:	02 2e       	mov	r0, r18
 134:	22 95       	swap	r18
 136:	20 7f       	andi	r18, 0xF0	; 240
 138:	20 25       	eor	r18, r0
 13a:	03 2e       	mov	r0, r19
 13c:	32 2f       	mov	r19, r18
 13e:	22 95       	swap	r18
 140:	2f 70       	andi	r18, 0x0F	; 15
 142:	02 26       	eor	r0, r18
 144:	26 95       	lsr	r18
 146:	32 27       	eor	r19, r18
 148:	23 27       	eor	r18, r19
 14a:	22 0f       	add	r18, r18
 14c:	22 0f       	add	r18, r18
 14e:	22 0f       	add	r18, r18
 150:	20 25       	eor	r18, r0
 152:	41 81       	ldd	r20, Z+1	; 0x01
 154:	c9 01       	movw	r24, r18
 156:	84 27       	eor	r24, r20
 158:	08 2e       	mov	r0, r24
 15a:	82 95       	swap	r24
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	80 25       	eor	r24, r0
 160:	09 2e       	mov	r0, r25
 162:	98 2f       	mov	r25, r24
 164:	82 95       	swap	r24
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	08 26       	eor	r0, r24
 16a:	86 95       	lsr	r24
 16c:	98 27       	eor	r25, r24
 16e:	89 27       	eor	r24, r25
 170:	88 0f       	add	r24, r24
 172:	88 0f       	add	r24, r24
 174:	88 0f       	add	r24, r24
 176:	80 25       	eor	r24, r0
 178:	44 23       	and	r20, r20
 17a:	f9 f0       	breq	.+62     	; 0x1ba <calculate_crc+0x92>
 17c:	02 80       	ldd	r0, Z+2	; 0x02
 17e:	f3 81       	ldd	r31, Z+3	; 0x03
 180:	e0 2d       	mov	r30, r0
 182:	41 50       	subi	r20, 0x01	; 1
 184:	24 2f       	mov	r18, r20
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	2e 0f       	add	r18, r30
 18e:	3f 1f       	adc	r19, r31
 190:	41 91       	ld	r20, Z+
 192:	84 27       	eor	r24, r20
 194:	08 2e       	mov	r0, r24
 196:	82 95       	swap	r24
 198:	80 7f       	andi	r24, 0xF0	; 240
 19a:	80 25       	eor	r24, r0
 19c:	09 2e       	mov	r0, r25
 19e:	98 2f       	mov	r25, r24
 1a0:	82 95       	swap	r24
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	08 26       	eor	r0, r24
 1a6:	86 95       	lsr	r24
 1a8:	98 27       	eor	r25, r24
 1aa:	89 27       	eor	r24, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	88 0f       	add	r24, r24
 1b0:	88 0f       	add	r24, r24
 1b2:	80 25       	eor	r24, r0
 1b4:	e2 17       	cp	r30, r18
 1b6:	f3 07       	cpc	r31, r19
 1b8:	59 f7       	brne	.-42     	; 0x190 <calculate_crc+0x68>
 1ba:	08 95       	ret

000001bc <completed>:
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ed e4       	ldi	r30, 0x4D	; 77
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	c3 81       	ldd	r28, Z+3	; 0x03
 1c6:	d4 81       	ldd	r29, Z+4	; 0x04
 1c8:	a5 81       	ldd	r26, Z+5	; 0x05
 1ca:	b6 81       	ldd	r27, Z+6	; 0x06
 1cc:	20 81       	ld	r18, Z
 1ce:	27 70       	andi	r18, 0x07	; 7
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	23 30       	cpi	r18, 0x03	; 3
 1d4:	31 05       	cpc	r19, r1
 1d6:	09 f4       	brne	.+2      	; 0x1da <completed+0x1e>
 1d8:	4e c0       	rjmp	.+156    	; 0x276 <completed+0xba>
 1da:	24 30       	cpi	r18, 0x04	; 4
 1dc:	31 05       	cpc	r19, r1
 1de:	09 f4       	brne	.+2      	; 0x1e2 <completed+0x26>
 1e0:	7d c0       	rjmp	.+250    	; 0x2dc <completed+0x120>
 1e2:	22 30       	cpi	r18, 0x02	; 2
 1e4:	31 05       	cpc	r19, r1
 1e6:	09 f0       	breq	.+2      	; 0x1ea <completed+0x2e>
 1e8:	ab c0       	rjmp	.+342    	; 0x340 <__stack+0x41>
 1ea:	10 97       	sbiw	r26, 0x00	; 0
 1ec:	01 f1       	breq	.+64     	; 0x22e <completed+0x72>
 1ee:	9c 91       	ld	r25, X
 1f0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <state+0x1>
 1f4:	98 17       	cp	r25, r24
 1f6:	29 f0       	breq	.+10     	; 0x202 <completed+0x46>
 1f8:	80 81       	ld	r24, Z
 1fa:	88 7f       	andi	r24, 0xF8	; 248
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	80 83       	st	Z, r24
 200:	9f c0       	rjmp	.+318    	; 0x340 <__stack+0x41>
 202:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <state+0x2>
 206:	11 96       	adiw	r26, 0x01	; 1
 208:	9c 91       	ld	r25, X
 20a:	11 97       	sbiw	r26, 0x01	; 1
 20c:	98 17       	cp	r25, r24
 20e:	40 f4       	brcc	.+16     	; 0x220 <completed+0x64>
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	8c 91       	ld	r24, X
 214:	16 97       	sbiw	r26, 0x06	; 6
 216:	81 60       	ori	r24, 0x01	; 1
 218:	16 96       	adiw	r26, 0x06	; 6
 21a:	8c 93       	st	X, r24
 21c:	16 97       	sbiw	r26, 0x06	; 6
 21e:	79 c0       	rjmp	.+242    	; 0x312 <__stack+0x13>
 220:	89 17       	cp	r24, r25
 222:	08 f0       	brcs	.+2      	; 0x226 <completed+0x6a>
 224:	76 c0       	rjmp	.+236    	; 0x312 <__stack+0x13>
 226:	11 96       	adiw	r26, 0x01	; 1
 228:	8c 93       	st	X, r24
 22a:	11 97       	sbiw	r26, 0x01	; 1
 22c:	72 c0       	rjmp	.+228    	; 0x312 <__stack+0x13>
 22e:	ed e4       	ldi	r30, 0x4D	; 77
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	80 81       	ld	r24, Z
 234:	88 7f       	andi	r24, 0xF8	; 248
 236:	83 60       	ori	r24, 0x03	; 3
 238:	80 83       	st	Z, r24
 23a:	20 97       	sbiw	r28, 0x00	; 0
 23c:	81 f4       	brne	.+32     	; 0x25e <completed+0xa2>
 23e:	80 c0       	rjmp	.+256    	; 0x340 <__stack+0x41>
 240:	12 96       	adiw	r26, 0x02	; 2
 242:	4d 91       	ld	r20, X+
 244:	5c 91       	ld	r21, X
 246:	13 97       	sbiw	r26, 0x03	; 3
 248:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 24c:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	2c 91       	ld	r18, X
 254:	69 81       	ldd	r22, Y+1	; 0x01
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	9b 81       	ldd	r25, Y+3	; 0x03
 25a:	09 95       	icall
 25c:	71 c0       	rjmp	.+226    	; 0x340 <__stack+0x41>
 25e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 262:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	69 81       	ldd	r22, Y+1	; 0x01
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	9b 81       	ldd	r25, Y+3	; 0x03
 272:	09 95       	icall
 274:	65 c0       	rjmp	.+202    	; 0x340 <__stack+0x41>
 276:	ed e4       	ldi	r30, 0x4D	; 77
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	80 81       	ld	r24, Z
 27c:	88 7f       	andi	r24, 0xF8	; 248
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	80 83       	st	Z, r24
 282:	20 97       	sbiw	r28, 0x00	; 0
 284:	79 f0       	breq	.+30     	; 0x2a4 <completed+0xe8>
 286:	10 97       	sbiw	r26, 0x00	; 0
 288:	e9 f0       	breq	.+58     	; 0x2c4 <completed+0x108>
 28a:	ad 01       	movw	r20, r26
 28c:	4c 5f       	subi	r20, 0xFC	; 252
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 294:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 298:	22 e0       	ldi	r18, 0x02	; 2
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	ce 01       	movw	r24, r28
 29e:	04 96       	adiw	r24, 0x04	; 4
 2a0:	09 95       	icall
 2a2:	4e c0       	rjmp	.+156    	; 0x340 <__stack+0x41>
 2a4:	10 97       	sbiw	r26, 0x00	; 0
 2a6:	09 f4       	brne	.+2      	; 0x2aa <completed+0xee>
 2a8:	4b c0       	rjmp	.+150    	; 0x340 <__stack+0x41>
 2aa:	ad 01       	movw	r20, r26
 2ac:	4c 5f       	subi	r20, 0xFC	; 252
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 2b4:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 2b8:	22 e0       	ldi	r18, 0x02	; 2
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	09 95       	icall
 2c2:	3e c0       	rjmp	.+124    	; 0x340 <__stack+0x41>
 2c4:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 2c8:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	ce 01       	movw	r24, r28
 2d6:	04 96       	adiw	r24, 0x04	; 4
 2d8:	09 95       	icall
 2da:	32 c0       	rjmp	.+100    	; 0x340 <__stack+0x41>
 2dc:	00 00       	nop
 2de:	ed e4       	ldi	r30, 0x4D	; 77
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	80 81       	ld	r24, Z
 2e4:	88 7f       	andi	r24, 0xF8	; 248
 2e6:	80 83       	st	Z, r24
 2e8:	10 97       	sbiw	r26, 0x00	; 0
 2ea:	89 f0       	breq	.+34     	; 0x30e <__stack+0xf>
 2ec:	14 96       	adiw	r26, 0x04	; 4
 2ee:	cd 91       	ld	r28, X+
 2f0:	dc 91       	ld	r29, X
 2f2:	15 97       	sbiw	r26, 0x05	; 5
 2f4:	cd 01       	movw	r24, r26
 2f6:	18 df       	rcall	.-464    	; 0x128 <calculate_crc>
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	c8 17       	cp	r28, r24
 2fc:	d9 07       	cpc	r29, r25
 2fe:	09 f4       	brne	.+2      	; 0x302 <__stack+0x3>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	ed e4       	ldi	r30, 0x4D	; 77
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	80 81       	ld	r24, Z
 308:	88 7f       	andi	r24, 0xF8	; 248
 30a:	82 2b       	or	r24, r18
 30c:	80 83       	st	Z, r24
 30e:	00 00       	nop
 310:	17 c0       	rjmp	.+46     	; 0x340 <__stack+0x41>
 312:	ed e4       	ldi	r30, 0x4D	; 77
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	80 81       	ld	r24, Z
 318:	88 7f       	andi	r24, 0xF8	; 248
 31a:	83 60       	ori	r24, 0x03	; 3
 31c:	80 83       	st	Z, r24
 31e:	20 97       	sbiw	r28, 0x00	; 0
 320:	09 f0       	breq	.+2      	; 0x324 <__stack+0x25>
 322:	8e cf       	rjmp	.-228    	; 0x240 <completed+0x84>
 324:	12 96       	adiw	r26, 0x02	; 2
 326:	4d 91       	ld	r20, X+
 328:	5c 91       	ld	r21, X
 32a:	13 97       	sbiw	r26, 0x03	; 3
 32c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 330:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	2c 91       	ld	r18, X
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	09 95       	icall
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <proto_init>:
 346:	ed e4       	ldi	r30, 0x4D	; 77
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	90 87       	std	Z+8, r25	; 0x08
 34c:	87 83       	std	Z+7, r24	; 0x07
 34e:	72 87       	std	Z+10, r23	; 0x0a
 350:	61 87       	std	Z+9, r22	; 0x09
 352:	08 95       	ret

00000354 <proto_status>:
 354:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <state>
 358:	87 70       	andi	r24, 0x07	; 7
 35a:	08 95       	ret

0000035c <proto_create>:
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	2e 97       	sbiw	r28, 0x0e	; 14
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	fe 01       	movw	r30, r28
 372:	38 96       	adiw	r30, 0x08	; 8
 374:	97 e0       	ldi	r25, 0x07	; 7
 376:	df 01       	movw	r26, r30
 378:	1d 92       	st	X+, r1
 37a:	9a 95       	dec	r25
 37c:	e9 f7       	brne	.-6      	; 0x378 <proto_create+0x1c>
 37e:	88 87       	std	Y+8, r24	; 0x08
 380:	49 87       	std	Y+9, r20	; 0x09
 382:	7b 87       	std	Y+11, r23	; 0x0b
 384:	6a 87       	std	Y+10, r22	; 0x0a
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	de 01       	movw	r26, r28
 38a:	11 96       	adiw	r26, 0x01	; 1
 38c:	01 90       	ld	r0, Z+
 38e:	0d 92       	st	X+, r0
 390:	8a 95       	dec	r24
 392:	e1 f7       	brne	.-8      	; 0x38c <proto_create+0x30>
 394:	29 81       	ldd	r18, Y+1	; 0x01
 396:	3a 81       	ldd	r19, Y+2	; 0x02
 398:	4b 81       	ldd	r20, Y+3	; 0x03
 39a:	5c 81       	ldd	r21, Y+4	; 0x04
 39c:	6d 81       	ldd	r22, Y+5	; 0x05
 39e:	7e 81       	ldd	r23, Y+6	; 0x06
 3a0:	8f 81       	ldd	r24, Y+7	; 0x07
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	2e 96       	adiw	r28, 0x0e	; 14
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <proto_tranceive>:

int8_t proto_tranceive(const proto_packet_t* transmit, proto_packet_t* receive)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	dc 01       	movw	r26, r24
    //if (state.status != IDLE)
    //return PROTO_BUSY;

    *state.on_completed = completed;
 3bc:	ed e4       	ldi	r30, 0x4D	; 77
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	c1 85       	ldd	r28, Z+9	; 0x09
 3c2:	d2 85       	ldd	r29, Z+10	; 0x0a
 3c4:	8e ed       	ldi	r24, 0xDE	; 222
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	99 83       	std	Y+1, r25	; 0x01
 3ca:	88 83       	st	Y, r24
    state.transmit = transmit;
 3cc:	b4 83       	std	Z+4, r27	; 0x04
 3ce:	a3 83       	std	Z+3, r26	; 0x03
    state.receive = receive;
 3d0:	76 83       	std	Z+6, r23	; 0x06
 3d2:	65 83       	std	Z+5, r22	; 0x05

    state.status = HEADER;
 3d4:	90 81       	ld	r25, Z
 3d6:	98 7f       	andi	r25, 0xF8	; 248
 3d8:	92 60       	ori	r25, 0x02	; 2
 3da:	90 83       	st	Z, r25

    // tranceive
    if (transmit != 0 && receive != 0)
 3dc:	10 97       	sbiw	r26, 0x00	; 0
 3de:	69 f0       	breq	.+26     	; 0x3fa <proto_tranceive+0x44>
 3e0:	67 2b       	or	r22, r23
 3e2:	c9 f0       	breq	.+50     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, state.buf, PROTO_HEADER);
 3e4:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 3e8:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 3ec:	22 e0       	ldi	r18, 0x02	; 2
 3ee:	4e e4       	ldi	r20, 0x4E	; 78
 3f0:	51 e0       	ldi	r21, 0x01	; 1
 3f2:	62 e0       	ldi	r22, 0x02	; 2
 3f4:	cd 01       	movw	r24, r26
 3f6:	09 95       	icall
 3f8:	20 c0       	rjmp	.+64     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
    // receive only
    if (transmit == 0 && receive != 0)
 3fa:	67 2b       	or	r22, r23
 3fc:	b9 f0       	breq	.+46     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
        return state.tranceive(0, 0, state.buf, PROTO_HEADER);
 3fe:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 402:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 406:	22 e0       	ldi	r18, 0x02	; 2
 408:	4e e4       	ldi	r20, 0x4E	; 78
 40a:	51 e0       	ldi	r21, 0x01	; 1
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	09 95       	icall
 414:	12 c0       	rjmp	.+36     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
    // transmit only
    if (transmit != 0 && receive == 0)
        return state.tranceive((uint8_t*)&transmit->id, PROTO_HEADER, 0, 0);
 416:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <state+0x7>
 41a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <state+0x8>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	62 e0       	ldi	r22, 0x02	; 2
 426:	cd 01       	movw	r24, r26
 428:	09 95       	icall
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>

    state.status = FAILED;
 42c:	ed e4       	ldi	r30, 0x4D	; 77
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	80 81       	ld	r24, Z
 432:	88 7f       	andi	r24, 0xF8	; 248
 434:	81 60       	ori	r24, 0x01	; 1
 436:	80 83       	st	Z, r24
    return PROTO_INV_ARG;
 438:	8b ef       	ldi	r24, 0xFB	; 251
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <max7221_write>:
            max7221_write(i, j, 0);
    }    
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 d0       	rcall	.+0      	; 0x446 <max7221_write+0x6>
 446:	00 d0       	rcall	.+0      	; 0x448 <max7221_write+0x8>
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 44c:	19 82       	std	Y+1, r1	; 0x01
 44e:	1a 82       	std	Y+2, r1	; 0x02
 450:	1b 82       	std	Y+3, r1	; 0x03
 452:	1c 82       	std	Y+4, r1	; 0x04

    int8_t n = MAX7221_DEVICES - device - 1;
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	98 1b       	sub	r25, r24
 458:	89 2f       	mov	r24, r25
    if (n < 0 || n >= MAX7221_DEVICES)
 45a:	92 30       	cpi	r25, 0x02	; 2
 45c:	a0 f5       	brcc	.+104    	; 0x4c6 <max7221_write+0x86>
        return;

    // store the command in the buffer
    arr[n*2] = address;
 45e:	88 0f       	add	r24, r24
 460:	99 0b       	sbc	r25, r25
 462:	e1 e0       	ldi	r30, 0x01	; 1
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ec 0f       	add	r30, r28
 468:	fd 1f       	adc	r31, r29
 46a:	e8 0f       	add	r30, r24
 46c:	f9 1f       	adc	r31, r25
 46e:	60 83       	st	Z, r22
    arr[n*2 + 1] = data;
 470:	fe 01       	movw	r30, r28
 472:	e8 0f       	add	r30, r24
 474:	f9 1f       	adc	r31, r25
 476:	42 83       	std	Z+2, r20	; 0x02
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	8c 7f       	andi	r24, 0xFC	; 252
 47c:	8b b9       	out	0x0b, r24	; 11
 47e:	fe 01       	movw	r30, r28
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	be 01       	movw	r22, r28
 484:	6b 5f       	subi	r22, 0xFB	; 251
 486:	7f 4f       	sbci	r23, 0xFF	; 255
            max7221_write(i, j, 0);
    }    
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 488:	57 e0       	ldi	r21, 0x07	; 7
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	16 c0       	rjmp	.+44     	; 0x4ba <max7221_write+0x7a>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 48e:	80 81       	ld	r24, Z
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 2e       	mov	r0, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <max7221_write+0x5a>
 496:	95 95       	asr	r25
 498:	87 95       	ror	r24
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <max7221_write+0x56>
 49e:	80 ff       	sbrs	r24, 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <max7221_write+0x66>
                DATA_ASSERT();
 4a2:	2f 9a       	sbi	0x05, 7	; 5
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <max7221_write+0x68>
            else
                DATA_DISABLE();
 4a6:	2f 98       	cbi	0x05, 7	; 5

            SCK_ASSERT();
 4a8:	5d 9a       	sbi	0x0b, 5	; 11
            SCK_DISABLE();
 4aa:	5d 98       	cbi	0x0b, 5	; 11
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	31 09       	sbc	r19, r1
 4b0:	70 f7       	brcc	.-36     	; 0x48e <max7221_write+0x4e>
 4b2:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 4b4:	e6 17       	cp	r30, r22
 4b6:	f7 07       	cpc	r31, r23
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <max7221_write+0x80>
            max7221_write(i, j, 0);
    }    
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 4ba:	25 2f       	mov	r18, r21
 4bc:	34 2f       	mov	r19, r20
 4be:	e7 cf       	rjmp	.-50     	; 0x48e <max7221_write+0x4e>
            SCK_ASSERT();
            SCK_DISABLE();
        }
    }

    CS_DISABLE();
 4c0:	8b b1       	in	r24, 0x0b	; 11
 4c2:	83 60       	ori	r24, 0x03	; 3
 4c4:	8b b9       	out	0x0b, r24	; 11
    // store the command in the buffer
    arr[n*2] = address;
    arr[n*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
}
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <max7221_init>:
#define SCK_DISABLE()   (MAX7221_SCK_PORT   &= ~MAX7221_SCK_MASK)

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 4d8:	8a b1       	in	r24, 0x0a	; 10
 4da:	83 60       	ori	r24, 0x03	; 3
 4dc:	8a b9       	out	0x0a, r24	; 10
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 4de:	55 9a       	sbi	0x0a, 5	; 10
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 4e0:	27 9a       	sbi	0x04, 7	; 4

    CS_ASSERT();
 4e2:	8b b1       	in	r24, 0x0b	; 11
 4e4:	8c 7f       	andi	r24, 0xFC	; 252
 4e6:	8b b9       	out	0x0b, r24	; 11
    SCK_ASSERT();
 4e8:	5d 9a       	sbi	0x0b, 5	; 11
    DATA_ASSERT();
 4ea:	2f 9a       	sbi	0x05, 7	; 5

    for (uint8_t i = 0; i < MAX7221_DEVICES; ++i)
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
    {
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
 4ee:	47 e0       	ldi	r20, 0x07	; 7
 4f0:	6b e0       	ldi	r22, 0x0B	; 11
 4f2:	8d 2f       	mov	r24, r29
 4f4:	a5 df       	rcall	.-182    	; 0x440 <max7221_write>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	69 e0       	ldi	r22, 0x09	; 9
 4fa:	8d 2f       	mov	r24, r29
 4fc:	a1 df       	rcall	.-190    	; 0x440 <max7221_write>
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	6c e0       	ldi	r22, 0x0C	; 12
 502:	8d 2f       	mov	r24, r29
 504:	9d df       	rcall	.-198    	; 0x440 <max7221_write>
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
 506:	48 e0       	ldi	r20, 0x08	; 8
 508:	6a e0       	ldi	r22, 0x0A	; 10
 50a:	8d 2f       	mov	r24, r29
 50c:	99 df       	rcall	.-206    	; 0x440 <max7221_write>

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
 50e:	c1 e0       	ldi	r28, 0x01	; 1
            max7221_write(i, j, 0);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	6c 2f       	mov	r22, r28
 514:	8d 2f       	mov	r24, r29
 516:	94 df       	rcall	.-216    	; 0x440 <max7221_write>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
 518:	cf 5f       	subi	r28, 0xFF	; 255
 51a:	c9 30       	cpi	r28, 0x09	; 9
 51c:	c9 f7       	brne	.-14     	; 0x510 <max7221_init+0x3c>

    CS_ASSERT();
    SCK_ASSERT();
    DATA_ASSERT();

    for (uint8_t i = 0; i < MAX7221_DEVICES; ++i)
 51e:	df 5f       	subi	r29, 0xFF	; 255
 520:	d2 30       	cpi	r29, 0x02	; 2
 522:	29 f7       	brne	.-54     	; 0x4ee <max7221_init+0x1a>

        // clear the displays
        for (uint8_t j = MAX7221_DIGIT0; j <= MAX7221_DIGIT7; ++j)
            max7221_write(i, j, 0);
    }    
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <max7221_display>:
    spi_write(arr, MAX7221_DEVICES*2);
}

void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
    if (c >= '0' && c <= '9')
 52a:	e0 ed       	ldi	r30, 0xD0	; 208
 52c:	e4 0f       	add	r30, r20
 52e:	ea 30       	cpi	r30, 0x0A	; 10
 530:	98 f0       	brcs	.+38     	; 0x558 <max7221_display+0x2e>
        c -= '0';
    else if (c >= 'a' && c <= 'z')
 532:	9f e9       	ldi	r25, 0x9F	; 159
 534:	94 0f       	add	r25, r20
 536:	9a 31       	cpi	r25, 0x1A	; 26
 538:	18 f4       	brcc	.+6      	; 0x540 <max7221_display+0x16>
        c -= 'a' - 10;
 53a:	e9 ea       	ldi	r30, 0xA9	; 169
 53c:	e4 0f       	add	r30, r20
 53e:	0c c0       	rjmp	.+24     	; 0x558 <max7221_display+0x2e>
    else if (c >= 'A' && c <= 'Z')
 540:	9f eb       	ldi	r25, 0xBF	; 191
 542:	94 0f       	add	r25, r20
 544:	9a 31       	cpi	r25, 0x1A	; 26
 546:	18 f4       	brcc	.+6      	; 0x54e <max7221_display+0x24>
        c -= 'A' - 10;
 548:	e9 ec       	ldi	r30, 0xC9	; 201
 54a:	e4 0f       	add	r30, r20
 54c:	05 c0       	rjmp	.+10     	; 0x558 <max7221_display+0x2e>
    else if (c > 0x0F)
 54e:	40 31       	cpi	r20, 0x10	; 16
 550:	10 f0       	brcs	.+4      	; 0x556 <max7221_display+0x2c>
        c = 0;
 552:	e0 e0       	ldi	r30, 0x00	; 0
 554:	01 c0       	rjmp	.+2      	; 0x558 <max7221_display+0x2e>
 556:	e4 2f       	mov	r30, r20
    {
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	ed 5e       	subi	r30, 0xED	; 237
 55c:	fe 4f       	sbci	r31, 0xFE	; 254
 55e:	40 81       	ld	r20, Z
 560:	6f df       	rcall	.-290    	; 0x440 <max7221_write>
 562:	08 95       	ret

00000564 <stp16_init>:
#define OE_ASSERT() (STP16_OE_PORT &= ~STP16_OE_MASK)
#define OE_DISABLE() (STP16_OE_PORT |= STP16_OE_MASK)

void stp16_init(void)
{
    STP16_CLK_DDR |= STP16_CLK_MASK;
 564:	38 9a       	sbi	0x07, 0	; 7
    STP16_DATA_DDR |= STP16_DATA_MASK;
 566:	39 9a       	sbi	0x07, 1	; 7
    STP16_LE_DDR |= STP16_LE_MASK;
 568:	69 9a       	sbi	0x0d, 1	; 13
    STP16_OE_DDR |= STP16_OE_MASK;
 56a:	3a 9a       	sbi	0x07, 2	; 7
 56c:	08 95       	ret

0000056e <stp16_output>:
}

void stp16_output(uint8_t enable)
{
    if (enable)
 56e:	88 23       	and	r24, r24
 570:	21 f0       	breq	.+8      	; 0x57a <stp16_output+0xc>
        OE_ASSERT();
 572:	88 b1       	in	r24, 0x08	; 8
 574:	88 7f       	andi	r24, 0xF8	; 248
 576:	88 b9       	out	0x08, r24	; 8
 578:	08 95       	ret
    else
        OE_DISABLE();
 57a:	42 9a       	sbi	0x08, 2	; 8
 57c:	08 95       	ret

0000057e <spi_tranceive_byte>:
}

int8_t spi_transmit(uint8_t* buffer, uint8_t len)
{
    return spi_tranceive(buffer, len, NULL, len);
}
 57e:	8e bd       	out	0x2e, r24	; 46
 580:	0d b4       	in	r0, 0x2d	; 45
 582:	07 fe       	sbrs	r0, 7
 584:	fd cf       	rjmp	.-6      	; 0x580 <spi_tranceive_byte+0x2>
 586:	8e b5       	in	r24, 0x2e	; 46
 588:	08 95       	ret

0000058a <spi_init>:
 58a:	28 2f       	mov	r18, r24
 58c:	23 70       	andi	r18, 0x03	; 3
 58e:	e8 e0       	ldi	r30, 0x08	; 8
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	90 81       	ld	r25, Z
 594:	9c 7f       	andi	r25, 0xFC	; 252
 596:	92 2b       	or	r25, r18
 598:	90 83       	st	Z, r25
 59a:	96 2f       	mov	r25, r22
 59c:	93 70       	andi	r25, 0x03	; 3
 59e:	90 64       	ori	r25, 0x40	; 64
 5a0:	9c bd       	out	0x2c, r25	; 44
 5a2:	81 11       	cpse	r24, r1
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <spi_init+0x2e>
 5a6:	24 98       	cbi	0x04, 4	; 4
 5a8:	23 9a       	sbi	0x04, 3	; 4
 5aa:	25 9a       	sbi	0x04, 5	; 4
 5ac:	22 9a       	sbi	0x04, 2	; 4
 5ae:	2a 9a       	sbi	0x05, 2	; 5
 5b0:	8c b5       	in	r24, 0x2c	; 44
 5b2:	80 61       	ori	r24, 0x10	; 16
 5b4:	8c bd       	out	0x2c, r24	; 44
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <spi_init+0x3a>
 5b8:	80 ff       	sbrs	r24, 0
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <spi_init+0x3a>
 5bc:	24 9a       	sbi	0x04, 4	; 4
 5be:	23 98       	cbi	0x04, 3	; 4
 5c0:	25 98       	cbi	0x04, 5	; 4
 5c2:	22 98       	cbi	0x04, 2	; 4
 5c4:	62 ff       	sbrs	r22, 2
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <spi_init+0x44>
 5c8:	8d b5       	in	r24, 0x2d	; 45
 5ca:	81 60       	ori	r24, 0x01	; 1
 5cc:	8d bd       	out	0x2d, r24	; 45
 5ce:	08 95       	ret

000005d0 <spi_tranceive>:
 5d0:	e0 e0       	ldi	r30, 0x00	; 0
 5d2:	f1 e0       	ldi	r31, 0x01	; 1
 5d4:	91 83       	std	Z+1, r25	; 0x01
 5d6:	80 83       	st	Z, r24
 5d8:	64 83       	std	Z+4, r22	; 0x04
 5da:	53 83       	std	Z+3, r21	; 0x03
 5dc:	42 83       	std	Z+2, r20	; 0x02
 5de:	25 83       	std	Z+5, r18	; 0x05
 5e0:	cf 01       	movw	r24, r30
 5e2:	26 d0       	rcall	.+76     	; 0x630 <_spi_tranceive>
 5e4:	08 95       	ret

000005e6 <__vector_15>:
    
    return SPDR;
}

ISR(SPI_STC_vect)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
    _spi_isr(&spi_state);
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	77 d0       	rcall	.+238    	; 0x6fc <_spi_isr>
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	fc 01       	movw	r30, r24
    uint8_t len = MAX(state->tran_len, state->recv_len);
 63c:	94 81       	ldd	r25, Z+4	; 0x04
 63e:	85 81       	ldd	r24, Z+5	; 0x05
 640:	89 17       	cp	r24, r25
 642:	10 f4       	brcc	.+4      	; 0x648 <_spi_tranceive+0x18>
 644:	d4 81       	ldd	r29, Z+4	; 0x04
 646:	01 c0       	rjmp	.+2      	; 0x64a <_spi_tranceive+0x1a>
 648:	d5 81       	ldd	r29, Z+5	; 0x05
    uint8_t i = 0;
    
    if (state->mode == (SPI_NONBLOCKING | SPI_SLAVE))
 64a:	80 85       	ldd	r24, Z+8	; 0x08
 64c:	83 70       	andi	r24, 0x03	; 3
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	e9 f4       	brne	.+58     	; 0x68c <_spi_tranceive+0x5c>
    {
        if ((!(*state->spcr & (1 << SPIF))))
 652:	a5 85       	ldd	r26, Z+13	; 0x0d
 654:	b6 85       	ldd	r27, Z+14	; 0x0e
 656:	8c 91       	ld	r24, X
 658:	88 23       	and	r24, r24
 65a:	9c f0       	brlt	.+38     	; 0x682 <_spi_tranceive+0x52>
        {
            *state->spdr = state->tran_len ? state->tran_buf[0] : 0xFF;
 65c:	a1 85       	ldd	r26, Z+9	; 0x09
 65e:	b2 85       	ldd	r27, Z+10	; 0x0a
 660:	84 81       	ldd	r24, Z+4	; 0x04
 662:	88 23       	and	r24, r24
 664:	21 f0       	breq	.+8      	; 0x66e <_spi_tranceive+0x3e>
 666:	c0 81       	ld	r28, Z
 668:	d1 81       	ldd	r29, Z+1	; 0x01
 66a:	88 81       	ld	r24, Y
 66c:	01 c0       	rjmp	.+2      	; 0x670 <_spi_tranceive+0x40>
 66e:	8f ef       	ldi	r24, 0xFF	; 255
 670:	8c 93       	st	X, r24
            *state->spcr |= 1 << SPIF;
 672:	05 84       	ldd	r0, Z+13	; 0x0d
 674:	f6 85       	ldd	r31, Z+14	; 0x0e
 676:	e0 2d       	mov	r30, r0
 678:	80 81       	ld	r24, Z
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	80 83       	st	Z, r24

            return SPI_PENDING;
 67e:	8e ef       	ldi	r24, 0xFE	; 254
 680:	37 c0       	rjmp	.+110    	; 0x6f0 <_spi_tranceive+0xc0>
        }

        *state->spcr &= ~(1 << SPIF);
 682:	8c 91       	ld	r24, X
 684:	8f 77       	andi	r24, 0x7F	; 127
 686:	8c 93       	st	X, r24
        ++i;
 688:	c1 e0       	ldi	r28, 0x01	; 1
 68a:	01 c0       	rjmp	.+2      	; 0x68e <_spi_tranceive+0x5e>
#endif

int8_t _spi_tranceive(spi_state_t* state)
{
    uint8_t len = MAX(state->tran_len, state->recv_len);
    uint8_t i = 0;
 68c:	c0 e0       	ldi	r28, 0x00	; 0
 68e:	8f 01       	movw	r16, r30

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 690:	cd 17       	cp	r28, r29
 692:	10 f5       	brcc	.+68     	; 0x6d8 <_spi_tranceive+0xa8>
	{
		uint8_t tran = i < state->tran_len ? state->tran_buf[i] : 0xFF;
 694:	ff 24       	eor	r15, r15
 696:	fa 94       	dec	r15
 698:	d8 01       	movw	r26, r16
 69a:	14 96       	adiw	r26, 0x04	; 4
 69c:	8c 91       	ld	r24, X
 69e:	14 97       	sbiw	r26, 0x04	; 4
 6a0:	c8 17       	cp	r28, r24
 6a2:	30 f4       	brcc	.+12     	; 0x6b0 <_spi_tranceive+0x80>
 6a4:	ed 91       	ld	r30, X+
 6a6:	fc 91       	ld	r31, X
 6a8:	ec 0f       	add	r30, r28
 6aa:	f1 1d       	adc	r31, r1
 6ac:	80 81       	ld	r24, Z
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <_spi_tranceive+0x82>
 6b0:	8f 2d       	mov	r24, r15
	    uint8_t recv = state->tranceive_byte(tran);	
 6b2:	d8 01       	movw	r26, r16
 6b4:	51 96       	adiw	r26, 0x11	; 17
 6b6:	ed 91       	ld	r30, X+
 6b8:	fc 91       	ld	r31, X
 6ba:	52 97       	sbiw	r26, 0x12	; 18
 6bc:	09 95       	icall
		
		if (i < state->recv_len)
 6be:	f8 01       	movw	r30, r16
 6c0:	95 81       	ldd	r25, Z+5	; 0x05
 6c2:	c9 17       	cp	r28, r25
 6c4:	30 f4       	brcc	.+12     	; 0x6d2 <_spi_tranceive+0xa2>
		    state->recv_buf[i] = recv;
 6c6:	02 80       	ldd	r0, Z+2	; 0x02
 6c8:	f3 81       	ldd	r31, Z+3	; 0x03
 6ca:	e0 2d       	mov	r30, r0
 6cc:	ec 0f       	add	r30, r28
 6ce:	f1 1d       	adc	r31, r1
 6d0:	80 83       	st	Z, r24

        *state->spcr &= ~(1 << SPIF);
        ++i;
    }
	
	for (; i < len; ++i)
 6d2:	cf 5f       	subi	r28, 0xFF	; 255
 6d4:	cd 17       	cp	r28, r29
 6d6:	00 f3       	brcs	.-64     	; 0x698 <_spi_tranceive+0x68>
		
		if (i < state->recv_len)
		    state->recv_buf[i] = recv;
	}
	
    if (state->on_completed)
 6d8:	d8 01       	movw	r26, r16
 6da:	1f 96       	adiw	r26, 0x0f	; 15
 6dc:	ed 91       	ld	r30, X+
 6de:	fc 91       	ld	r31, X
 6e0:	50 97       	sbiw	r26, 0x10	; 16
 6e2:	30 97       	sbiw	r30, 0x00	; 0
 6e4:	21 f0       	breq	.+8      	; 0x6ee <_spi_tranceive+0xbe>
        state->on_completed(state);
 6e6:	c8 01       	movw	r24, r16
 6e8:	09 95       	icall

    return SPI_OK;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <_spi_tranceive+0xc0>
 6ee:	80 e0       	ldi	r24, 0x00	; 0
}   
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	08 95       	ret

000006fc <_spi_isr>:

void _spi_isr(spi_state_t* state)
{  
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
    if (state->recv_len)
 700:	dc 01       	movw	r26, r24
 702:	15 96       	adiw	r26, 0x05	; 5
 704:	2c 91       	ld	r18, X
 706:	15 97       	sbiw	r26, 0x05	; 5
 708:	22 23       	and	r18, r18
 70a:	51 f0       	breq	.+20     	; 0x720 <_spi_isr+0x24>
        state->recv_buf[0] = *state->spdr;
 70c:	12 96       	adiw	r26, 0x02	; 2
 70e:	ed 91       	ld	r30, X+
 710:	fc 91       	ld	r31, X
 712:	13 97       	sbiw	r26, 0x03	; 3
 714:	19 96       	adiw	r26, 0x09	; 9
 716:	0d 90       	ld	r0, X+
 718:	bc 91       	ld	r27, X
 71a:	a0 2d       	mov	r26, r0
 71c:	2c 91       	ld	r18, X
 71e:	20 83       	st	Z, r18

    _spi_tranceive(state);
 720:	87 df       	rcall	.-242    	; 0x630 <_spi_tranceive>
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
