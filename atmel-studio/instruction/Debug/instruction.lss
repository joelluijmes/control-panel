
instruction.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000a70  00000ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001efc  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cf  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d9b  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050a  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000891  00000000  00000000  0000491a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000051ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	40 c0       	rjmp	.+128    	; 0x82 <__ctors_end>
   2:	52 c0       	rjmp	.+164    	; 0xa8 <__bad_interrupt>
   4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
   6:	50 c0       	rjmp	.+160    	; 0xa8 <__bad_interrupt>
   8:	4f c0       	rjmp	.+158    	; 0xa8 <__bad_interrupt>
   a:	4e c0       	rjmp	.+156    	; 0xa8 <__bad_interrupt>
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
   e:	4c c0       	rjmp	.+152    	; 0xa8 <__bad_interrupt>
  10:	4b c0       	rjmp	.+150    	; 0xa8 <__bad_interrupt>
  12:	4a c0       	rjmp	.+148    	; 0xa8 <__bad_interrupt>
  14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
  16:	48 c0       	rjmp	.+144    	; 0xa8 <__bad_interrupt>
  18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
  1a:	46 c0       	rjmp	.+140    	; 0xa8 <__bad_interrupt>
  1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
  1e:	72 c4       	rjmp	.+2276   	; 0x904 <__vector_15>
  20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
  22:	42 c0       	rjmp	.+132    	; 0xa8 <__bad_interrupt>
  24:	41 c0       	rjmp	.+130    	; 0xa8 <__bad_interrupt>
  26:	40 c0       	rjmp	.+128    	; 0xa8 <__bad_interrupt>
  28:	e2 c0       	rjmp	.+452    	; 0x1ee <display_update+0x144>
  2a:	e1 c0       	rjmp	.+450    	; 0x1ee <display_update+0x144>
  2c:	e0 c0       	rjmp	.+448    	; 0x1ee <display_update+0x144>
  2e:	df c0       	rjmp	.+446    	; 0x1ee <display_update+0x144>
  30:	de c0       	rjmp	.+444    	; 0x1ee <display_update+0x144>
  32:	dd c0       	rjmp	.+442    	; 0x1ee <display_update+0x144>
  34:	dc c0       	rjmp	.+440    	; 0x1ee <display_update+0x144>
  36:	db c0       	rjmp	.+438    	; 0x1ee <display_update+0x144>
  38:	e9 c0       	rjmp	.+466    	; 0x20c <display_update+0x162>
  3a:	f5 c0       	rjmp	.+490    	; 0x226 <display_update+0x17c>
  3c:	01 c1       	rjmp	.+514    	; 0x240 <display_update+0x196>
  3e:	0d c1       	rjmp	.+538    	; 0x25a <display_update+0x1b0>
  40:	19 c1       	rjmp	.+562    	; 0x274 <display_update+0x1ca>
  42:	25 c1       	rjmp	.+586    	; 0x28e <display_update+0x1e4>
  44:	31 c1       	rjmp	.+610    	; 0x2a8 <display_update+0x1fe>
  46:	b6 c1       	rjmp	.+876    	; 0x3b4 <__stack+0xb5>
  48:	b5 c1       	rjmp	.+874    	; 0x3b4 <__stack+0xb5>
  4a:	b4 c1       	rjmp	.+872    	; 0x3b4 <__stack+0xb5>
  4c:	b3 c1       	rjmp	.+870    	; 0x3b4 <__stack+0xb5>
  4e:	b2 c1       	rjmp	.+868    	; 0x3b4 <__stack+0xb5>
  50:	b1 c1       	rjmp	.+866    	; 0x3b4 <__stack+0xb5>
  52:	b0 c1       	rjmp	.+864    	; 0x3b4 <__stack+0xb5>
  54:	af c1       	rjmp	.+862    	; 0x3b4 <__stack+0xb5>
  56:	bd c1       	rjmp	.+890    	; 0x3d2 <__stack+0xd3>
  58:	c9 c1       	rjmp	.+914    	; 0x3ec <__stack+0xed>
  5a:	d5 c1       	rjmp	.+938    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
  5c:	e1 c1       	rjmp	.+962    	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
  5e:	ed c1       	rjmp	.+986    	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
  60:	f9 c1       	rjmp	.+1010   	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
  62:	05 c2       	rjmp	.+1034   	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
  64:	86 c2       	rjmp	.+1292   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  66:	85 c2       	rjmp	.+1290   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  68:	84 c2       	rjmp	.+1288   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  6a:	83 c2       	rjmp	.+1286   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  6c:	82 c2       	rjmp	.+1284   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  6e:	81 c2       	rjmp	.+1282   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  70:	80 c2       	rjmp	.+1280   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  72:	7f c2       	rjmp	.+1278   	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
  74:	8d c2       	rjmp	.+1306   	; 0x590 <__FUSE_REGION_LENGTH__+0x190>
  76:	99 c2       	rjmp	.+1330   	; 0x5aa <__FUSE_REGION_LENGTH__+0x1aa>
  78:	a5 c2       	rjmp	.+1354   	; 0x5c4 <__FUSE_REGION_LENGTH__+0x1c4>
  7a:	b1 c2       	rjmp	.+1378   	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
  7c:	bd c2       	rjmp	.+1402   	; 0x5f8 <__FUSE_REGION_LENGTH__+0x1f8>
  7e:	c9 c2       	rjmp	.+1426   	; 0x612 <__FUSE_REGION_LENGTH__+0x212>
  80:	d5 c2       	rjmp	.+1450   	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d2 e0       	ldi	r29, 0x02	; 2
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	a0 e0       	ldi	r26, 0x00	; 0
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	e0 e7       	ldi	r30, 0x70	; 112
  96:	fa e0       	ldi	r31, 0x0A	; 10
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a8 31       	cpi	r26, 0x18	; 24
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>
  a4:	3f d3       	rcall	.+1662   	; 0x724 <main>
  a6:	e2 c4       	rjmp	.+2500   	; 0xa6c <_exit>

000000a8 <__bad_interrupt>:
  a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <display_update>:
    max7221_display(1, MAX7221_DIGIT4, (operand->immediate/0x10)%0x10);
    max7221_display(1, MAX7221_DIGIT0, (operand->immediate/0x100)%0x10);
}

void display_update(const instruction_t* const instruction)
{
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	1f 92       	push	r1
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	8c 01       	movw	r16, r24
    print_mar(instruction->mar);
  be:	dc 01       	movw	r26, r24
  c0:	12 96       	adiw	r26, 0x02	; 2
  c2:	ed 90       	ld	r14, X+
  c4:	fc 90       	ld	r15, X
  c6:	13 97       	sbiw	r26, 0x03	; 3
    //.alu = &alu
//};

static inline void print_mar(uint16_t val)
{
    max7221_display(0, MAX7221_DIGIT7, val%0x10);
  c8:	4e 2d       	mov	r20, r14
  ca:	4f 70       	andi	r20, 0x0F	; 15
  cc:	68 e0       	ldi	r22, 0x08	; 8
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	d1 d3       	rcall	.+1954   	; 0x874 <max7221_display>
    max7221_display(0, MAX7221_DIGIT3, (val/0x10)%0x10);
  d2:	a7 01       	movw	r20, r14
  d4:	52 95       	swap	r21
  d6:	42 95       	swap	r20
  d8:	4f 70       	andi	r20, 0x0F	; 15
  da:	45 27       	eor	r20, r21
  dc:	5f 70       	andi	r21, 0x0F	; 15
  de:	45 27       	eor	r20, r21
  e0:	4f 70       	andi	r20, 0x0F	; 15
  e2:	64 e0       	ldi	r22, 0x04	; 4
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	c6 d3       	rcall	.+1932   	; 0x874 <max7221_display>
    max7221_display(0, MAX7221_DIGIT2, (val/0x100)%0x10);
  e8:	4f 2d       	mov	r20, r15
  ea:	4f 70       	andi	r20, 0x0F	; 15
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	c1 d3       	rcall	.+1922   	; 0x874 <max7221_display>
}

void display_update(const instruction_t* const instruction)
{
    print_mar(instruction->mar);
    print_mdr(instruction->mdr);
  f2:	f8 01       	movw	r30, r16
  f4:	e0 80       	ld	r14, Z
  f6:	f1 80       	ldd	r15, Z+1	; 0x01
    max7221_display(0, MAX7221_DIGIT0, (val/0x100)%0x10);
}

static inline void print_mdr(uint16_t val)
{
    max7221_display(1, MAX7221_DIGIT1, val%0x10);
  f8:	4e 2d       	mov	r20, r14
  fa:	4f 70       	andi	r20, 0x0F	; 15
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	b9 d3       	rcall	.+1906   	; 0x874 <max7221_display>
    max7221_display(0, MAX7221_DIGIT1, (val/0x10)%0x10);
 102:	a7 01       	movw	r20, r14
 104:	52 95       	swap	r21
 106:	42 95       	swap	r20
 108:	4f 70       	andi	r20, 0x0F	; 15
 10a:	45 27       	eor	r20, r21
 10c:	5f 70       	andi	r21, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	4f 70       	andi	r20, 0x0F	; 15
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	ae d3       	rcall	.+1884   	; 0x874 <max7221_display>
    max7221_display(0, MAX7221_DIGIT5, (val/0x100)%0x10);
 118:	4f 2d       	mov	r20, r15
 11a:	4f 70       	andi	r20, 0x0F	; 15
 11c:	66 e0       	ldi	r22, 0x06	; 6
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	a9 d3       	rcall	.+1874   	; 0x874 <max7221_display>

void display_update(const instruction_t* const instruction)
{
    print_mar(instruction->mar);
    print_mdr(instruction->mdr);
    print_pc(instruction->pc);
 122:	d8 01       	movw	r26, r16
 124:	14 96       	adiw	r26, 0x04	; 4
 126:	ed 90       	ld	r14, X+
 128:	fc 90       	ld	r15, X
 12a:	15 97       	sbiw	r26, 0x05	; 5
    max7221_display(0, MAX7221_DIGIT2, (val/0x100)%0x10);
}

static inline void print_pc(uint16_t val)
{
    max7221_display(0, MAX7221_DIGIT6, val%0x10);
 12c:	4e 2d       	mov	r20, r14
 12e:	4f 70       	andi	r20, 0x0F	; 15
 130:	67 e0       	ldi	r22, 0x07	; 7
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	9f d3       	rcall	.+1854   	; 0x874 <max7221_display>
    max7221_display(0, MAX7221_DIGIT4, (val/0x10)%0x10);
 136:	a7 01       	movw	r20, r14
 138:	52 95       	swap	r21
 13a:	42 95       	swap	r20
 13c:	4f 70       	andi	r20, 0x0F	; 15
 13e:	45 27       	eor	r20, r21
 140:	5f 70       	andi	r21, 0x0F	; 15
 142:	45 27       	eor	r20, r21
 144:	4f 70       	andi	r20, 0x0F	; 15
 146:	65 e0       	ldi	r22, 0x05	; 5
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	94 d3       	rcall	.+1832   	; 0x874 <max7221_display>
    max7221_display(0, MAX7221_DIGIT0, (val/0x100)%0x10);
 14c:	4f 2d       	mov	r20, r15
 14e:	4f 70       	andi	r20, 0x0F	; 15
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	8f d3       	rcall	.+1822   	; 0x874 <max7221_display>
void display_update(const instruction_t* const instruction)
{
    print_mar(instruction->mar);
    print_mdr(instruction->mdr);
    print_pc(instruction->pc);
    print_address(instruction->address);
 156:	f8 01       	movw	r30, r16
 158:	e6 80       	ldd	r14, Z+6	; 0x06
 15a:	f7 80       	ldd	r15, Z+7	; 0x07
    max7221_display(0, MAX7221_DIGIT5, (val/0x100)%0x10);
}

static inline void print_address(uint16_t val)
{
    max7221_display(1, MAX7221_DIGIT5, val%0x10);
 15c:	4e 2d       	mov	r20, r14
 15e:	4f 70       	andi	r20, 0x0F	; 15
 160:	66 e0       	ldi	r22, 0x06	; 6
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	87 d3       	rcall	.+1806   	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT7, (val/0x10)%0x10);
 166:	a7 01       	movw	r20, r14
 168:	52 95       	swap	r21
 16a:	42 95       	swap	r20
 16c:	4f 70       	andi	r20, 0x0F	; 15
 16e:	45 27       	eor	r20, r21
 170:	5f 70       	andi	r21, 0x0F	; 15
 172:	45 27       	eor	r20, r21
 174:	4f 70       	andi	r20, 0x0F	; 15
 176:	68 e0       	ldi	r22, 0x08	; 8
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	7c d3       	rcall	.+1784   	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT3, (val/0x100)%0x10);
 17c:	4f 2d       	mov	r20, r15
 17e:	4f 70       	andi	r20, 0x0F	; 15
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	77 d3       	rcall	.+1774   	; 0x874 <max7221_display>
}

static inline void print_alu(const alu_t* const alu)
{
    stp16_shift(*(uint16_t*)alu);
 186:	d8 01       	movw	r26, r16
 188:	19 96       	adiw	r26, 0x09	; 9
 18a:	8d 91       	ld	r24, X+
 18c:	9c 91       	ld	r25, X
 18e:	1a 97       	sbiw	r26, 0x0a	; 10
 190:	3e d4       	rcall	.+2172   	; 0xa0e <stp16_shift>
    stp16_latch();
 192:	32 d4       	rcall	.+2148   	; 0x9f8 <stp16_latch>
}

static inline void print_condition(condition_t condition)
{
    max7221_display(1, MAX7221_DIGIT2, (uint8_t)condition);
 194:	f8 01       	movw	r30, r16
 196:	40 85       	ldd	r20, Z+8	; 0x08
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	6b d3       	rcall	.+1750   	; 0x874 <max7221_display>
#define OPERAND_C 2


static uint8_t read_switch()
{
    ADCSRA |= 1 << ADSC;            // start adc
 19e:	ea e7       	ldi	r30, 0x7A	; 122
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 83       	st	Z, r24
    
    while (ADCSRA & (1 << ADSC)) ;  // = 1 as long conversion is in progress
 1a8:	90 81       	ld	r25, Z
 1aa:	29 2f       	mov	r18, r25
 1ac:	20 74       	andi	r18, 0x40	; 64
 1ae:	96 fd       	sbrc	r25, 6
 1b0:	fb cf       	rjmp	.-10     	; 0x1a8 <display_update+0xfe>
    uint16_t val = ADC;
 1b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 1b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>

    if (val > 750)
 1ba:	8f 3e       	cpi	r24, 0xEF	; 239
 1bc:	f2 e0       	ldi	r31, 0x02	; 2
 1be:	9f 07       	cpc	r25, r31
 1c0:	30 f4       	brcc	.+12     	; 0x1ce <display_update+0x124>
        return OPERAND_A;
    else if (val < 250)
 1c2:	8a 3f       	cpi	r24, 0xFA	; 250
 1c4:	91 05       	cpc	r25, r1
 1c6:	10 f0       	brcs	.+4      	; 0x1cc <display_update+0x122>
        return OPERAND_C;
    else
        return OPERAND_B;
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <display_update+0x124>
    uint16_t val = ADC;

    if (val > 750)
        return OPERAND_A;
    else if (val < 250)
        return OPERAND_C;
 1cc:	22 e0       	ldi	r18, 0x02	; 2
    print_address(instruction->address);
    
    print_alu(&instruction->alu);
    print_condition(instruction->condition);

    volatile uint8_t sw = read_switch();
 1ce:	29 83       	std	Y+1, r18	; 0x01
    if (sw == OPERAND_A)
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 11       	cpse	r24, r1
 1d4:	df c0       	rjmp	.+446    	; 0x394 <__stack+0x95>
    max7221_display(1, MAX7221_DIGIT2, (uint8_t)condition);
}

static inline void print_operand(const operand_t* const operand)
{
    switch (operand->register_op)
 1d6:	d8 01       	movw	r26, r16
 1d8:	1b 96       	adiw	r26, 0x0b	; 11
 1da:	ec 91       	ld	r30, X
 1dc:	ef 70       	andi	r30, 0x0F	; 15
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ef 30       	cpi	r30, 0x0F	; 15
 1e2:	f1 05       	cpc	r31, r1
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <display_update+0x13e>
 1e6:	6d c0       	rjmp	.+218    	; 0x2c2 <display_update+0x218>
 1e8:	ec 5e       	subi	r30, 0xEC	; 236
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	09 94       	ijmp
    case R3:
    case R4:
    case R5:
    case R6:
    case R7:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 1ee:	4f ef       	ldi	r20, 0xFF	; 255
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	3f d3       	rcall	.+1662   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'R');   // R
 1f6:	42 e5       	ldi	r20, 0x52	; 82
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	3b d3       	rcall	.+1654   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, (uint8_t)operand->register_op);
 1fe:	f8 01       	movw	r30, r16
 200:	43 85       	ldd	r20, Z+11	; 0x0b
 202:	4f 70       	andi	r20, 0x0F	; 15
 204:	67 e0       	ldi	r22, 0x07	; 7
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	35 d3       	rcall	.+1642   	; 0x874 <max7221_display>
 20a:	84 c2       	rjmp	.+1288   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case PC:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 20c:	4f ef       	ldi	r20, 0xFF	; 255
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	30 d3       	rcall	.+1632   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'P');
 214:	40 e5       	ldi	r20, 0x50	; 80
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	2c d3       	rcall	.+1624   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'C');
 21c:	43 e4       	ldi	r20, 0x43	; 67
 21e:	67 e0       	ldi	r22, 0x07	; 7
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	28 d3       	rcall	.+1616   	; 0x874 <max7221_display>
 224:	77 c2       	rjmp	.+1262   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case MDR:
        max7221_display(1, MAX7221_DIGIT0, 'M');
 226:	4d e4       	ldi	r20, 0x4D	; 77
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	23 d3       	rcall	.+1606   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'D');
 22e:	44 e4       	ldi	r20, 0x44	; 68
 230:	65 e0       	ldi	r22, 0x05	; 5
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	1f d3       	rcall	.+1598   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'R');
 236:	42 e5       	ldi	r20, 0x52	; 82
 238:	67 e0       	ldi	r22, 0x07	; 7
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	1b d3       	rcall	.+1590   	; 0x874 <max7221_display>
 23e:	6a c2       	rjmp	.+1236   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case MAR:
        max7221_display(1, MAX7221_DIGIT0, 'M');
 240:	4d e4       	ldi	r20, 0x4D	; 77
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	16 d3       	rcall	.+1580   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'A');
 248:	41 e4       	ldi	r20, 0x41	; 65
 24a:	65 e0       	ldi	r22, 0x05	; 5
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	12 d3       	rcall	.+1572   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'R');
 250:	42 e5       	ldi	r20, 0x52	; 82
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e d3       	rcall	.+1564   	; 0x874 <max7221_display>
 258:	5d c2       	rjmp	.+1210   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case STATUS_REG:
        max7221_display(1, MAX7221_DIGIT0, 'S');
 25a:	43 e5       	ldi	r20, 0x53	; 83
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	09 d3       	rcall	.+1554   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'R');
 262:	42 e5       	ldi	r20, 0x52	; 82
 264:	65 e0       	ldi	r22, 0x05	; 5
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	05 d3       	rcall	.+1546   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'G');
 26a:	47 e4       	ldi	r20, 0x47	; 71
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	01 d3       	rcall	.+1538   	; 0x874 <max7221_display>
 272:	50 c2       	rjmp	.+1184   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        //max7221_display(1, 4, 0xFF);
        //max7221_display(1, 6, 'X');
        //return;

    case Y:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 274:	4f ef       	ldi	r20, 0xFF	; 255
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	fc d2       	rcall	.+1528   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 0xFF);
 27c:	4f ef       	ldi	r20, 0xFF	; 255
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	f8 d2       	rcall	.+1520   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'Y');
 284:	49 e5       	ldi	r20, 0x59	; 89
 286:	67 e0       	ldi	r22, 0x07	; 7
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	f4 d2       	rcall	.+1512   	; 0x874 <max7221_display>
 28c:	1a c0       	rjmp	.+52     	; 0x2c2 <display_update+0x218>
        break;

    case Z:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 28e:	4f ef       	ldi	r20, 0xFF	; 255
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	ef d2       	rcall	.+1502   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 0xFF);
 296:	4f ef       	ldi	r20, 0xFF	; 255
 298:	65 e0       	ldi	r22, 0x05	; 5
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	eb d2       	rcall	.+1494   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'Z');
 29e:	4a e5       	ldi	r20, 0x5A	; 90
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	e7 d2       	rcall	.+1486   	; 0x874 <max7221_display>
 2a6:	36 c2       	rjmp	.+1132   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case STACK_POINTER:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 2a8:	4f ef       	ldi	r20, 0xFF	; 255
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	e2 d2       	rcall	.+1476   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'S');
 2b0:	43 e5       	ldi	r20, 0x53	; 83
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	de d2       	rcall	.+1468   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'P');
 2b8:	40 e5       	ldi	r20, 0x50	; 80
 2ba:	67 e0       	ldi	r22, 0x07	; 7
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	da d2       	rcall	.+1460   	; 0x874 <max7221_display>
 2c0:	29 c2       	rjmp	.+1106   	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;
    }    

    max7221_display(1, MAX7221_DIGIT6, operand->immediate%0x10);
 2c2:	d8 01       	movw	r26, r16
 2c4:	1b 96       	adiw	r26, 0x0b	; 11
 2c6:	8c 91       	ld	r24, X
 2c8:	1b 97       	sbiw	r26, 0x0b	; 11
 2ca:	82 95       	swap	r24
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	1c 96       	adiw	r26, 0x0c	; 12
 2d0:	9c 91       	ld	r25, X
 2d2:	29 2f       	mov	r18, r25
 2d4:	22 95       	swap	r18
 2d6:	20 7f       	andi	r18, 0xF0	; 240
 2d8:	42 2f       	mov	r20, r18
 2da:	48 2b       	or	r20, r24
 2dc:	59 2f       	mov	r21, r25
 2de:	52 95       	swap	r21
 2e0:	5f 70       	andi	r21, 0x0F	; 15
 2e2:	4f 70       	andi	r20, 0x0F	; 15
 2e4:	50 78       	andi	r21, 0x80	; 128
 2e6:	55 23       	and	r21, r21
 2e8:	34 f4       	brge	.+12     	; 0x2f6 <display_update+0x24c>
 2ea:	41 50       	subi	r20, 0x01	; 1
 2ec:	51 09       	sbc	r21, r1
 2ee:	40 6f       	ori	r20, 0xF0	; 240
 2f0:	5f 6f       	ori	r21, 0xFF	; 255
 2f2:	4f 5f       	subi	r20, 0xFF	; 255
 2f4:	5f 4f       	sbci	r21, 0xFF	; 255
 2f6:	67 e0       	ldi	r22, 0x07	; 7
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	bc d2       	rcall	.+1400   	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT4, (operand->immediate/0x10)%0x10);
 2fc:	f8 01       	movw	r30, r16
 2fe:	23 85       	ldd	r18, Z+11	; 0x0b
 300:	22 95       	swap	r18
 302:	2f 70       	andi	r18, 0x0F	; 15
 304:	34 85       	ldd	r19, Z+12	; 0x0c
 306:	43 2f       	mov	r20, r19
 308:	42 95       	swap	r20
 30a:	40 7f       	andi	r20, 0xF0	; 240
 30c:	84 2f       	mov	r24, r20
 30e:	82 2b       	or	r24, r18
 310:	93 2f       	mov	r25, r19
 312:	92 95       	swap	r25
 314:	9f 70       	andi	r25, 0x0F	; 15
 316:	99 23       	and	r25, r25
 318:	0c f4       	brge	.+2      	; 0x31c <__stack+0x1d>
 31a:	0f 96       	adiw	r24, 0x0f	; 15
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	95 95       	asr	r25
 326:	87 95       	ror	r24
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	ac 01       	movw	r20, r24
 32e:	4f 70       	andi	r20, 0x0F	; 15
 330:	50 78       	andi	r21, 0x80	; 128
 332:	55 23       	and	r21, r21
 334:	34 f4       	brge	.+12     	; 0x342 <__stack+0x43>
 336:	41 50       	subi	r20, 0x01	; 1
 338:	51 09       	sbc	r21, r1
 33a:	40 6f       	ori	r20, 0xF0	; 240
 33c:	5f 6f       	ori	r21, 0xFF	; 255
 33e:	4f 5f       	subi	r20, 0xFF	; 255
 340:	5f 4f       	sbci	r21, 0xFF	; 255
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	96 d2       	rcall	.+1324   	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT0, (operand->immediate/0x100)%0x10);
 348:	d8 01       	movw	r26, r16
 34a:	1b 96       	adiw	r26, 0x0b	; 11
 34c:	2c 91       	ld	r18, X
 34e:	1b 97       	sbiw	r26, 0x0b	; 11
 350:	22 95       	swap	r18
 352:	2f 70       	andi	r18, 0x0F	; 15
 354:	1c 96       	adiw	r26, 0x0c	; 12
 356:	3c 91       	ld	r19, X
 358:	43 2f       	mov	r20, r19
 35a:	42 95       	swap	r20
 35c:	40 7f       	andi	r20, 0xF0	; 240
 35e:	84 2f       	mov	r24, r20
 360:	82 2b       	or	r24, r18
 362:	93 2f       	mov	r25, r19
 364:	92 95       	swap	r25
 366:	9f 70       	andi	r25, 0x0F	; 15
 368:	99 23       	and	r25, r25
 36a:	14 f4       	brge	.+4      	; 0x370 <__stack+0x71>
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	89 2f       	mov	r24, r25
 372:	99 0f       	add	r25, r25
 374:	99 0b       	sbc	r25, r25
 376:	ac 01       	movw	r20, r24
 378:	4f 70       	andi	r20, 0x0F	; 15
 37a:	50 78       	andi	r21, 0x80	; 128
 37c:	55 23       	and	r21, r21
 37e:	34 f4       	brge	.+12     	; 0x38c <__stack+0x8d>
 380:	41 50       	subi	r20, 0x01	; 1
 382:	51 09       	sbc	r21, r1
 384:	40 6f       	ori	r20, 0xF0	; 240
 386:	5f 6f       	ori	r21, 0xFF	; 255
 388:	4f 5f       	subi	r20, 0xFF	; 255
 38a:	5f 4f       	sbci	r21, 0xFF	; 255
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	71 d2       	rcall	.+1250   	; 0x874 <max7221_display>
 392:	c0 c1       	rjmp	.+896    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
    print_condition(instruction->condition);

    volatile uint8_t sw = read_switch();
    if (sw == OPERAND_A)
        print_operand(&instruction->operand_a);
    else if (sw == OPERAND_B)
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	09 f0       	breq	.+2      	; 0x39c <__stack+0x9d>
 39a:	df c0       	rjmp	.+446    	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
    max7221_display(1, MAX7221_DIGIT2, (uint8_t)condition);
}

static inline void print_operand(const operand_t* const operand)
{
    switch (operand->register_op)
 39c:	d8 01       	movw	r26, r16
 39e:	1d 96       	adiw	r26, 0x0d	; 13
 3a0:	ec 91       	ld	r30, X
 3a2:	ef 70       	andi	r30, 0x0F	; 15
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ef 30       	cpi	r30, 0x0F	; 15
 3a8:	f1 05       	cpc	r31, r1
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__stack+0xaf>
 3ac:	6d c0       	rjmp	.+218    	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
 3ae:	ed 5d       	subi	r30, 0xDD	; 221
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	09 94       	ijmp
    case R3:
    case R4:
    case R5:
    case R6:
    case R7:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 3b4:	4f ef       	ldi	r20, 0xFF	; 255
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	5c d2       	rcall	.+1208   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'R');   // R
 3bc:	42 e5       	ldi	r20, 0x52	; 82
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	58 d2       	rcall	.+1200   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, (uint8_t)operand->register_op);
 3c4:	f8 01       	movw	r30, r16
 3c6:	45 85       	ldd	r20, Z+13	; 0x0d
 3c8:	4f 70       	andi	r20, 0x0F	; 15
 3ca:	67 e0       	ldi	r22, 0x07	; 7
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	52 d2       	rcall	.+1188   	; 0x874 <max7221_display>
 3d0:	a1 c1       	rjmp	.+834    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case PC:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 3d2:	4f ef       	ldi	r20, 0xFF	; 255
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	4d d2       	rcall	.+1178   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'P');
 3da:	40 e5       	ldi	r20, 0x50	; 80
 3dc:	65 e0       	ldi	r22, 0x05	; 5
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	49 d2       	rcall	.+1170   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'C');
 3e2:	43 e4       	ldi	r20, 0x43	; 67
 3e4:	67 e0       	ldi	r22, 0x07	; 7
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	45 d2       	rcall	.+1162   	; 0x874 <max7221_display>
 3ea:	94 c1       	rjmp	.+808    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case MDR:
        max7221_display(1, MAX7221_DIGIT0, 'M');
 3ec:	4d e4       	ldi	r20, 0x4D	; 77
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	40 d2       	rcall	.+1152   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'D');
 3f4:	44 e4       	ldi	r20, 0x44	; 68
 3f6:	65 e0       	ldi	r22, 0x05	; 5
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	3c d2       	rcall	.+1144   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'R');
 3fc:	42 e5       	ldi	r20, 0x52	; 82
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	38 d2       	rcall	.+1136   	; 0x874 <max7221_display>
 404:	87 c1       	rjmp	.+782    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case MAR:
        max7221_display(1, MAX7221_DIGIT0, 'M');
 406:	4d e4       	ldi	r20, 0x4D	; 77
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	33 d2       	rcall	.+1126   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'A');
 40e:	41 e4       	ldi	r20, 0x41	; 65
 410:	65 e0       	ldi	r22, 0x05	; 5
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	2f d2       	rcall	.+1118   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'R');
 416:	42 e5       	ldi	r20, 0x52	; 82
 418:	67 e0       	ldi	r22, 0x07	; 7
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	2b d2       	rcall	.+1110   	; 0x874 <max7221_display>
 41e:	7a c1       	rjmp	.+756    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case STATUS_REG:
        max7221_display(1, MAX7221_DIGIT0, 'S');
 420:	43 e5       	ldi	r20, 0x53	; 83
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	26 d2       	rcall	.+1100   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'R');
 428:	42 e5       	ldi	r20, 0x52	; 82
 42a:	65 e0       	ldi	r22, 0x05	; 5
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	22 d2       	rcall	.+1092   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'G');
 430:	47 e4       	ldi	r20, 0x47	; 71
 432:	67 e0       	ldi	r22, 0x07	; 7
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	1e d2       	rcall	.+1084   	; 0x874 <max7221_display>
 438:	6d c1       	rjmp	.+730    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        //max7221_display(1, 4, 0xFF);
        //max7221_display(1, 6, 'X');
        //return;

    case Y:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 43a:	4f ef       	ldi	r20, 0xFF	; 255
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	19 d2       	rcall	.+1074   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 0xFF);
 442:	4f ef       	ldi	r20, 0xFF	; 255
 444:	65 e0       	ldi	r22, 0x05	; 5
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	15 d2       	rcall	.+1066   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'Y');
 44a:	49 e5       	ldi	r20, 0x59	; 89
 44c:	67 e0       	ldi	r22, 0x07	; 7
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	11 d2       	rcall	.+1058   	; 0x874 <max7221_display>
 452:	1a c0       	rjmp	.+52     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
        break;

    case Z:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 454:	4f ef       	ldi	r20, 0xFF	; 255
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0c d2       	rcall	.+1048   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 0xFF);
 45c:	4f ef       	ldi	r20, 0xFF	; 255
 45e:	65 e0       	ldi	r22, 0x05	; 5
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	08 d2       	rcall	.+1040   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'Z');
 464:	4a e5       	ldi	r20, 0x5A	; 90
 466:	67 e0       	ldi	r22, 0x07	; 7
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	04 d2       	rcall	.+1032   	; 0x874 <max7221_display>
 46c:	53 c1       	rjmp	.+678    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case STACK_POINTER:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 46e:	4f ef       	ldi	r20, 0xFF	; 255
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	ff d1       	rcall	.+1022   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'S');
 476:	43 e5       	ldi	r20, 0x53	; 83
 478:	65 e0       	ldi	r22, 0x05	; 5
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	fb d1       	rcall	.+1014   	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'P');
 47e:	40 e5       	ldi	r20, 0x50	; 80
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	f7 d1       	rcall	.+1006   	; 0x874 <max7221_display>
 486:	46 c1       	rjmp	.+652    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;
    }    

    max7221_display(1, MAX7221_DIGIT6, operand->immediate%0x10);
 488:	d8 01       	movw	r26, r16
 48a:	1d 96       	adiw	r26, 0x0d	; 13
 48c:	8c 91       	ld	r24, X
 48e:	1d 97       	sbiw	r26, 0x0d	; 13
 490:	82 95       	swap	r24
 492:	8f 70       	andi	r24, 0x0F	; 15
 494:	1e 96       	adiw	r26, 0x0e	; 14
 496:	9c 91       	ld	r25, X
 498:	29 2f       	mov	r18, r25
 49a:	22 95       	swap	r18
 49c:	20 7f       	andi	r18, 0xF0	; 240
 49e:	42 2f       	mov	r20, r18
 4a0:	48 2b       	or	r20, r24
 4a2:	59 2f       	mov	r21, r25
 4a4:	52 95       	swap	r21
 4a6:	5f 70       	andi	r21, 0x0F	; 15
 4a8:	4f 70       	andi	r20, 0x0F	; 15
 4aa:	50 78       	andi	r21, 0x80	; 128
 4ac:	55 23       	and	r21, r21
 4ae:	34 f4       	brge	.+12     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
 4b0:	41 50       	subi	r20, 0x01	; 1
 4b2:	51 09       	sbc	r21, r1
 4b4:	40 6f       	ori	r20, 0xF0	; 240
 4b6:	5f 6f       	ori	r21, 0xFF	; 255
 4b8:	4f 5f       	subi	r20, 0xFF	; 255
 4ba:	5f 4f       	sbci	r21, 0xFF	; 255
 4bc:	67 e0       	ldi	r22, 0x07	; 7
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	d9 d1       	rcall	.+946    	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT4, (operand->immediate/0x10)%0x10);
 4c2:	f8 01       	movw	r30, r16
 4c4:	25 85       	ldd	r18, Z+13	; 0x0d
 4c6:	22 95       	swap	r18
 4c8:	2f 70       	andi	r18, 0x0F	; 15
 4ca:	36 85       	ldd	r19, Z+14	; 0x0e
 4cc:	43 2f       	mov	r20, r19
 4ce:	42 95       	swap	r20
 4d0:	40 7f       	andi	r20, 0xF0	; 240
 4d2:	84 2f       	mov	r24, r20
 4d4:	82 2b       	or	r24, r18
 4d6:	93 2f       	mov	r25, r19
 4d8:	92 95       	swap	r25
 4da:	9f 70       	andi	r25, 0x0F	; 15
 4dc:	99 23       	and	r25, r25
 4de:	0c f4       	brge	.+2      	; 0x4e2 <__FUSE_REGION_LENGTH__+0xe2>
 4e0:	0f 96       	adiw	r24, 0x0f	; 15
 4e2:	95 95       	asr	r25
 4e4:	87 95       	ror	r24
 4e6:	95 95       	asr	r25
 4e8:	87 95       	ror	r24
 4ea:	95 95       	asr	r25
 4ec:	87 95       	ror	r24
 4ee:	95 95       	asr	r25
 4f0:	87 95       	ror	r24
 4f2:	ac 01       	movw	r20, r24
 4f4:	4f 70       	andi	r20, 0x0F	; 15
 4f6:	50 78       	andi	r21, 0x80	; 128
 4f8:	55 23       	and	r21, r21
 4fa:	34 f4       	brge	.+12     	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
 4fc:	41 50       	subi	r20, 0x01	; 1
 4fe:	51 09       	sbc	r21, r1
 500:	40 6f       	ori	r20, 0xF0	; 240
 502:	5f 6f       	ori	r21, 0xFF	; 255
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	b3 d1       	rcall	.+870    	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT0, (operand->immediate/0x100)%0x10);
 50e:	d8 01       	movw	r26, r16
 510:	1d 96       	adiw	r26, 0x0d	; 13
 512:	2c 91       	ld	r18, X
 514:	1d 97       	sbiw	r26, 0x0d	; 13
 516:	22 95       	swap	r18
 518:	2f 70       	andi	r18, 0x0F	; 15
 51a:	1e 96       	adiw	r26, 0x0e	; 14
 51c:	3c 91       	ld	r19, X
 51e:	43 2f       	mov	r20, r19
 520:	42 95       	swap	r20
 522:	40 7f       	andi	r20, 0xF0	; 240
 524:	84 2f       	mov	r24, r20
 526:	82 2b       	or	r24, r18
 528:	93 2f       	mov	r25, r19
 52a:	92 95       	swap	r25
 52c:	9f 70       	andi	r25, 0x0F	; 15
 52e:	99 23       	and	r25, r25
 530:	14 f4       	brge	.+4      	; 0x536 <__FUSE_REGION_LENGTH__+0x136>
 532:	81 50       	subi	r24, 0x01	; 1
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	89 2f       	mov	r24, r25
 538:	99 0f       	add	r25, r25
 53a:	99 0b       	sbc	r25, r25
 53c:	ac 01       	movw	r20, r24
 53e:	4f 70       	andi	r20, 0x0F	; 15
 540:	50 78       	andi	r21, 0x80	; 128
 542:	55 23       	and	r21, r21
 544:	34 f4       	brge	.+12     	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
 546:	41 50       	subi	r20, 0x01	; 1
 548:	51 09       	sbc	r21, r1
 54a:	40 6f       	ori	r20, 0xF0	; 240
 54c:	5f 6f       	ori	r21, 0xFF	; 255
 54e:	4f 5f       	subi	r20, 0xFF	; 255
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	8e d1       	rcall	.+796    	; 0x874 <max7221_display>
 558:	dd c0       	rjmp	.+442    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
    max7221_display(1, MAX7221_DIGIT2, (uint8_t)condition);
}

static inline void print_operand(const operand_t* const operand)
{
    switch (operand->register_op)
 55a:	d8 01       	movw	r26, r16
 55c:	1f 96       	adiw	r26, 0x0f	; 15
 55e:	ec 91       	ld	r30, X
 560:	ef 70       	andi	r30, 0x0F	; 15
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ef 30       	cpi	r30, 0x0F	; 15
 566:	f1 05       	cpc	r31, r1
 568:	08 f0       	brcs	.+2      	; 0x56c <__FUSE_REGION_LENGTH__+0x16c>
 56a:	6d c0       	rjmp	.+218    	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
 56c:	ee 5c       	subi	r30, 0xCE	; 206
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	09 94       	ijmp
    case R3:
    case R4:
    case R5:
    case R6:
    case R7:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 572:	4f ef       	ldi	r20, 0xFF	; 255
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	7d d1       	rcall	.+762    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'R');   // R
 57a:	42 e5       	ldi	r20, 0x52	; 82
 57c:	65 e0       	ldi	r22, 0x05	; 5
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	79 d1       	rcall	.+754    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, (uint8_t)operand->register_op);
 582:	f8 01       	movw	r30, r16
 584:	47 85       	ldd	r20, Z+15	; 0x0f
 586:	4f 70       	andi	r20, 0x0F	; 15
 588:	67 e0       	ldi	r22, 0x07	; 7
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	73 d1       	rcall	.+742    	; 0x874 <max7221_display>
 58e:	c2 c0       	rjmp	.+388    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case PC:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 590:	4f ef       	ldi	r20, 0xFF	; 255
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	6e d1       	rcall	.+732    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'P');
 598:	40 e5       	ldi	r20, 0x50	; 80
 59a:	65 e0       	ldi	r22, 0x05	; 5
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	6a d1       	rcall	.+724    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'C');
 5a0:	43 e4       	ldi	r20, 0x43	; 67
 5a2:	67 e0       	ldi	r22, 0x07	; 7
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	66 d1       	rcall	.+716    	; 0x874 <max7221_display>
 5a8:	b5 c0       	rjmp	.+362    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case MDR:
        max7221_display(1, MAX7221_DIGIT0, 'M');
 5aa:	4d e4       	ldi	r20, 0x4D	; 77
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	61 d1       	rcall	.+706    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'D');
 5b2:	44 e4       	ldi	r20, 0x44	; 68
 5b4:	65 e0       	ldi	r22, 0x05	; 5
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	5d d1       	rcall	.+698    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'R');
 5ba:	42 e5       	ldi	r20, 0x52	; 82
 5bc:	67 e0       	ldi	r22, 0x07	; 7
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	59 d1       	rcall	.+690    	; 0x874 <max7221_display>
 5c2:	a8 c0       	rjmp	.+336    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case MAR:
        max7221_display(1, MAX7221_DIGIT0, 'M');
 5c4:	4d e4       	ldi	r20, 0x4D	; 77
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	54 d1       	rcall	.+680    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'A');
 5cc:	41 e4       	ldi	r20, 0x41	; 65
 5ce:	65 e0       	ldi	r22, 0x05	; 5
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	50 d1       	rcall	.+672    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'R');
 5d4:	42 e5       	ldi	r20, 0x52	; 82
 5d6:	67 e0       	ldi	r22, 0x07	; 7
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	4c d1       	rcall	.+664    	; 0x874 <max7221_display>
 5dc:	9b c0       	rjmp	.+310    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case STATUS_REG:
        max7221_display(1, MAX7221_DIGIT0, 'S');
 5de:	43 e5       	ldi	r20, 0x53	; 83
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	47 d1       	rcall	.+654    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'R');
 5e6:	42 e5       	ldi	r20, 0x52	; 82
 5e8:	65 e0       	ldi	r22, 0x05	; 5
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	43 d1       	rcall	.+646    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'G');
 5ee:	47 e4       	ldi	r20, 0x47	; 71
 5f0:	67 e0       	ldi	r22, 0x07	; 7
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	3f d1       	rcall	.+638    	; 0x874 <max7221_display>
 5f6:	8e c0       	rjmp	.+284    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        //max7221_display(1, 4, 0xFF);
        //max7221_display(1, 6, 'X');
        //return;

    case Y:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 5f8:	4f ef       	ldi	r20, 0xFF	; 255
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	3a d1       	rcall	.+628    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 0xFF);
 600:	4f ef       	ldi	r20, 0xFF	; 255
 602:	65 e0       	ldi	r22, 0x05	; 5
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	36 d1       	rcall	.+620    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'Y');
 608:	49 e5       	ldi	r20, 0x59	; 89
 60a:	67 e0       	ldi	r22, 0x07	; 7
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	32 d1       	rcall	.+612    	; 0x874 <max7221_display>
 610:	1a c0       	rjmp	.+52     	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
        break;

    case Z:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 612:	4f ef       	ldi	r20, 0xFF	; 255
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	2d d1       	rcall	.+602    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 0xFF);
 61a:	4f ef       	ldi	r20, 0xFF	; 255
 61c:	65 e0       	ldi	r22, 0x05	; 5
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	29 d1       	rcall	.+594    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'Z');
 622:	4a e5       	ldi	r20, 0x5A	; 90
 624:	67 e0       	ldi	r22, 0x07	; 7
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	25 d1       	rcall	.+586    	; 0x874 <max7221_display>
 62a:	74 c0       	rjmp	.+232    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;

    case STACK_POINTER:
        max7221_display(1, MAX7221_DIGIT0, 0xFF);
 62c:	4f ef       	ldi	r20, 0xFF	; 255
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	20 d1       	rcall	.+576    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT4, 'S');
 634:	43 e5       	ldi	r20, 0x53	; 83
 636:	65 e0       	ldi	r22, 0x05	; 5
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	1c d1       	rcall	.+568    	; 0x874 <max7221_display>
        max7221_display(1, MAX7221_DIGIT6, 'P');
 63c:	40 e5       	ldi	r20, 0x50	; 80
 63e:	67 e0       	ldi	r22, 0x07	; 7
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	18 d1       	rcall	.+560    	; 0x874 <max7221_display>
 644:	67 c0       	rjmp	.+206    	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
        return;
    }    

    max7221_display(1, MAX7221_DIGIT6, operand->immediate%0x10);
 646:	d8 01       	movw	r26, r16
 648:	1f 96       	adiw	r26, 0x0f	; 15
 64a:	8c 91       	ld	r24, X
 64c:	1f 97       	sbiw	r26, 0x0f	; 15
 64e:	82 95       	swap	r24
 650:	8f 70       	andi	r24, 0x0F	; 15
 652:	50 96       	adiw	r26, 0x10	; 16
 654:	9c 91       	ld	r25, X
 656:	29 2f       	mov	r18, r25
 658:	22 95       	swap	r18
 65a:	20 7f       	andi	r18, 0xF0	; 240
 65c:	42 2f       	mov	r20, r18
 65e:	48 2b       	or	r20, r24
 660:	59 2f       	mov	r21, r25
 662:	52 95       	swap	r21
 664:	5f 70       	andi	r21, 0x0F	; 15
 666:	4f 70       	andi	r20, 0x0F	; 15
 668:	50 78       	andi	r21, 0x80	; 128
 66a:	55 23       	and	r21, r21
 66c:	34 f4       	brge	.+12     	; 0x67a <__FUSE_REGION_LENGTH__+0x27a>
 66e:	41 50       	subi	r20, 0x01	; 1
 670:	51 09       	sbc	r21, r1
 672:	40 6f       	ori	r20, 0xF0	; 240
 674:	5f 6f       	ori	r21, 0xFF	; 255
 676:	4f 5f       	subi	r20, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	67 e0       	ldi	r22, 0x07	; 7
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	fa d0       	rcall	.+500    	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT4, (operand->immediate/0x10)%0x10);
 680:	f8 01       	movw	r30, r16
 682:	87 85       	ldd	r24, Z+15	; 0x0f
 684:	82 95       	swap	r24
 686:	8f 70       	andi	r24, 0x0F	; 15
 688:	90 89       	ldd	r25, Z+16	; 0x10
 68a:	29 2f       	mov	r18, r25
 68c:	22 95       	swap	r18
 68e:	20 7f       	andi	r18, 0xF0	; 240
 690:	42 2f       	mov	r20, r18
 692:	48 2b       	or	r20, r24
 694:	59 2f       	mov	r21, r25
 696:	52 95       	swap	r21
 698:	5f 70       	andi	r21, 0x0F	; 15
 69a:	55 23       	and	r21, r21
 69c:	14 f4       	brge	.+4      	; 0x6a2 <__FUSE_REGION_LENGTH__+0x2a2>
 69e:	41 5f       	subi	r20, 0xF1	; 241
 6a0:	5f 4f       	sbci	r21, 0xFF	; 255
 6a2:	55 95       	asr	r21
 6a4:	47 95       	ror	r20
 6a6:	55 95       	asr	r21
 6a8:	47 95       	ror	r20
 6aa:	55 95       	asr	r21
 6ac:	47 95       	ror	r20
 6ae:	55 95       	asr	r21
 6b0:	47 95       	ror	r20
 6b2:	4f 70       	andi	r20, 0x0F	; 15
 6b4:	50 78       	andi	r21, 0x80	; 128
 6b6:	55 23       	and	r21, r21
 6b8:	34 f4       	brge	.+12     	; 0x6c6 <__FUSE_REGION_LENGTH__+0x2c6>
 6ba:	41 50       	subi	r20, 0x01	; 1
 6bc:	51 09       	sbc	r21, r1
 6be:	40 6f       	ori	r20, 0xF0	; 240
 6c0:	5f 6f       	ori	r21, 0xFF	; 255
 6c2:	4f 5f       	subi	r20, 0xFF	; 255
 6c4:	5f 4f       	sbci	r21, 0xFF	; 255
 6c6:	65 e0       	ldi	r22, 0x05	; 5
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	d4 d0       	rcall	.+424    	; 0x874 <max7221_display>
    max7221_display(1, MAX7221_DIGIT0, (operand->immediate/0x100)%0x10);
 6cc:	d8 01       	movw	r26, r16
 6ce:	1f 96       	adiw	r26, 0x0f	; 15
 6d0:	8c 91       	ld	r24, X
 6d2:	1f 97       	sbiw	r26, 0x0f	; 15
 6d4:	82 95       	swap	r24
 6d6:	8f 70       	andi	r24, 0x0F	; 15
 6d8:	50 96       	adiw	r26, 0x10	; 16
 6da:	9c 91       	ld	r25, X
 6dc:	29 2f       	mov	r18, r25
 6de:	22 95       	swap	r18
 6e0:	20 7f       	andi	r18, 0xF0	; 240
 6e2:	42 2f       	mov	r20, r18
 6e4:	48 2b       	or	r20, r24
 6e6:	59 2f       	mov	r21, r25
 6e8:	52 95       	swap	r21
 6ea:	5f 70       	andi	r21, 0x0F	; 15
 6ec:	55 23       	and	r21, r21
 6ee:	14 f4       	brge	.+4      	; 0x6f4 <__FUSE_REGION_LENGTH__+0x2f4>
 6f0:	41 50       	subi	r20, 0x01	; 1
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	45 2f       	mov	r20, r21
 6f6:	55 0f       	add	r21, r21
 6f8:	55 0b       	sbc	r21, r21
 6fa:	4f 70       	andi	r20, 0x0F	; 15
 6fc:	50 78       	andi	r21, 0x80	; 128
 6fe:	55 23       	and	r21, r21
 700:	34 f4       	brge	.+12     	; 0x70e <__FUSE_REGION_LENGTH__+0x30e>
 702:	41 50       	subi	r20, 0x01	; 1
 704:	51 09       	sbc	r21, r1
 706:	40 6f       	ori	r20, 0xF0	; 240
 708:	5f 6f       	ori	r21, 0xFF	; 255
 70a:	4f 5f       	subi	r20, 0xFF	; 255
 70c:	5f 4f       	sbci	r21, 0xFF	; 255
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	b0 d0       	rcall	.+352    	; 0x874 <max7221_display>
        print_operand(&instruction->operand_a);
    else if (sw == OPERAND_B)
        print_operand(&instruction->operand_b);
    else
        print_operand(&instruction->operand_c);
}
 714:	0f 90       	pop	r0
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	08 95       	ret

00000724 <main>:
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	61 97       	sbiw	r28, 0x11	; 17
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
    ADMUX = 1 << REFS0 | 3;			// AVCC as reference | ADC3
 738:	83 e4       	ldi	r24, 0x43	; 67
 73a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    ADCSRA = 1 << ADEN | 1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0;
 73e:	87 e8       	ldi	r24, 0x87	; 135
 740:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>

    stp16_init();
 744:	4c d1       	rcall	.+664    	; 0x9de <stp16_init>
    stp16_output(1);
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	4f d1       	rcall	.+670    	; 0x9e8 <stp16_output>
    
    max7221_init();
 74a:	73 d0       	rcall	.+230    	; 0x832 <max7221_init>
    //max7221_clear();
    
    spi_init(SPI_SLAVE, SPI_32X);
 74c:	66 e0       	ldi	r22, 0x06	; 6
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	ae d0       	rcall	.+348    	; 0x8ae <spi_init>
    sei();
 752:	78 94       	sei

    while (1) 
    {
        instruction_t instruction = { 0 };
 754:	0f 2e       	mov	r0, r31
 756:	f1 e1       	ldi	r31, 0x11	; 17
 758:	ff 2e       	mov	r15, r31
 75a:	f0 2d       	mov	r31, r0
 75c:	8e 01       	movw	r16, r28
 75e:	0f 5f       	subi	r16, 0xFF	; 255
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	f8 01       	movw	r30, r16
 764:	8f 2d       	mov	r24, r15
 766:	11 92       	st	Z+, r1
 768:	8a 95       	dec	r24
 76a:	e9 f7       	brne	.-6      	; 0x766 <main+0x42>
        if (spi_tranceive((uint8_t*)&instruction, sizeof(instruction)) != SPI_OK)
 76c:	6f 2d       	mov	r22, r15
 76e:	c8 01       	movw	r24, r16
 770:	ba d0       	rcall	.+372    	; 0x8e6 <spi_tranceive>
 772:	8f 3f       	cpi	r24, 0xFF	; 255
 774:	b1 f7       	brne	.-20     	; 0x762 <main+0x3e>
            continue;

        while (!spi_completed()) ;
 776:	af d0       	rcall	.+350    	; 0x8d6 <spi_completed>
 778:	88 23       	and	r24, r24
 77a:	e9 f3       	breq	.-6      	; 0x776 <main+0x52>

        display_update(&instruction);
 77c:	c8 01       	movw	r24, r16
 77e:	95 dc       	rcall	.-1750   	; 0xaa <display_update>
 780:	f0 cf       	rjmp	.-32     	; 0x762 <main+0x3e>

00000782 <max7221_write>:
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	00 d0       	rcall	.+0      	; 0x788 <max7221_write+0x6>
 788:	00 d0       	rcall	.+0      	; 0x78a <max7221_write+0x8>
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
    // buffer for storing commands, the devices which aren't addressed get a NOP command
    uint8_t arr[MAX7221_DEVICES*2] = { 0 };
 78e:	19 82       	std	Y+1, r1	; 0x01
 790:	1a 82       	std	Y+2, r1	; 0x02
 792:	1b 82       	std	Y+3, r1	; 0x03
 794:	1c 82       	std	Y+4, r1	; 0x04

    // store the command in the buffer
    arr[device*2] = address;
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	e1 e0       	ldi	r30, 0x01	; 1
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	ec 0f       	add	r30, r28
 7a2:	fd 1f       	adc	r31, r29
 7a4:	e8 0f       	add	r30, r24
 7a6:	f9 1f       	adc	r31, r25
 7a8:	60 83       	st	Z, r22
    arr[device*2 + 1] = data;
 7aa:	fe 01       	movw	r30, r28
 7ac:	e8 0f       	add	r30, r24
 7ae:	f9 1f       	adc	r31, r25
 7b0:	42 83       	std	Z+2, r20	; 0x02
    max7221_write(device, digit, table[c]);
}

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();
 7b2:	8b b1       	in	r24, 0x0b	; 11
 7b4:	8c 7f       	andi	r24, 0xFC	; 252
 7b6:	8b b9       	out	0x0b, r24	; 11
 7b8:	fe 01       	movw	r30, r28
 7ba:	31 96       	adiw	r30, 0x01	; 1
 7bc:	be 01       	movw	r22, r28
 7be:	6b 5f       	subi	r22, 0xFB	; 251
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 7c2:	57 e0       	ldi	r21, 0x07	; 7
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	28 c0       	rjmp	.+80     	; 0x818 <max7221_write+0x96>

    for (uint8_t i = 0; i < len; ++i)
    {
        for (int8_t j = 7; j >= 0; --j)        // MAX7221 SPI is MSB (Big endian)
        {
            if ((arr[i] & (1 << j)) != 0)
 7c8:	80 81       	ld	r24, Z
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 2e       	mov	r0, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <max7221_write+0x52>
 7d0:	95 95       	asr	r25
 7d2:	87 95       	ror	r24
 7d4:	0a 94       	dec	r0
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <max7221_write+0x4e>
 7d8:	80 ff       	sbrs	r24, 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <max7221_write+0x5e>
                DATA_ASSERT();
 7dc:	2f 9a       	sbi	0x05, 7	; 5
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <max7221_write+0x60>
            else
                DATA_DISABLE();
 7e0:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e2:	87 ec       	ldi	r24, 0xC7	; 199
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <max7221_write+0x64>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <max7221_write+0x6a>
 7ec:	00 00       	nop

            _delay_us(100);
            SCK_ASSERT();
 7ee:	5d 9a       	sbi	0x0b, 5	; 11
 7f0:	87 ec       	ldi	r24, 0xC7	; 199
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <max7221_write+0x72>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <max7221_write+0x78>
 7fa:	00 00       	nop
            _delay_us(100);
            SCK_DISABLE();
 7fc:	5d 98       	cbi	0x0b, 5	; 11
 7fe:	87 ec       	ldi	r24, 0xC7	; 199
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	f1 f7       	brne	.-4      	; 0x802 <max7221_write+0x80>
 806:	00 c0       	rjmp	.+0      	; 0x808 <max7221_write+0x86>
 808:	00 00       	nop
 80a:	21 50       	subi	r18, 0x01	; 1
 80c:	31 09       	sbc	r19, r1
 80e:	e0 f6       	brcc	.-72     	; 0x7c8 <max7221_write+0x46>
 810:	31 96       	adiw	r30, 0x01	; 1

static void spi_write(const uint8_t* const arr, uint8_t len)
{
    CS_ASSERT();

    for (uint8_t i = 0; i < len; ++i)
 812:	e6 17       	cp	r30, r22
 814:	f7 07       	cpc	r31, r23
 816:	19 f0       	breq	.+6      	; 0x81e <max7221_write+0x9c>
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}

void max7221_write(uint8_t device, uint8_t address, uint8_t data)
{
 818:	25 2f       	mov	r18, r21
 81a:	34 2f       	mov	r19, r20
 81c:	d5 cf       	rjmp	.-86     	; 0x7c8 <max7221_write+0x46>
            SCK_DISABLE();
            _delay_us(100);
        }
    }

    CS_DISABLE();
 81e:	8b b1       	in	r24, 0x0b	; 11
 820:	83 60       	ori	r24, 0x03	; 3
 822:	8b b9       	out	0x0b, r24	; 11
    // store the command in the buffer
    arr[device*2] = address;
    arr[device*2 + 1] = data;

    spi_write(arr, MAX7221_DEVICES*2);
}
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	08 95       	ret

00000832 <max7221_init>:
#define SCK_DISABLE()   (MAX7221_SCK_PORT   &= ~MAX7221_SCK_MASK)

static void spi_write(const uint8_t* const arr, uint8_t len);

void max7221_init(void)
{
 832:	cf 93       	push	r28
    MAX7221_CS_DDR |= MAX7221_CS_MASK;
 834:	8a b1       	in	r24, 0x0a	; 10
 836:	83 60       	ori	r24, 0x03	; 3
 838:	8a b9       	out	0x0a, r24	; 10
    MAX7221_SCK_DDR |= MAX7221_SCK_MASK;
 83a:	55 9a       	sbi	0x0a, 5	; 10
    MAX7221_DATA_DDR |= MAX7221_DATA_MASK;
 83c:	27 9a       	sbi	0x04, 7	; 4

    CS_ASSERT();
 83e:	8b b1       	in	r24, 0x0b	; 11
 840:	8c 7f       	andi	r24, 0xFC	; 252
 842:	8b b9       	out	0x0b, r24	; 11
    SCK_ASSERT();
 844:	5d 9a       	sbi	0x0b, 5	; 11
    DATA_ASSERT();
 846:	2f 9a       	sbi	0x05, 7	; 5

    for (uint8_t i = 0; i < MAX7221_DEVICES; ++i)
 848:	c0 e0       	ldi	r28, 0x00	; 0
    {
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
 84a:	47 e0       	ldi	r20, 0x07	; 7
 84c:	6b e0       	ldi	r22, 0x0B	; 11
 84e:	8c 2f       	mov	r24, r28
 850:	98 df       	rcall	.-208    	; 0x782 <max7221_write>
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
 852:	40 e0       	ldi	r20, 0x00	; 0
 854:	69 e0       	ldi	r22, 0x09	; 9
 856:	8c 2f       	mov	r24, r28
 858:	94 df       	rcall	.-216    	; 0x782 <max7221_write>
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	6c e0       	ldi	r22, 0x0C	; 12
 85e:	8c 2f       	mov	r24, r28
 860:	90 df       	rcall	.-224    	; 0x782 <max7221_write>
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
 862:	48 e0       	ldi	r20, 0x08	; 8
 864:	6a e0       	ldi	r22, 0x0A	; 10
 866:	8c 2f       	mov	r24, r28
 868:	8c df       	rcall	.-232    	; 0x782 <max7221_write>

    CS_ASSERT();
    SCK_ASSERT();
    DATA_ASSERT();

    for (uint8_t i = 0; i < MAX7221_DEVICES; ++i)
 86a:	cf 5f       	subi	r28, 0xFF	; 255
 86c:	c2 30       	cpi	r28, 0x02	; 2
 86e:	69 f7       	brne	.-38     	; 0x84a <max7221_init+0x18>
        max7221_write(i, MAX7221_SCANLIMIT, 7);        // display 8 digits
        max7221_write(i, MAX7221_DECODEMODE, 0);       // we use software decoding for characters
        max7221_write(i, MAX7221_SHUTDOWN, 1);         // enable the chip
        max7221_write(i, MAX7221_INTENSITY, 8);        // set intensity to 8 (0 - 15)
    }
}
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <max7221_display>:
    spi_write(arr, MAX7221_DEVICES*2);
}

void max7221_display(uint8_t device, uint8_t digit, uint8_t c)
{
    if (c >= '0' && c <= '9')
 874:	e0 ed       	ldi	r30, 0xD0	; 208
 876:	e4 0f       	add	r30, r20
 878:	ea 30       	cpi	r30, 0x0A	; 10
 87a:	98 f0       	brcs	.+38     	; 0x8a2 <max7221_display+0x2e>
        c -= '0';
    else if (c >= 'a' && c <= 'z')
 87c:	9f e9       	ldi	r25, 0x9F	; 159
 87e:	94 0f       	add	r25, r20
 880:	9a 31       	cpi	r25, 0x1A	; 26
 882:	18 f4       	brcc	.+6      	; 0x88a <max7221_display+0x16>
        c -= 'a' - 10;
 884:	e9 ea       	ldi	r30, 0xA9	; 169
 886:	e4 0f       	add	r30, r20
 888:	0c c0       	rjmp	.+24     	; 0x8a2 <max7221_display+0x2e>
    else if (c >= 'A' && c <= 'Z')
 88a:	9f eb       	ldi	r25, 0xBF	; 191
 88c:	94 0f       	add	r25, r20
 88e:	9a 31       	cpi	r25, 0x1A	; 26
 890:	18 f4       	brcc	.+6      	; 0x898 <max7221_display+0x24>
        c -= 'A' - 10;
 892:	e9 ec       	ldi	r30, 0xC9	; 201
 894:	e4 0f       	add	r30, r20
 896:	05 c0       	rjmp	.+10     	; 0x8a2 <max7221_display+0x2e>
    else if (c > 0x0F)
 898:	40 31       	cpi	r20, 0x10	; 16
 89a:	10 f0       	brcs	.+4      	; 0x8a0 <max7221_display+0x2c>
        c = 0;
 89c:	e0 e0       	ldi	r30, 0x00	; 0
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <max7221_display+0x2e>
 8a0:	e4 2f       	mov	r30, r20
    {
        0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B,         // 0 - 9
        0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47                                  // a - f
    };

    max7221_write(device, digit, table[c]);
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	e9 5f       	subi	r30, 0xF9	; 249
 8a6:	fe 4f       	sbci	r31, 0xFE	; 254
 8a8:	40 81       	ld	r20, Z
 8aa:	6b df       	rcall	.-298    	; 0x782 <max7221_write>
 8ac:	08 95       	ret

000008ae <spi_init>:
{
    spi_state.transmitting = 1;
    spi_state.receiving = 0;

    return _spi_tranceive(&spi_state, buffer, len);
}
 8ae:	e4 e0       	ldi	r30, 0x04	; 4
 8b0:	f1 e0       	ldi	r31, 0x01	; 1
 8b2:	90 81       	ld	r25, Z
 8b4:	80 fb       	bst	r24, 0
 8b6:	90 f9       	bld	r25, 0
 8b8:	90 83       	st	Z, r25
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	31 f4       	brne	.+12     	; 0x8ca <spi_init+0x1c>
 8be:	8c b5       	in	r24, 0x2c	; 44
 8c0:	80 6c       	ori	r24, 0xC0	; 192
 8c2:	96 2f       	mov	r25, r22
 8c4:	93 70       	andi	r25, 0x03	; 3
 8c6:	89 2b       	or	r24, r25
 8c8:	8c bd       	out	0x2c, r24	; 44
 8ca:	62 ff       	sbrs	r22, 2
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <spi_init+0x26>
 8ce:	8d b5       	in	r24, 0x2d	; 45
 8d0:	81 60       	ori	r24, 0x01	; 1
 8d2:	8d bd       	out	0x2d, r24	; 45
 8d4:	08 95       	ret

000008d6 <spi_completed>:
 8d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
 8da:	83 fb       	bst	r24, 3
 8dc:	88 27       	eor	r24, r24
 8de:	80 f9       	bld	r24, 0
 8e0:	91 e0       	ldi	r25, 0x01	; 1
 8e2:	89 27       	eor	r24, r25
 8e4:	08 95       	ret

000008e6 <spi_tranceive>:
 8e6:	9c 01       	movw	r18, r24
 8e8:	46 2f       	mov	r20, r22
 8ea:	e4 e0       	ldi	r30, 0x04	; 4
 8ec:	f1 e0       	ldi	r31, 0x01	; 1
 8ee:	90 81       	ld	r25, Z
 8f0:	92 60       	ori	r25, 0x02	; 2
 8f2:	90 83       	st	Z, r25
 8f4:	90 81       	ld	r25, Z
 8f6:	94 60       	ori	r25, 0x04	; 4
 8f8:	90 83       	st	Z, r25
 8fa:	b9 01       	movw	r22, r18
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	26 d0       	rcall	.+76     	; 0x94e <_spi_tranceive>
 902:	08 95       	ret

00000904 <__vector_15>:

ISR(SPI_STC_vect)
{
 904:	1f 92       	push	r1
 906:	0f 92       	push	r0
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	0f 92       	push	r0
 90c:	11 24       	eor	r1, r1
 90e:	2f 93       	push	r18
 910:	3f 93       	push	r19
 912:	4f 93       	push	r20
 914:	5f 93       	push	r21
 916:	6f 93       	push	r22
 918:	7f 93       	push	r23
 91a:	8f 93       	push	r24
 91c:	9f 93       	push	r25
 91e:	af 93       	push	r26
 920:	bf 93       	push	r27
 922:	ef 93       	push	r30
 924:	ff 93       	push	r31
    _spi_isr(&spi_state);
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	2b d0       	rcall	.+86     	; 0x982 <_spi_isr>
}
 92c:	ff 91       	pop	r31
 92e:	ef 91       	pop	r30
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	9f 91       	pop	r25
 936:	8f 91       	pop	r24
 938:	7f 91       	pop	r23
 93a:	6f 91       	pop	r22
 93c:	5f 91       	pop	r21
 93e:	4f 91       	pop	r20
 940:	3f 91       	pop	r19
 942:	2f 91       	pop	r18
 944:	0f 90       	pop	r0
 946:	0f be       	out	0x3f, r0	; 63
 948:	0f 90       	pop	r0
 94a:	1f 90       	pop	r1
 94c:	18 95       	reti

0000094e <_spi_tranceive>:
#else
    #error 'Unsupported device'
#endif

int8_t _spi_tranceive(spi_state_t* const state, uint8_t* const buffer, uint8_t len)
{
 94e:	fc 01       	movw	r30, r24
    if (state->running)
 950:	84 81       	ldd	r24, Z+4	; 0x04
 952:	83 fd       	sbrc	r24, 3
 954:	12 c0       	rjmp	.+36     	; 0x97a <_spi_tranceive+0x2c>
        return SPI_ALREADY_STARTED;

    state->buf = buffer;
 956:	71 83       	std	Z+1, r23	; 0x01
 958:	60 83       	st	Z, r22
    state->len = len;
 95a:	43 83       	std	Z+3, r20	; 0x03
    state->index = 0;
 95c:	12 82       	std	Z+2, r1	; 0x02
    state->running = 1;
 95e:	84 81       	ldd	r24, Z+4	; 0x04
 960:	88 60       	ori	r24, 0x08	; 8
 962:	84 83       	std	Z+4, r24	; 0x04
    
    if (state->mode == SPI_MASTER)
 964:	84 81       	ldd	r24, Z+4	; 0x04
 966:	80 fd       	sbrc	r24, 0
 968:	0a c0       	rjmp	.+20     	; 0x97e <_spi_tranceive+0x30>
        *state->spdr = buffer[0];    // start  by transmitting the first byte
 96a:	05 80       	ldd	r0, Z+5	; 0x05
 96c:	f6 81       	ldd	r31, Z+6	; 0x06
 96e:	e0 2d       	mov	r30, r0
 970:	db 01       	movw	r26, r22
 972:	8c 91       	ld	r24, X
 974:	80 83       	st	Z, r24

    return SPI_OK;
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	08 95       	ret
#endif

int8_t _spi_tranceive(spi_state_t* const state, uint8_t* const buffer, uint8_t len)
{
    if (state->running)
        return SPI_ALREADY_STARTED;
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	08 95       	ret
    state->running = 1;
    
    if (state->mode == SPI_MASTER)
        *state->spdr = buffer[0];    // start  by transmitting the first byte

    return SPI_OK;
 97e:	8f ef       	ldi	r24, 0xFF	; 255
}
 980:	08 95       	ret

00000982 <_spi_isr>:

void _spi_isr(spi_state_t* const state)
{
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	fc 01       	movw	r30, r24
    if (!state->running)
 988:	84 81       	ldd	r24, Z+4	; 0x04
 98a:	83 ff       	sbrs	r24, 3
 98c:	25 c0       	rjmp	.+74     	; 0x9d8 <_spi_isr+0x56>
        return;

    uint8_t c = *state->spdr;               // read the received byte
 98e:	a5 81       	ldd	r26, Z+5	; 0x05
 990:	b6 81       	ldd	r27, Z+6	; 0x06
 992:	2c 91       	ld	r18, X

    if (++state->index >= state->len)       // completed
 994:	82 81       	ldd	r24, Z+2	; 0x02
 996:	8f 5f       	subi	r24, 0xFF	; 255
 998:	82 83       	std	Z+2, r24	; 0x02
 99a:	93 81       	ldd	r25, Z+3	; 0x03
 99c:	89 17       	cp	r24, r25
 99e:	20 f0       	brcs	.+8      	; 0x9a8 <_spi_isr+0x26>
        state->running = 0;
 9a0:	84 81       	ldd	r24, Z+4	; 0x04
 9a2:	87 7f       	andi	r24, 0xF7	; 247
 9a4:	84 83       	std	Z+4, r24	; 0x04
 9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <_spi_isr+0x3e>
    else
        *state->spdr = state->transmitting ? state->buf[state->index] : 0xFF;    // transmit next byte
 9a8:	84 81       	ldd	r24, Z+4	; 0x04
 9aa:	81 ff       	sbrs	r24, 1
 9ac:	07 c0       	rjmp	.+14     	; 0x9bc <_spi_isr+0x3a>
 9ae:	82 81       	ldd	r24, Z+2	; 0x02
 9b0:	c0 81       	ld	r28, Z
 9b2:	d1 81       	ldd	r29, Z+1	; 0x01
 9b4:	c8 0f       	add	r28, r24
 9b6:	d1 1d       	adc	r29, r1
 9b8:	88 81       	ld	r24, Y
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <_spi_isr+0x3c>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	8c 93       	st	X, r24

    if (state->receiving)
 9c0:	84 81       	ldd	r24, Z+4	; 0x04
 9c2:	82 ff       	sbrs	r24, 2
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <_spi_isr+0x56>
        state->buf[state->index - 1] = c;       // store the received byte
 9c6:	82 81       	ldd	r24, Z+2	; 0x02
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	01 90       	ld	r0, Z+
 9ce:	f0 81       	ld	r31, Z
 9d0:	e0 2d       	mov	r30, r0
 9d2:	e8 0f       	add	r30, r24
 9d4:	f9 1f       	adc	r31, r25
 9d6:	20 83       	st	Z, r18
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	08 95       	ret

000009de <stp16_init>:
#define OE_ASSERT() (STP16_OE_PORT &= ~STP16_OE_MASK)
#define OE_DISABLE() (STP16_OE_PORT |= STP16_OE_MASK)

void stp16_init(void)
{
    STP16_CLK_DDR |= STP16_CLK_MASK;
 9de:	38 9a       	sbi	0x07, 0	; 7
    STP16_DATA_DDR |= STP16_DATA_MASK;
 9e0:	39 9a       	sbi	0x07, 1	; 7
    STP16_LE_DDR |= STP16_LE_MASK;
 9e2:	69 9a       	sbi	0x0d, 1	; 13
    STP16_OE_DDR |= STP16_OE_MASK;
 9e4:	3a 9a       	sbi	0x07, 2	; 7
 9e6:	08 95       	ret

000009e8 <stp16_output>:
}

void stp16_output(uint8_t enable)
{
    if (enable)
 9e8:	88 23       	and	r24, r24
 9ea:	21 f0       	breq	.+8      	; 0x9f4 <stp16_output+0xc>
        OE_ASSERT();
 9ec:	88 b1       	in	r24, 0x08	; 8
 9ee:	88 7f       	andi	r24, 0xF8	; 248
 9f0:	88 b9       	out	0x08, r24	; 8
 9f2:	08 95       	ret
    else
        OE_DISABLE();
 9f4:	42 9a       	sbi	0x08, 2	; 8
 9f6:	08 95       	ret

000009f8 <stp16_latch>:
}

void stp16_latch(void)
{
    LE_ASSERT();
 9f8:	71 9a       	sbi	0x0e, 1	; 14
 9fa:	87 ec       	ldi	r24, 0xC7	; 199
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	01 97       	sbiw	r24, 0x01	; 1
 a00:	f1 f7       	brne	.-4      	; 0x9fe <stp16_latch+0x6>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <stp16_latch+0xc>
 a04:	00 00       	nop
    _delay_us(100);
    LE_DISABLE();
 a06:	8e b1       	in	r24, 0x0e	; 14
 a08:	8c 7f       	andi	r24, 0xFC	; 252
 a0a:	8e b9       	out	0x0e, r24	; 14
 a0c:	08 95       	ret

00000a0e <stp16_shift>:
}

void stp16_shift(uint16_t val)
{
 a0e:	fc 01       	movw	r30, r24
 a10:	20 e0       	ldi	r18, 0x00	; 0
 a12:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i = 0; i < 16; ++i)
    {
        if (val & (1 << i))
 a14:	61 e0       	ldi	r22, 0x01	; 1
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	ab 01       	movw	r20, r22
 a1a:	02 2e       	mov	r0, r18
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <stp16_shift+0x14>
 a1e:	44 0f       	add	r20, r20
 a20:	55 1f       	adc	r21, r21
 a22:	0a 94       	dec	r0
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <stp16_shift+0x10>
 a26:	4e 23       	and	r20, r30
 a28:	5f 23       	and	r21, r31
 a2a:	45 2b       	or	r20, r21
 a2c:	11 f0       	breq	.+4      	; 0xa32 <stp16_shift+0x24>
            DATA_ASSERT();
 a2e:	41 9a       	sbi	0x08, 1	; 8
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <stp16_shift+0x2a>
        else
            DATA_DISABLE();
 a32:	98 b1       	in	r25, 0x08	; 8
 a34:	9c 7f       	andi	r25, 0xFC	; 252
 a36:	98 b9       	out	0x08, r25	; 8
 a38:	87 ec       	ldi	r24, 0xC7	; 199
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	01 97       	sbiw	r24, 0x01	; 1
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <stp16_shift+0x2e>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <stp16_shift+0x34>
 a42:	00 00       	nop

        _delay_us(100);
        CLK_ASSERT();
 a44:	40 9a       	sbi	0x08, 0	; 8
 a46:	87 ec       	ldi	r24, 0xC7	; 199
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	01 97       	sbiw	r24, 0x01	; 1
 a4c:	f1 f7       	brne	.-4      	; 0xa4a <stp16_shift+0x3c>
 a4e:	00 c0       	rjmp	.+0      	; 0xa50 <stp16_shift+0x42>
 a50:	00 00       	nop
        _delay_us(100);
        CLK_DISABLE();
 a52:	40 98       	cbi	0x08, 0	; 8
 a54:	87 ec       	ldi	r24, 0xC7	; 199
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	01 97       	sbiw	r24, 0x01	; 1
 a5a:	f1 f7       	brne	.-4      	; 0xa58 <stp16_shift+0x4a>
 a5c:	00 c0       	rjmp	.+0      	; 0xa5e <stp16_shift+0x50>
 a5e:	00 00       	nop
 a60:	2f 5f       	subi	r18, 0xFF	; 255
 a62:	3f 4f       	sbci	r19, 0xFF	; 255
    LE_DISABLE();
}

void stp16_shift(uint16_t val)
{
    for (uint8_t i = 0; i < 16; ++i)
 a64:	20 31       	cpi	r18, 0x10	; 16
 a66:	31 05       	cpc	r19, r1
 a68:	b9 f6       	brne	.-82     	; 0xa18 <stp16_shift+0xa>
        CLK_ASSERT();
        _delay_us(100);
        CLK_DISABLE();
        _delay_us(100);
    }
}
 a6a:	08 95       	ret

00000a6c <_exit>:
 a6c:	f8 94       	cli

00000a6e <__stop_program>:
 a6e:	ff cf       	rjmp	.-2      	; 0xa6e <__stop_program>
